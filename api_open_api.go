/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.111
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// OpenAPIApiService OpenAPIApi service
type OpenAPIApiService service

// GetOpenApiOpts Optional parameters for the method 'GetOpenApi'
type GetOpenApiOpts struct {
    ExcludedTags optional.String
    IncludedTags optional.String
    IncludeDeprecated optional.Bool
    DocumentationStatus optional.Interface
}

/*
GetOpenApi OpenAPI spec documentation for the Onshape REST API.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetOpenApiOpts - Optional Parameters:
 * @param "ExcludedTags" (optional.String) -  If an operation contains an excluded tag, it is not returned from this endpoint.
 * @param "IncludedTags" (optional.String) -  Return only operations with tags included in includedTags.
 * @param "IncludeDeprecated" (optional.Bool) -  Include deprecated endpoints.
 * @param "DocumentationStatus" (optional.Interface of []string) -  Only return endpoints that have the specified document status. Default is to return all the endpoints the user should have access to.
@return OpenApi
*/
func (a *OpenAPIApiService) GetOpenApi(ctx _context.Context, localVarOptionals *GetOpenApiOpts) (OpenApi, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OpenApi
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/openapi"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.ExcludedTags.IsSet() {
		localVarQueryParams.Add("excludedTags", parameterToString(localVarOptionals.ExcludedTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludedTags.IsSet() {
		localVarQueryParams.Add("includedTags", parameterToString(localVarOptionals.IncludedTags.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeDeprecated.IsSet() {
		localVarQueryParams.Add("includeDeprecated", parameterToString(localVarOptionals.IncludeDeprecated.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DocumentationStatus.IsSet() {
		t:=localVarOptionals.DocumentationStatus.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("documentationStatus", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("documentationStatus", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1", "application/vnd.onshape.v1+yaml;charset=UTF-8;qs=0.1", "application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2", "application/json;charset=UTF-8; qs=0.09", "application/yaml;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OpenApi
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
