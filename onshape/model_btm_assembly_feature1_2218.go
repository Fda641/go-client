/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMAssemblyFeature12218 struct for BTMAssemblyFeature12218
type BTMAssemblyFeature12218 struct {
	BTMAssemblyFeature887
	BtType *string `json:"btType,omitempty"`
}

// NewBTMAssemblyFeature12218 instantiates a new BTMAssemblyFeature12218 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMAssemblyFeature12218() *BTMAssemblyFeature12218 {
	this := BTMAssemblyFeature12218{}
	return &this
}

// NewBTMAssemblyFeature12218WithDefaults instantiates a new BTMAssemblyFeature12218 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMAssemblyFeature12218WithDefaults() *BTMAssemblyFeature12218 {
	this := BTMAssemblyFeature12218{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMAssemblyFeature12218) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMAssemblyFeature12218) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMAssemblyFeature12218) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMAssemblyFeature12218) SetBtType(v string) {
	o.BtType = &v
}

func (o BTMAssemblyFeature12218) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
	if errBTMAssemblyFeature887 != nil {
		return []byte{}, errBTMAssemblyFeature887
	}
	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
	if errBTMAssemblyFeature887 != nil {
		return []byte{}, errBTMAssemblyFeature887
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	return json.Marshal(toSerialize)
}

type NullableBTMAssemblyFeature12218 struct {
	value *BTMAssemblyFeature12218
	isSet bool
}

func (v NullableBTMAssemblyFeature12218) Get() *BTMAssemblyFeature12218 {
	return v.value
}

func (v *NullableBTMAssemblyFeature12218) Set(val *BTMAssemblyFeature12218) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMAssemblyFeature12218) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMAssemblyFeature12218) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMAssemblyFeature12218(val *BTMAssemblyFeature12218) *NullableBTMAssemblyFeature12218 {
	return &NullableBTMAssemblyFeature12218{value: val, isSet: true}
}

func (v NullableBTMAssemblyFeature12218) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMAssemblyFeature12218) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
