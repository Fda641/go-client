/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPIdentifier8 struct for BTPIdentifier8
type BTPIdentifier8 struct {
	BTPPropertyAccessor23
	BtType *string `json:"btType,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	InvalidIdentifierForTest *string `json:"invalidIdentifierForTest,omitempty"`
}

// NewBTPIdentifier8 instantiates a new BTPIdentifier8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPIdentifier8() *BTPIdentifier8 {
	this := BTPIdentifier8{}
	return &this
}

// NewBTPIdentifier8WithDefaults instantiates a new BTPIdentifier8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPIdentifier8WithDefaults() *BTPIdentifier8 {
	this := BTPIdentifier8{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPIdentifier8) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPIdentifier8) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPIdentifier8) SetBtType(v string) {
	o.BtType = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BTPIdentifier8) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BTPIdentifier8) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *BTPIdentifier8) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetInvalidIdentifierForTest returns the InvalidIdentifierForTest field value if set, zero value otherwise.
func (o *BTPIdentifier8) GetInvalidIdentifierForTest() string {
	if o == nil || o.InvalidIdentifierForTest == nil {
		var ret string
		return ret
	}
	return *o.InvalidIdentifierForTest
}

// GetInvalidIdentifierForTestOk returns a tuple with the InvalidIdentifierForTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8) GetInvalidIdentifierForTestOk() (*string, bool) {
	if o == nil || o.InvalidIdentifierForTest == nil {
		return nil, false
	}
	return o.InvalidIdentifierForTest, true
}

// HasInvalidIdentifierForTest returns a boolean if a field has been set.
func (o *BTPIdentifier8) HasInvalidIdentifierForTest() bool {
	if o != nil && o.InvalidIdentifierForTest != nil {
		return true
	}

	return false
}

// SetInvalidIdentifierForTest gets a reference to the given string and assigns it to the InvalidIdentifierForTest field.
func (o *BTPIdentifier8) SetInvalidIdentifierForTest(v string) {
	o.InvalidIdentifierForTest = &v
}

func (o BTPIdentifier8) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPPropertyAccessor23, errBTPPropertyAccessor23 := json.Marshal(o.BTPPropertyAccessor23)
	if errBTPPropertyAccessor23 != nil {
		return []byte{}, errBTPPropertyAccessor23
	}
	errBTPPropertyAccessor23 = json.Unmarshal([]byte(serializedBTPPropertyAccessor23), &toSerialize)
	if errBTPPropertyAccessor23 != nil {
		return []byte{}, errBTPPropertyAccessor23
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.InvalidIdentifierForTest != nil {
		toSerialize["invalidIdentifierForTest"] = o.InvalidIdentifierForTest
	}
	return json.Marshal(toSerialize)
}

type NullableBTPIdentifier8 struct {
	value *BTPIdentifier8
	isSet bool
}

func (v NullableBTPIdentifier8) Get() *BTPIdentifier8 {
	return v.value
}

func (v *NullableBTPIdentifier8) Set(val *BTPIdentifier8) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPIdentifier8) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPIdentifier8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPIdentifier8(val *BTPIdentifier8) *NullableBTPIdentifier8 {
	return &NullableBTPIdentifier8{value: val, isSet: true}
}

func (v NullableBTPIdentifier8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPIdentifier8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
