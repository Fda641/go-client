/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementContinue274 struct for BTPStatementContinue274
type BTPStatementContinue274 struct {
	BTPStatement269
	BtType *string `json:"btType,omitempty"`
	SpaceAfterContinue *BTPSpace10 `json:"spaceAfterContinue,omitempty"`
}

// NewBTPStatementContinue274 instantiates a new BTPStatementContinue274 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementContinue274() *BTPStatementContinue274 {
	this := BTPStatementContinue274{}
	return &this
}

// NewBTPStatementContinue274WithDefaults instantiates a new BTPStatementContinue274 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementContinue274WithDefaults() *BTPStatementContinue274 {
	this := BTPStatementContinue274{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementContinue274) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementContinue274) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementContinue274) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementContinue274) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceAfterContinue returns the SpaceAfterContinue field value if set, zero value otherwise.
func (o *BTPStatementContinue274) GetSpaceAfterContinue() BTPSpace10 {
	if o == nil || o.SpaceAfterContinue == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterContinue
}

// GetSpaceAfterContinueOk returns a tuple with the SpaceAfterContinue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementContinue274) GetSpaceAfterContinueOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterContinue == nil {
		return nil, false
	}
	return o.SpaceAfterContinue, true
}

// HasSpaceAfterContinue returns a boolean if a field has been set.
func (o *BTPStatementContinue274) HasSpaceAfterContinue() bool {
	if o != nil && o.SpaceAfterContinue != nil {
		return true
	}

	return false
}

// SetSpaceAfterContinue gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterContinue field.
func (o *BTPStatementContinue274) SetSpaceAfterContinue(v BTPSpace10) {
	o.SpaceAfterContinue = &v
}

func (o BTPStatementContinue274) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceAfterContinue != nil {
		toSerialize["spaceAfterContinue"] = o.SpaceAfterContinue
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementContinue274 struct {
	value *BTPStatementContinue274
	isSet bool
}

func (v NullableBTPStatementContinue274) Get() *BTPStatementContinue274 {
	return v.value
}

func (v *NullableBTPStatementContinue274) Set(val *BTPStatementContinue274) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementContinue274) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementContinue274) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementContinue274(val *BTPStatementContinue274) *NullableBTPStatementContinue274 {
	return &NullableBTPStatementContinue274{value: val, isSet: true}
}

func (v NullableBTPStatementContinue274) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementContinue274) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
