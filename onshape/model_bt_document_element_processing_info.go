/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTDocumentElementProcessingInfo struct for BTDocumentElementProcessingInfo
type BTDocumentElementProcessingInfo struct {
	AngleUnits *string `json:"angleUnits,omitempty"`
	DataType *string `json:"dataType,omitempty"`
	ElementType *string `json:"elementType,omitempty"`
	Filename *string `json:"filename,omitempty"`
	ForeignDataId *string `json:"foreignDataId,omitempty"`
	Id *string `json:"id,omitempty"`
	LengthUnits *string `json:"lengthUnits,omitempty"`
	MassUnits *string `json:"massUnits,omitempty"`
	MicroversionId *string `json:"microversionId,omitempty"`
	Name *string `json:"name,omitempty"`
	SpecifiedUnit *string `json:"specifiedUnit,omitempty"`
	ThumbnailInfo *BTThumbnailInfo `json:"thumbnailInfo,omitempty"`
	Thumbnails *string `json:"thumbnails,omitempty"`
	TranslationEventKey *string `json:"translationEventKey,omitempty"`
	TranslationId *string `json:"translationId,omitempty"`
	Type *string `json:"type,omitempty"`
	Unupdatable *bool `json:"unupdatable,omitempty"`
}

// NewBTDocumentElementProcessingInfo instantiates a new BTDocumentElementProcessingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDocumentElementProcessingInfo() *BTDocumentElementProcessingInfo {
	this := BTDocumentElementProcessingInfo{}
	return &this
}

// NewBTDocumentElementProcessingInfoWithDefaults instantiates a new BTDocumentElementProcessingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDocumentElementProcessingInfoWithDefaults() *BTDocumentElementProcessingInfo {
	this := BTDocumentElementProcessingInfo{}
	return &this
}

// GetAngleUnits returns the AngleUnits field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetAngleUnits() string {
	if o == nil || o.AngleUnits == nil {
		var ret string
		return ret
	}
	return *o.AngleUnits
}

// GetAngleUnitsOk returns a tuple with the AngleUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetAngleUnitsOk() (*string, bool) {
	if o == nil || o.AngleUnits == nil {
		return nil, false
	}
	return o.AngleUnits, true
}

// HasAngleUnits returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasAngleUnits() bool {
	if o != nil && o.AngleUnits != nil {
		return true
	}

	return false
}

// SetAngleUnits gets a reference to the given string and assigns it to the AngleUnits field.
func (o *BTDocumentElementProcessingInfo) SetAngleUnits(v string) {
	o.AngleUnits = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *BTDocumentElementProcessingInfo) SetDataType(v string) {
	o.DataType = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetElementType() string {
	if o == nil || o.ElementType == nil {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetElementTypeOk() (*string, bool) {
	if o == nil || o.ElementType == nil {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasElementType() bool {
	if o != nil && o.ElementType != nil {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *BTDocumentElementProcessingInfo) SetElementType(v string) {
	o.ElementType = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *BTDocumentElementProcessingInfo) SetFilename(v string) {
	o.Filename = &v
}

// GetForeignDataId returns the ForeignDataId field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetForeignDataId() string {
	if o == nil || o.ForeignDataId == nil {
		var ret string
		return ret
	}
	return *o.ForeignDataId
}

// GetForeignDataIdOk returns a tuple with the ForeignDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetForeignDataIdOk() (*string, bool) {
	if o == nil || o.ForeignDataId == nil {
		return nil, false
	}
	return o.ForeignDataId, true
}

// HasForeignDataId returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasForeignDataId() bool {
	if o != nil && o.ForeignDataId != nil {
		return true
	}

	return false
}

// SetForeignDataId gets a reference to the given string and assigns it to the ForeignDataId field.
func (o *BTDocumentElementProcessingInfo) SetForeignDataId(v string) {
	o.ForeignDataId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BTDocumentElementProcessingInfo) SetId(v string) {
	o.Id = &v
}

// GetLengthUnits returns the LengthUnits field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetLengthUnits() string {
	if o == nil || o.LengthUnits == nil {
		var ret string
		return ret
	}
	return *o.LengthUnits
}

// GetLengthUnitsOk returns a tuple with the LengthUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetLengthUnitsOk() (*string, bool) {
	if o == nil || o.LengthUnits == nil {
		return nil, false
	}
	return o.LengthUnits, true
}

// HasLengthUnits returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasLengthUnits() bool {
	if o != nil && o.LengthUnits != nil {
		return true
	}

	return false
}

// SetLengthUnits gets a reference to the given string and assigns it to the LengthUnits field.
func (o *BTDocumentElementProcessingInfo) SetLengthUnits(v string) {
	o.LengthUnits = &v
}

// GetMassUnits returns the MassUnits field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetMassUnits() string {
	if o == nil || o.MassUnits == nil {
		var ret string
		return ret
	}
	return *o.MassUnits
}

// GetMassUnitsOk returns a tuple with the MassUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetMassUnitsOk() (*string, bool) {
	if o == nil || o.MassUnits == nil {
		return nil, false
	}
	return o.MassUnits, true
}

// HasMassUnits returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasMassUnits() bool {
	if o != nil && o.MassUnits != nil {
		return true
	}

	return false
}

// SetMassUnits gets a reference to the given string and assigns it to the MassUnits field.
func (o *BTDocumentElementProcessingInfo) SetMassUnits(v string) {
	o.MassUnits = &v
}

// GetMicroversionId returns the MicroversionId field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetMicroversionId() string {
	if o == nil || o.MicroversionId == nil {
		var ret string
		return ret
	}
	return *o.MicroversionId
}

// GetMicroversionIdOk returns a tuple with the MicroversionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetMicroversionIdOk() (*string, bool) {
	if o == nil || o.MicroversionId == nil {
		return nil, false
	}
	return o.MicroversionId, true
}

// HasMicroversionId returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasMicroversionId() bool {
	if o != nil && o.MicroversionId != nil {
		return true
	}

	return false
}

// SetMicroversionId gets a reference to the given string and assigns it to the MicroversionId field.
func (o *BTDocumentElementProcessingInfo) SetMicroversionId(v string) {
	o.MicroversionId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BTDocumentElementProcessingInfo) SetName(v string) {
	o.Name = &v
}

// GetSpecifiedUnit returns the SpecifiedUnit field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetSpecifiedUnit() string {
	if o == nil || o.SpecifiedUnit == nil {
		var ret string
		return ret
	}
	return *o.SpecifiedUnit
}

// GetSpecifiedUnitOk returns a tuple with the SpecifiedUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetSpecifiedUnitOk() (*string, bool) {
	if o == nil || o.SpecifiedUnit == nil {
		return nil, false
	}
	return o.SpecifiedUnit, true
}

// HasSpecifiedUnit returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasSpecifiedUnit() bool {
	if o != nil && o.SpecifiedUnit != nil {
		return true
	}

	return false
}

// SetSpecifiedUnit gets a reference to the given string and assigns it to the SpecifiedUnit field.
func (o *BTDocumentElementProcessingInfo) SetSpecifiedUnit(v string) {
	o.SpecifiedUnit = &v
}

// GetThumbnailInfo returns the ThumbnailInfo field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetThumbnailInfo() BTThumbnailInfo {
	if o == nil || o.ThumbnailInfo == nil {
		var ret BTThumbnailInfo
		return ret
	}
	return *o.ThumbnailInfo
}

// GetThumbnailInfoOk returns a tuple with the ThumbnailInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetThumbnailInfoOk() (*BTThumbnailInfo, bool) {
	if o == nil || o.ThumbnailInfo == nil {
		return nil, false
	}
	return o.ThumbnailInfo, true
}

// HasThumbnailInfo returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasThumbnailInfo() bool {
	if o != nil && o.ThumbnailInfo != nil {
		return true
	}

	return false
}

// SetThumbnailInfo gets a reference to the given BTThumbnailInfo and assigns it to the ThumbnailInfo field.
func (o *BTDocumentElementProcessingInfo) SetThumbnailInfo(v BTThumbnailInfo) {
	o.ThumbnailInfo = &v
}

// GetThumbnails returns the Thumbnails field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetThumbnails() string {
	if o == nil || o.Thumbnails == nil {
		var ret string
		return ret
	}
	return *o.Thumbnails
}

// GetThumbnailsOk returns a tuple with the Thumbnails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetThumbnailsOk() (*string, bool) {
	if o == nil || o.Thumbnails == nil {
		return nil, false
	}
	return o.Thumbnails, true
}

// HasThumbnails returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasThumbnails() bool {
	if o != nil && o.Thumbnails != nil {
		return true
	}

	return false
}

// SetThumbnails gets a reference to the given string and assigns it to the Thumbnails field.
func (o *BTDocumentElementProcessingInfo) SetThumbnails(v string) {
	o.Thumbnails = &v
}

// GetTranslationEventKey returns the TranslationEventKey field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetTranslationEventKey() string {
	if o == nil || o.TranslationEventKey == nil {
		var ret string
		return ret
	}
	return *o.TranslationEventKey
}

// GetTranslationEventKeyOk returns a tuple with the TranslationEventKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetTranslationEventKeyOk() (*string, bool) {
	if o == nil || o.TranslationEventKey == nil {
		return nil, false
	}
	return o.TranslationEventKey, true
}

// HasTranslationEventKey returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasTranslationEventKey() bool {
	if o != nil && o.TranslationEventKey != nil {
		return true
	}

	return false
}

// SetTranslationEventKey gets a reference to the given string and assigns it to the TranslationEventKey field.
func (o *BTDocumentElementProcessingInfo) SetTranslationEventKey(v string) {
	o.TranslationEventKey = &v
}

// GetTranslationId returns the TranslationId field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetTranslationId() string {
	if o == nil || o.TranslationId == nil {
		var ret string
		return ret
	}
	return *o.TranslationId
}

// GetTranslationIdOk returns a tuple with the TranslationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetTranslationIdOk() (*string, bool) {
	if o == nil || o.TranslationId == nil {
		return nil, false
	}
	return o.TranslationId, true
}

// HasTranslationId returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasTranslationId() bool {
	if o != nil && o.TranslationId != nil {
		return true
	}

	return false
}

// SetTranslationId gets a reference to the given string and assigns it to the TranslationId field.
func (o *BTDocumentElementProcessingInfo) SetTranslationId(v string) {
	o.TranslationId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BTDocumentElementProcessingInfo) SetType(v string) {
	o.Type = &v
}

// GetUnupdatable returns the Unupdatable field value if set, zero value otherwise.
func (o *BTDocumentElementProcessingInfo) GetUnupdatable() bool {
	if o == nil || o.Unupdatable == nil {
		var ret bool
		return ret
	}
	return *o.Unupdatable
}

// GetUnupdatableOk returns a tuple with the Unupdatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentElementProcessingInfo) GetUnupdatableOk() (*bool, bool) {
	if o == nil || o.Unupdatable == nil {
		return nil, false
	}
	return o.Unupdatable, true
}

// HasUnupdatable returns a boolean if a field has been set.
func (o *BTDocumentElementProcessingInfo) HasUnupdatable() bool {
	if o != nil && o.Unupdatable != nil {
		return true
	}

	return false
}

// SetUnupdatable gets a reference to the given bool and assigns it to the Unupdatable field.
func (o *BTDocumentElementProcessingInfo) SetUnupdatable(v bool) {
	o.Unupdatable = &v
}

func (o BTDocumentElementProcessingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AngleUnits != nil {
		toSerialize["angleUnits"] = o.AngleUnits
	}
	if o.DataType != nil {
		toSerialize["dataType"] = o.DataType
	}
	if o.ElementType != nil {
		toSerialize["elementType"] = o.ElementType
	}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.ForeignDataId != nil {
		toSerialize["foreignDataId"] = o.ForeignDataId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LengthUnits != nil {
		toSerialize["lengthUnits"] = o.LengthUnits
	}
	if o.MassUnits != nil {
		toSerialize["massUnits"] = o.MassUnits
	}
	if o.MicroversionId != nil {
		toSerialize["microversionId"] = o.MicroversionId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SpecifiedUnit != nil {
		toSerialize["specifiedUnit"] = o.SpecifiedUnit
	}
	if o.ThumbnailInfo != nil {
		toSerialize["thumbnailInfo"] = o.ThumbnailInfo
	}
	if o.Thumbnails != nil {
		toSerialize["thumbnails"] = o.Thumbnails
	}
	if o.TranslationEventKey != nil {
		toSerialize["translationEventKey"] = o.TranslationEventKey
	}
	if o.TranslationId != nil {
		toSerialize["translationId"] = o.TranslationId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Unupdatable != nil {
		toSerialize["unupdatable"] = o.Unupdatable
	}
	return json.Marshal(toSerialize)
}

type NullableBTDocumentElementProcessingInfo struct {
	value *BTDocumentElementProcessingInfo
	isSet bool
}

func (v NullableBTDocumentElementProcessingInfo) Get() *BTDocumentElementProcessingInfo {
	return v.value
}

func (v *NullableBTDocumentElementProcessingInfo) Set(val *BTDocumentElementProcessingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDocumentElementProcessingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDocumentElementProcessingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDocumentElementProcessingInfo(val *BTDocumentElementProcessingInfo) *NullableBTDocumentElementProcessingInfo {
	return &NullableBTDocumentElementProcessingInfo{value: val, isSet: true}
}

func (v NullableBTDocumentElementProcessingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDocumentElementProcessingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
