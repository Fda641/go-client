/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTVersionInfoAllOf struct for BTVersionInfoAllOf
type BTVersionInfoAllOf struct {
	Purpose *int32 `json:"purpose,omitempty"`
}

// NewBTVersionInfoAllOf instantiates a new BTVersionInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTVersionInfoAllOf() *BTVersionInfoAllOf {
	this := BTVersionInfoAllOf{}
	return &this
}

// NewBTVersionInfoAllOfWithDefaults instantiates a new BTVersionInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTVersionInfoAllOfWithDefaults() *BTVersionInfoAllOf {
	this := BTVersionInfoAllOf{}
	return &this
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *BTVersionInfoAllOf) GetPurpose() int32 {
	if o == nil || o.Purpose == nil {
		var ret int32
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoAllOf) GetPurposeOk() (*int32, bool) {
	if o == nil || o.Purpose == nil {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *BTVersionInfoAllOf) HasPurpose() bool {
	if o != nil && o.Purpose != nil {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given int32 and assigns it to the Purpose field.
func (o *BTVersionInfoAllOf) SetPurpose(v int32) {
	o.Purpose = &v
}

func (o BTVersionInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Purpose != nil {
		toSerialize["purpose"] = o.Purpose
	}
	return json.Marshal(toSerialize)
}

type NullableBTVersionInfoAllOf struct {
	value *BTVersionInfoAllOf
	isSet bool
}

func (v NullableBTVersionInfoAllOf) Get() *BTVersionInfoAllOf {
	return v.value
}

func (v *NullableBTVersionInfoAllOf) Set(val *BTVersionInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTVersionInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTVersionInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTVersionInfoAllOf(val *BTVersionInfoAllOf) *NullableBTVersionInfoAllOf {
	return &NullableBTVersionInfoAllOf{value: val, isSet: true}
}

func (v NullableBTVersionInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTVersionInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
