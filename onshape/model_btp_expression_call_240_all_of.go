/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionCall240AllOf struct for BTPExpressionCall240AllOf
type BTPExpressionCall240AllOf struct {
	BtType *string `json:"btType,omitempty"`
	FunctionExpression *BTPExpression9 `json:"functionExpression,omitempty"`
	FunctionName *BTPName261 `json:"functionName,omitempty"`
	FunctionNameString *string `json:"functionNameString,omitempty"`
	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
}

// NewBTPExpressionCall240AllOf instantiates a new BTPExpressionCall240AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionCall240AllOf() *BTPExpressionCall240AllOf {
	this := BTPExpressionCall240AllOf{}
	return &this
}

// NewBTPExpressionCall240AllOfWithDefaults instantiates a new BTPExpressionCall240AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionCall240AllOfWithDefaults() *BTPExpressionCall240AllOf {
	this := BTPExpressionCall240AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionCall240AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionCall240AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionCall240AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionCall240AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetFunctionExpression returns the FunctionExpression field value if set, zero value otherwise.
func (o *BTPExpressionCall240AllOf) GetFunctionExpression() BTPExpression9 {
	if o == nil || o.FunctionExpression == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.FunctionExpression
}

// GetFunctionExpressionOk returns a tuple with the FunctionExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionCall240AllOf) GetFunctionExpressionOk() (*BTPExpression9, bool) {
	if o == nil || o.FunctionExpression == nil {
		return nil, false
	}
	return o.FunctionExpression, true
}

// HasFunctionExpression returns a boolean if a field has been set.
func (o *BTPExpressionCall240AllOf) HasFunctionExpression() bool {
	if o != nil && o.FunctionExpression != nil {
		return true
	}

	return false
}

// SetFunctionExpression gets a reference to the given BTPExpression9 and assigns it to the FunctionExpression field.
func (o *BTPExpressionCall240AllOf) SetFunctionExpression(v BTPExpression9) {
	o.FunctionExpression = &v
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *BTPExpressionCall240AllOf) GetFunctionName() BTPName261 {
	if o == nil || o.FunctionName == nil {
		var ret BTPName261
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionCall240AllOf) GetFunctionNameOk() (*BTPName261, bool) {
	if o == nil || o.FunctionName == nil {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *BTPExpressionCall240AllOf) HasFunctionName() bool {
	if o != nil && o.FunctionName != nil {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given BTPName261 and assigns it to the FunctionName field.
func (o *BTPExpressionCall240AllOf) SetFunctionName(v BTPName261) {
	o.FunctionName = &v
}

// GetFunctionNameString returns the FunctionNameString field value if set, zero value otherwise.
func (o *BTPExpressionCall240AllOf) GetFunctionNameString() string {
	if o == nil || o.FunctionNameString == nil {
		var ret string
		return ret
	}
	return *o.FunctionNameString
}

// GetFunctionNameStringOk returns a tuple with the FunctionNameString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionCall240AllOf) GetFunctionNameStringOk() (*string, bool) {
	if o == nil || o.FunctionNameString == nil {
		return nil, false
	}
	return o.FunctionNameString, true
}

// HasFunctionNameString returns a boolean if a field has been set.
func (o *BTPExpressionCall240AllOf) HasFunctionNameString() bool {
	if o != nil && o.FunctionNameString != nil {
		return true
	}

	return false
}

// SetFunctionNameString gets a reference to the given string and assigns it to the FunctionNameString field.
func (o *BTPExpressionCall240AllOf) SetFunctionNameString(v string) {
	o.FunctionNameString = &v
}

// GetSpaceInEmptyList returns the SpaceInEmptyList field value if set, zero value otherwise.
func (o *BTPExpressionCall240AllOf) GetSpaceInEmptyList() BTPSpace10 {
	if o == nil || o.SpaceInEmptyList == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceInEmptyList
}

// GetSpaceInEmptyListOk returns a tuple with the SpaceInEmptyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionCall240AllOf) GetSpaceInEmptyListOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceInEmptyList == nil {
		return nil, false
	}
	return o.SpaceInEmptyList, true
}

// HasSpaceInEmptyList returns a boolean if a field has been set.
func (o *BTPExpressionCall240AllOf) HasSpaceInEmptyList() bool {
	if o != nil && o.SpaceInEmptyList != nil {
		return true
	}

	return false
}

// SetSpaceInEmptyList gets a reference to the given BTPSpace10 and assigns it to the SpaceInEmptyList field.
func (o *BTPExpressionCall240AllOf) SetSpaceInEmptyList(v BTPSpace10) {
	o.SpaceInEmptyList = &v
}

func (o BTPExpressionCall240AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.FunctionExpression != nil {
		toSerialize["functionExpression"] = o.FunctionExpression
	}
	if o.FunctionName != nil {
		toSerialize["functionName"] = o.FunctionName
	}
	if o.FunctionNameString != nil {
		toSerialize["functionNameString"] = o.FunctionNameString
	}
	if o.SpaceInEmptyList != nil {
		toSerialize["spaceInEmptyList"] = o.SpaceInEmptyList
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionCall240AllOf struct {
	value *BTPExpressionCall240AllOf
	isSet bool
}

func (v NullableBTPExpressionCall240AllOf) Get() *BTPExpressionCall240AllOf {
	return v.value
}

func (v *NullableBTPExpressionCall240AllOf) Set(val *BTPExpressionCall240AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionCall240AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionCall240AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionCall240AllOf(val *BTPExpressionCall240AllOf) *NullableBTPExpressionCall240AllOf {
	return &NullableBTPExpressionCall240AllOf{value: val, isSet: true}
}

func (v NullableBTPExpressionCall240AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionCall240AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
