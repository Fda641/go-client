/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementLoopForIn279 struct for BTPStatementLoopForIn279
type BTPStatementLoopForIn279 struct {
	BTPStatementLoop277
	BtType *string `json:"btType,omitempty"`
	Container *BTPExpression9 `json:"container,omitempty"`
	IsVarDeclaredHere *bool `json:"isVarDeclaredHere,omitempty"`
	Name *BTPIdentifier8 `json:"name,omitempty"`
	SpaceBeforeVar *BTPSpace10 `json:"spaceBeforeVar,omitempty"`
	StandardType *string `json:"standardType,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
	Var *BTPIdentifier8 `json:"var,omitempty"`
}

// NewBTPStatementLoopForIn279 instantiates a new BTPStatementLoopForIn279 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementLoopForIn279() *BTPStatementLoopForIn279 {
	this := BTPStatementLoopForIn279{}
	return &this
}

// NewBTPStatementLoopForIn279WithDefaults instantiates a new BTPStatementLoopForIn279 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementLoopForIn279WithDefaults() *BTPStatementLoopForIn279 {
	this := BTPStatementLoopForIn279{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementLoopForIn279) SetBtType(v string) {
	o.BtType = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetContainer() BTPExpression9 {
	if o == nil || o.Container == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetContainerOk() (*BTPExpression9, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given BTPExpression9 and assigns it to the Container field.
func (o *BTPStatementLoopForIn279) SetContainer(v BTPExpression9) {
	o.Container = &v
}

// GetIsVarDeclaredHere returns the IsVarDeclaredHere field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetIsVarDeclaredHere() bool {
	if o == nil || o.IsVarDeclaredHere == nil {
		var ret bool
		return ret
	}
	return *o.IsVarDeclaredHere
}

// GetIsVarDeclaredHereOk returns a tuple with the IsVarDeclaredHere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetIsVarDeclaredHereOk() (*bool, bool) {
	if o == nil || o.IsVarDeclaredHere == nil {
		return nil, false
	}
	return o.IsVarDeclaredHere, true
}

// HasIsVarDeclaredHere returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasIsVarDeclaredHere() bool {
	if o != nil && o.IsVarDeclaredHere != nil {
		return true
	}

	return false
}

// SetIsVarDeclaredHere gets a reference to the given bool and assigns it to the IsVarDeclaredHere field.
func (o *BTPStatementLoopForIn279) SetIsVarDeclaredHere(v bool) {
	o.IsVarDeclaredHere = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetName() BTPIdentifier8 {
	if o == nil || o.Name == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetNameOk() (*BTPIdentifier8, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given BTPIdentifier8 and assigns it to the Name field.
func (o *BTPStatementLoopForIn279) SetName(v BTPIdentifier8) {
	o.Name = &v
}

// GetSpaceBeforeVar returns the SpaceBeforeVar field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetSpaceBeforeVar() BTPSpace10 {
	if o == nil || o.SpaceBeforeVar == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBeforeVar
}

// GetSpaceBeforeVarOk returns a tuple with the SpaceBeforeVar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetSpaceBeforeVarOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBeforeVar == nil {
		return nil, false
	}
	return o.SpaceBeforeVar, true
}

// HasSpaceBeforeVar returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasSpaceBeforeVar() bool {
	if o != nil && o.SpaceBeforeVar != nil {
		return true
	}

	return false
}

// SetSpaceBeforeVar gets a reference to the given BTPSpace10 and assigns it to the SpaceBeforeVar field.
func (o *BTPStatementLoopForIn279) SetSpaceBeforeVar(v BTPSpace10) {
	o.SpaceBeforeVar = &v
}

// GetStandardType returns the StandardType field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetStandardType() string {
	if o == nil || o.StandardType == nil {
		var ret string
		return ret
	}
	return *o.StandardType
}

// GetStandardTypeOk returns a tuple with the StandardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetStandardTypeOk() (*string, bool) {
	if o == nil || o.StandardType == nil {
		return nil, false
	}
	return o.StandardType, true
}

// HasStandardType returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasStandardType() bool {
	if o != nil && o.StandardType != nil {
		return true
	}

	return false
}

// SetStandardType gets a reference to the given string and assigns it to the StandardType field.
func (o *BTPStatementLoopForIn279) SetStandardType(v string) {
	o.StandardType = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *BTPStatementLoopForIn279) SetTypeName(v string) {
	o.TypeName = &v
}

// GetVar returns the Var field value if set, zero value otherwise.
func (o *BTPStatementLoopForIn279) GetVar() BTPIdentifier8 {
	if o == nil || o.Var == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.Var
}

// GetVarOk returns a tuple with the Var field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopForIn279) GetVarOk() (*BTPIdentifier8, bool) {
	if o == nil || o.Var == nil {
		return nil, false
	}
	return o.Var, true
}

// HasVar returns a boolean if a field has been set.
func (o *BTPStatementLoopForIn279) HasVar() bool {
	if o != nil && o.Var != nil {
		return true
	}

	return false
}

// SetVar gets a reference to the given BTPIdentifier8 and assigns it to the Var field.
func (o *BTPStatementLoopForIn279) SetVar(v BTPIdentifier8) {
	o.Var = &v
}

func (o BTPStatementLoopForIn279) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatementLoop277, errBTPStatementLoop277 := json.Marshal(o.BTPStatementLoop277)
	if errBTPStatementLoop277 != nil {
		return []byte{}, errBTPStatementLoop277
	}
	errBTPStatementLoop277 = json.Unmarshal([]byte(serializedBTPStatementLoop277), &toSerialize)
	if errBTPStatementLoop277 != nil {
		return []byte{}, errBTPStatementLoop277
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.IsVarDeclaredHere != nil {
		toSerialize["isVarDeclaredHere"] = o.IsVarDeclaredHere
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SpaceBeforeVar != nil {
		toSerialize["spaceBeforeVar"] = o.SpaceBeforeVar
	}
	if o.StandardType != nil {
		toSerialize["standardType"] = o.StandardType
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Var != nil {
		toSerialize["var"] = o.Var
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementLoopForIn279 struct {
	value *BTPStatementLoopForIn279
	isSet bool
}

func (v NullableBTPStatementLoopForIn279) Get() *BTPStatementLoopForIn279 {
	return v.value
}

func (v *NullableBTPStatementLoopForIn279) Set(val *BTPStatementLoopForIn279) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementLoopForIn279) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementLoopForIn279) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementLoopForIn279(val *BTPStatementLoopForIn279) *NullableBTPStatementLoopForIn279 {
	return &NullableBTPStatementLoopForIn279{value: val, isSet: true}
}

func (v NullableBTPStatementLoopForIn279) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementLoopForIn279) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
