/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMParameterMaterial1388 struct for BTMParameterMaterial1388
type BTMParameterMaterial1388 struct {
	BTMParameter1
	BtType *string `json:"btType,omitempty"`
	Material *BTPartMaterial1445 `json:"material,omitempty"`
}

// NewBTMParameterMaterial1388 instantiates a new BTMParameterMaterial1388 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMParameterMaterial1388() *BTMParameterMaterial1388 {
	this := BTMParameterMaterial1388{}
	return &this
}

// NewBTMParameterMaterial1388WithDefaults instantiates a new BTMParameterMaterial1388 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMParameterMaterial1388WithDefaults() *BTMParameterMaterial1388 {
	this := BTMParameterMaterial1388{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMParameterMaterial1388) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterMaterial1388) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMParameterMaterial1388) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMParameterMaterial1388) SetBtType(v string) {
	o.BtType = &v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *BTMParameterMaterial1388) GetMaterial() BTPartMaterial1445 {
	if o == nil || o.Material == nil {
		var ret BTPartMaterial1445
		return ret
	}
	return *o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterMaterial1388) GetMaterialOk() (*BTPartMaterial1445, bool) {
	if o == nil || o.Material == nil {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *BTMParameterMaterial1388) HasMaterial() bool {
	if o != nil && o.Material != nil {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given BTPartMaterial1445 and assigns it to the Material field.
func (o *BTMParameterMaterial1388) SetMaterial(v BTPartMaterial1445) {
	o.Material = &v
}

func (o BTMParameterMaterial1388) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Material != nil {
		toSerialize["material"] = o.Material
	}
	return json.Marshal(toSerialize)
}

type NullableBTMParameterMaterial1388 struct {
	value *BTMParameterMaterial1388
	isSet bool
}

func (v NullableBTMParameterMaterial1388) Get() *BTMParameterMaterial1388 {
	return v.value
}

func (v *NullableBTMParameterMaterial1388) Set(val *BTMParameterMaterial1388) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMParameterMaterial1388) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMParameterMaterial1388) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMParameterMaterial1388(val *BTMParameterMaterial1388) *NullableBTMParameterMaterial1388 {
	return &NullableBTMParameterMaterial1388{value: val, isSet: true}
}

func (v NullableBTMParameterMaterial1388) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMParameterMaterial1388) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
