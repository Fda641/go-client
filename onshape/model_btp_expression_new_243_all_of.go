/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionNew243AllOf struct for BTPExpressionNew243AllOf
type BTPExpressionNew243AllOf struct {
	BtType *string `json:"btType,omitempty"`
	SpaceAfterBox *BTPSpace10 `json:"spaceAfterBox,omitempty"`
	SpaceBetweenNewBox *BTPSpace10 `json:"spaceBetweenNewBox,omitempty"`
	Value *BTPExpression9 `json:"value,omitempty"`
}

// NewBTPExpressionNew243AllOf instantiates a new BTPExpressionNew243AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionNew243AllOf() *BTPExpressionNew243AllOf {
	this := BTPExpressionNew243AllOf{}
	return &this
}

// NewBTPExpressionNew243AllOfWithDefaults instantiates a new BTPExpressionNew243AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionNew243AllOfWithDefaults() *BTPExpressionNew243AllOf {
	this := BTPExpressionNew243AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionNew243AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionNew243AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionNew243AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionNew243AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceAfterBox returns the SpaceAfterBox field value if set, zero value otherwise.
func (o *BTPExpressionNew243AllOf) GetSpaceAfterBox() BTPSpace10 {
	if o == nil || o.SpaceAfterBox == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterBox
}

// GetSpaceAfterBoxOk returns a tuple with the SpaceAfterBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionNew243AllOf) GetSpaceAfterBoxOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterBox == nil {
		return nil, false
	}
	return o.SpaceAfterBox, true
}

// HasSpaceAfterBox returns a boolean if a field has been set.
func (o *BTPExpressionNew243AllOf) HasSpaceAfterBox() bool {
	if o != nil && o.SpaceAfterBox != nil {
		return true
	}

	return false
}

// SetSpaceAfterBox gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterBox field.
func (o *BTPExpressionNew243AllOf) SetSpaceAfterBox(v BTPSpace10) {
	o.SpaceAfterBox = &v
}

// GetSpaceBetweenNewBox returns the SpaceBetweenNewBox field value if set, zero value otherwise.
func (o *BTPExpressionNew243AllOf) GetSpaceBetweenNewBox() BTPSpace10 {
	if o == nil || o.SpaceBetweenNewBox == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBetweenNewBox
}

// GetSpaceBetweenNewBoxOk returns a tuple with the SpaceBetweenNewBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionNew243AllOf) GetSpaceBetweenNewBoxOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBetweenNewBox == nil {
		return nil, false
	}
	return o.SpaceBetweenNewBox, true
}

// HasSpaceBetweenNewBox returns a boolean if a field has been set.
func (o *BTPExpressionNew243AllOf) HasSpaceBetweenNewBox() bool {
	if o != nil && o.SpaceBetweenNewBox != nil {
		return true
	}

	return false
}

// SetSpaceBetweenNewBox gets a reference to the given BTPSpace10 and assigns it to the SpaceBetweenNewBox field.
func (o *BTPExpressionNew243AllOf) SetSpaceBetweenNewBox(v BTPSpace10) {
	o.SpaceBetweenNewBox = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTPExpressionNew243AllOf) GetValue() BTPExpression9 {
	if o == nil || o.Value == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionNew243AllOf) GetValueOk() (*BTPExpression9, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTPExpressionNew243AllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given BTPExpression9 and assigns it to the Value field.
func (o *BTPExpressionNew243AllOf) SetValue(v BTPExpression9) {
	o.Value = &v
}

func (o BTPExpressionNew243AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceAfterBox != nil {
		toSerialize["spaceAfterBox"] = o.SpaceAfterBox
	}
	if o.SpaceBetweenNewBox != nil {
		toSerialize["spaceBetweenNewBox"] = o.SpaceBetweenNewBox
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionNew243AllOf struct {
	value *BTPExpressionNew243AllOf
	isSet bool
}

func (v NullableBTPExpressionNew243AllOf) Get() *BTPExpressionNew243AllOf {
	return v.value
}

func (v *NullableBTPExpressionNew243AllOf) Set(val *BTPExpressionNew243AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionNew243AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionNew243AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionNew243AllOf(val *BTPExpressionNew243AllOf) *NullableBTPExpressionNew243AllOf {
	return &NullableBTPExpressionNew243AllOf{value: val, isSet: true}
}

func (v NullableBTPExpressionNew243AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionNew243AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
