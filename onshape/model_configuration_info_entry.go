/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// ConfigurationInfoEntry struct for ConfigurationInfoEntry
type ConfigurationInfoEntry struct {
	Explicit *bool `json:"explicit,omitempty"`
	ParameterDisplayValue *string `json:"parameterDisplayValue,omitempty"`
	ParameterId *string `json:"parameterId,omitempty"`
	ParameterName *string `json:"parameterName,omitempty"`
	ParameterValue *string `json:"parameterValue,omitempty"`
}

// NewConfigurationInfoEntry instantiates a new ConfigurationInfoEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationInfoEntry() *ConfigurationInfoEntry {
	this := ConfigurationInfoEntry{}
	return &this
}

// NewConfigurationInfoEntryWithDefaults instantiates a new ConfigurationInfoEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationInfoEntryWithDefaults() *ConfigurationInfoEntry {
	this := ConfigurationInfoEntry{}
	return &this
}

// GetExplicit returns the Explicit field value if set, zero value otherwise.
func (o *ConfigurationInfoEntry) GetExplicit() bool {
	if o == nil || o.Explicit == nil {
		var ret bool
		return ret
	}
	return *o.Explicit
}

// GetExplicitOk returns a tuple with the Explicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationInfoEntry) GetExplicitOk() (*bool, bool) {
	if o == nil || o.Explicit == nil {
		return nil, false
	}
	return o.Explicit, true
}

// HasExplicit returns a boolean if a field has been set.
func (o *ConfigurationInfoEntry) HasExplicit() bool {
	if o != nil && o.Explicit != nil {
		return true
	}

	return false
}

// SetExplicit gets a reference to the given bool and assigns it to the Explicit field.
func (o *ConfigurationInfoEntry) SetExplicit(v bool) {
	o.Explicit = &v
}

// GetParameterDisplayValue returns the ParameterDisplayValue field value if set, zero value otherwise.
func (o *ConfigurationInfoEntry) GetParameterDisplayValue() string {
	if o == nil || o.ParameterDisplayValue == nil {
		var ret string
		return ret
	}
	return *o.ParameterDisplayValue
}

// GetParameterDisplayValueOk returns a tuple with the ParameterDisplayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationInfoEntry) GetParameterDisplayValueOk() (*string, bool) {
	if o == nil || o.ParameterDisplayValue == nil {
		return nil, false
	}
	return o.ParameterDisplayValue, true
}

// HasParameterDisplayValue returns a boolean if a field has been set.
func (o *ConfigurationInfoEntry) HasParameterDisplayValue() bool {
	if o != nil && o.ParameterDisplayValue != nil {
		return true
	}

	return false
}

// SetParameterDisplayValue gets a reference to the given string and assigns it to the ParameterDisplayValue field.
func (o *ConfigurationInfoEntry) SetParameterDisplayValue(v string) {
	o.ParameterDisplayValue = &v
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *ConfigurationInfoEntry) GetParameterId() string {
	if o == nil || o.ParameterId == nil {
		var ret string
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationInfoEntry) GetParameterIdOk() (*string, bool) {
	if o == nil || o.ParameterId == nil {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *ConfigurationInfoEntry) HasParameterId() bool {
	if o != nil && o.ParameterId != nil {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *ConfigurationInfoEntry) SetParameterId(v string) {
	o.ParameterId = &v
}

// GetParameterName returns the ParameterName field value if set, zero value otherwise.
func (o *ConfigurationInfoEntry) GetParameterName() string {
	if o == nil || o.ParameterName == nil {
		var ret string
		return ret
	}
	return *o.ParameterName
}

// GetParameterNameOk returns a tuple with the ParameterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationInfoEntry) GetParameterNameOk() (*string, bool) {
	if o == nil || o.ParameterName == nil {
		return nil, false
	}
	return o.ParameterName, true
}

// HasParameterName returns a boolean if a field has been set.
func (o *ConfigurationInfoEntry) HasParameterName() bool {
	if o != nil && o.ParameterName != nil {
		return true
	}

	return false
}

// SetParameterName gets a reference to the given string and assigns it to the ParameterName field.
func (o *ConfigurationInfoEntry) SetParameterName(v string) {
	o.ParameterName = &v
}

// GetParameterValue returns the ParameterValue field value if set, zero value otherwise.
func (o *ConfigurationInfoEntry) GetParameterValue() string {
	if o == nil || o.ParameterValue == nil {
		var ret string
		return ret
	}
	return *o.ParameterValue
}

// GetParameterValueOk returns a tuple with the ParameterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationInfoEntry) GetParameterValueOk() (*string, bool) {
	if o == nil || o.ParameterValue == nil {
		return nil, false
	}
	return o.ParameterValue, true
}

// HasParameterValue returns a boolean if a field has been set.
func (o *ConfigurationInfoEntry) HasParameterValue() bool {
	if o != nil && o.ParameterValue != nil {
		return true
	}

	return false
}

// SetParameterValue gets a reference to the given string and assigns it to the ParameterValue field.
func (o *ConfigurationInfoEntry) SetParameterValue(v string) {
	o.ParameterValue = &v
}

func (o ConfigurationInfoEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Explicit != nil {
		toSerialize["explicit"] = o.Explicit
	}
	if o.ParameterDisplayValue != nil {
		toSerialize["parameterDisplayValue"] = o.ParameterDisplayValue
	}
	if o.ParameterId != nil {
		toSerialize["parameterId"] = o.ParameterId
	}
	if o.ParameterName != nil {
		toSerialize["parameterName"] = o.ParameterName
	}
	if o.ParameterValue != nil {
		toSerialize["parameterValue"] = o.ParameterValue
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationInfoEntry struct {
	value *ConfigurationInfoEntry
	isSet bool
}

func (v NullableConfigurationInfoEntry) Get() *ConfigurationInfoEntry {
	return v.value
}

func (v *NullableConfigurationInfoEntry) Set(val *ConfigurationInfoEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationInfoEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationInfoEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationInfoEntry(val *ConfigurationInfoEntry) *NullableConfigurationInfoEntry {
	return &NullableConfigurationInfoEntry{value: val, isSet: true}
}

func (v NullableConfigurationInfoEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationInfoEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
