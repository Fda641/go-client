/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionSwitch2632AllOf struct for BTPExpressionSwitch2632AllOf
type BTPExpressionSwitch2632AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Choices *BTPLiteralMap256 `json:"choices,omitempty"`
	Selector *BTPExpression9 `json:"selector,omitempty"`
	SpaceAfterSwitch *BTPSpace10 `json:"spaceAfterSwitch,omitempty"`
}

// NewBTPExpressionSwitch2632AllOf instantiates a new BTPExpressionSwitch2632AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionSwitch2632AllOf() *BTPExpressionSwitch2632AllOf {
	this := BTPExpressionSwitch2632AllOf{}
	return &this
}

// NewBTPExpressionSwitch2632AllOfWithDefaults instantiates a new BTPExpressionSwitch2632AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionSwitch2632AllOfWithDefaults() *BTPExpressionSwitch2632AllOf {
	this := BTPExpressionSwitch2632AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionSwitch2632AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionSwitch2632AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionSwitch2632AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionSwitch2632AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetChoices returns the Choices field value if set, zero value otherwise.
func (o *BTPExpressionSwitch2632AllOf) GetChoices() BTPLiteralMap256 {
	if o == nil || o.Choices == nil {
		var ret BTPLiteralMap256
		return ret
	}
	return *o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionSwitch2632AllOf) GetChoicesOk() (*BTPLiteralMap256, bool) {
	if o == nil || o.Choices == nil {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *BTPExpressionSwitch2632AllOf) HasChoices() bool {
	if o != nil && o.Choices != nil {
		return true
	}

	return false
}

// SetChoices gets a reference to the given BTPLiteralMap256 and assigns it to the Choices field.
func (o *BTPExpressionSwitch2632AllOf) SetChoices(v BTPLiteralMap256) {
	o.Choices = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *BTPExpressionSwitch2632AllOf) GetSelector() BTPExpression9 {
	if o == nil || o.Selector == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionSwitch2632AllOf) GetSelectorOk() (*BTPExpression9, bool) {
	if o == nil || o.Selector == nil {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *BTPExpressionSwitch2632AllOf) HasSelector() bool {
	if o != nil && o.Selector != nil {
		return true
	}

	return false
}

// SetSelector gets a reference to the given BTPExpression9 and assigns it to the Selector field.
func (o *BTPExpressionSwitch2632AllOf) SetSelector(v BTPExpression9) {
	o.Selector = &v
}

// GetSpaceAfterSwitch returns the SpaceAfterSwitch field value if set, zero value otherwise.
func (o *BTPExpressionSwitch2632AllOf) GetSpaceAfterSwitch() BTPSpace10 {
	if o == nil || o.SpaceAfterSwitch == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterSwitch
}

// GetSpaceAfterSwitchOk returns a tuple with the SpaceAfterSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionSwitch2632AllOf) GetSpaceAfterSwitchOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterSwitch == nil {
		return nil, false
	}
	return o.SpaceAfterSwitch, true
}

// HasSpaceAfterSwitch returns a boolean if a field has been set.
func (o *BTPExpressionSwitch2632AllOf) HasSpaceAfterSwitch() bool {
	if o != nil && o.SpaceAfterSwitch != nil {
		return true
	}

	return false
}

// SetSpaceAfterSwitch gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterSwitch field.
func (o *BTPExpressionSwitch2632AllOf) SetSpaceAfterSwitch(v BTPSpace10) {
	o.SpaceAfterSwitch = &v
}

func (o BTPExpressionSwitch2632AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Choices != nil {
		toSerialize["choices"] = o.Choices
	}
	if o.Selector != nil {
		toSerialize["selector"] = o.Selector
	}
	if o.SpaceAfterSwitch != nil {
		toSerialize["spaceAfterSwitch"] = o.SpaceAfterSwitch
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionSwitch2632AllOf struct {
	value *BTPExpressionSwitch2632AllOf
	isSet bool
}

func (v NullableBTPExpressionSwitch2632AllOf) Get() *BTPExpressionSwitch2632AllOf {
	return v.value
}

func (v *NullableBTPExpressionSwitch2632AllOf) Set(val *BTPExpressionSwitch2632AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionSwitch2632AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionSwitch2632AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionSwitch2632AllOf(val *BTPExpressionSwitch2632AllOf) *NullableBTPExpressionSwitch2632AllOf {
	return &NullableBTPExpressionSwitch2632AllOf{value: val, isSet: true}
}

func (v NullableBTPExpressionSwitch2632AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionSwitch2632AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
