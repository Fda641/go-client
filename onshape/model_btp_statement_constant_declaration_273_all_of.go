/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementConstantDeclaration273AllOf struct for BTPStatementConstantDeclaration273AllOf
type BTPStatementConstantDeclaration273AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Name *BTPIdentifier8 `json:"name,omitempty"`
	StandardType *string `json:"standardType,omitempty"`
	Type *BTPTypeName290 `json:"type,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
	Value *BTPExpression9 `json:"value,omitempty"`
}

// NewBTPStatementConstantDeclaration273AllOf instantiates a new BTPStatementConstantDeclaration273AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementConstantDeclaration273AllOf() *BTPStatementConstantDeclaration273AllOf {
	this := BTPStatementConstantDeclaration273AllOf{}
	return &this
}

// NewBTPStatementConstantDeclaration273AllOfWithDefaults instantiates a new BTPStatementConstantDeclaration273AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementConstantDeclaration273AllOfWithDefaults() *BTPStatementConstantDeclaration273AllOf {
	this := BTPStatementConstantDeclaration273AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementConstantDeclaration273AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetName() BTPIdentifier8 {
	if o == nil || o.Name == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetNameOk() (*BTPIdentifier8, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given BTPIdentifier8 and assigns it to the Name field.
func (o *BTPStatementConstantDeclaration273AllOf) SetName(v BTPIdentifier8) {
	o.Name = &v
}

// GetStandardType returns the StandardType field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetStandardType() string {
	if o == nil || o.StandardType == nil {
		var ret string
		return ret
	}
	return *o.StandardType
}

// GetStandardTypeOk returns a tuple with the StandardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetStandardTypeOk() (*string, bool) {
	if o == nil || o.StandardType == nil {
		return nil, false
	}
	return o.StandardType, true
}

// HasStandardType returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasStandardType() bool {
	if o != nil && o.StandardType != nil {
		return true
	}

	return false
}

// SetStandardType gets a reference to the given string and assigns it to the StandardType field.
func (o *BTPStatementConstantDeclaration273AllOf) SetStandardType(v string) {
	o.StandardType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetType() BTPTypeName290 {
	if o == nil || o.Type == nil {
		var ret BTPTypeName290
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetTypeOk() (*BTPTypeName290, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given BTPTypeName290 and assigns it to the Type field.
func (o *BTPStatementConstantDeclaration273AllOf) SetType(v BTPTypeName290) {
	o.Type = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *BTPStatementConstantDeclaration273AllOf) SetTypeName(v string) {
	o.TypeName = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTPStatementConstantDeclaration273AllOf) GetValue() BTPExpression9 {
	if o == nil || o.Value == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementConstantDeclaration273AllOf) GetValueOk() (*BTPExpression9, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTPStatementConstantDeclaration273AllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given BTPExpression9 and assigns it to the Value field.
func (o *BTPStatementConstantDeclaration273AllOf) SetValue(v BTPExpression9) {
	o.Value = &v
}

func (o BTPStatementConstantDeclaration273AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.StandardType != nil {
		toSerialize["standardType"] = o.StandardType
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementConstantDeclaration273AllOf struct {
	value *BTPStatementConstantDeclaration273AllOf
	isSet bool
}

func (v NullableBTPStatementConstantDeclaration273AllOf) Get() *BTPStatementConstantDeclaration273AllOf {
	return v.value
}

func (v *NullableBTPStatementConstantDeclaration273AllOf) Set(val *BTPStatementConstantDeclaration273AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementConstantDeclaration273AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementConstantDeclaration273AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementConstantDeclaration273AllOf(val *BTPStatementConstantDeclaration273AllOf) *NullableBTPStatementConstantDeclaration273AllOf {
	return &NullableBTPStatementConstantDeclaration273AllOf{value: val, isSet: true}
}

func (v NullableBTPStatementConstantDeclaration273AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementConstantDeclaration273AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
