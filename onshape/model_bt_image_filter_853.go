/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTImageFilter853 struct for BTImageFilter853
type BTImageFilter853 struct {
	BTQueryFilter183
	BtType *string `json:"btType,omitempty"`
	IsImage *bool `json:"isImage,omitempty"`
}

// NewBTImageFilter853 instantiates a new BTImageFilter853 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTImageFilter853() *BTImageFilter853 {
	this := BTImageFilter853{}
	return &this
}

// NewBTImageFilter853WithDefaults instantiates a new BTImageFilter853 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTImageFilter853WithDefaults() *BTImageFilter853 {
	this := BTImageFilter853{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTImageFilter853) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTImageFilter853) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTImageFilter853) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTImageFilter853) SetBtType(v string) {
	o.BtType = &v
}

// GetIsImage returns the IsImage field value if set, zero value otherwise.
func (o *BTImageFilter853) GetIsImage() bool {
	if o == nil || o.IsImage == nil {
		var ret bool
		return ret
	}
	return *o.IsImage
}

// GetIsImageOk returns a tuple with the IsImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTImageFilter853) GetIsImageOk() (*bool, bool) {
	if o == nil || o.IsImage == nil {
		return nil, false
	}
	return o.IsImage, true
}

// HasIsImage returns a boolean if a field has been set.
func (o *BTImageFilter853) HasIsImage() bool {
	if o != nil && o.IsImage != nil {
		return true
	}

	return false
}

// SetIsImage gets a reference to the given bool and assigns it to the IsImage field.
func (o *BTImageFilter853) SetIsImage(v bool) {
	o.IsImage = &v
}

func (o BTImageFilter853) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
	if errBTQueryFilter183 != nil {
		return []byte{}, errBTQueryFilter183
	}
	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
	if errBTQueryFilter183 != nil {
		return []byte{}, errBTQueryFilter183
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.IsImage != nil {
		toSerialize["isImage"] = o.IsImage
	}
	return json.Marshal(toSerialize)
}

type NullableBTImageFilter853 struct {
	value *BTImageFilter853
	isSet bool
}

func (v NullableBTImageFilter853) Get() *BTImageFilter853 {
	return v.value
}

func (v *NullableBTImageFilter853) Set(val *BTImageFilter853) {
	v.value = val
	v.isSet = true
}

func (v NullableBTImageFilter853) IsSet() bool {
	return v.isSet
}

func (v *NullableBTImageFilter853) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTImageFilter853(val *BTImageFilter853) *NullableBTImageFilter853 {
	return &NullableBTImageFilter853{value: val, isSet: true}
}

func (v NullableBTImageFilter853) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTImageFilter853) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
