/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMicroversionInfo struct for BTMicroversionInfo
type BTMicroversionInfo struct {
	Microversion *string `json:"microversion,omitempty"`
}

// NewBTMicroversionInfo instantiates a new BTMicroversionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMicroversionInfo() *BTMicroversionInfo {
	this := BTMicroversionInfo{}
	return &this
}

// NewBTMicroversionInfoWithDefaults instantiates a new BTMicroversionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMicroversionInfoWithDefaults() *BTMicroversionInfo {
	this := BTMicroversionInfo{}
	return &this
}

// GetMicroversion returns the Microversion field value if set, zero value otherwise.
func (o *BTMicroversionInfo) GetMicroversion() string {
	if o == nil || o.Microversion == nil {
		var ret string
		return ret
	}
	return *o.Microversion
}

// GetMicroversionOk returns a tuple with the Microversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMicroversionInfo) GetMicroversionOk() (*string, bool) {
	if o == nil || o.Microversion == nil {
		return nil, false
	}
	return o.Microversion, true
}

// HasMicroversion returns a boolean if a field has been set.
func (o *BTMicroversionInfo) HasMicroversion() bool {
	if o != nil && o.Microversion != nil {
		return true
	}

	return false
}

// SetMicroversion gets a reference to the given string and assigns it to the Microversion field.
func (o *BTMicroversionInfo) SetMicroversion(v string) {
	o.Microversion = &v
}

func (o BTMicroversionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Microversion != nil {
		toSerialize["microversion"] = o.Microversion
	}
	return json.Marshal(toSerialize)
}

type NullableBTMicroversionInfo struct {
	value *BTMicroversionInfo
	isSet bool
}

func (v NullableBTMicroversionInfo) Get() *BTMicroversionInfo {
	return v.value
}

func (v *NullableBTMicroversionInfo) Set(val *BTMicroversionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMicroversionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMicroversionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMicroversionInfo(val *BTMicroversionInfo) *NullableBTMicroversionInfo {
	return &NullableBTMicroversionInfo{value: val, isSet: true}
}

func (v NullableBTMicroversionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMicroversionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
