/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPTypeNameUser292AllOf struct for BTPTypeNameUser292AllOf
type BTPTypeNameUser292AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Type *BTPName261 `json:"type,omitempty"`
}

// NewBTPTypeNameUser292AllOf instantiates a new BTPTypeNameUser292AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPTypeNameUser292AllOf() *BTPTypeNameUser292AllOf {
	this := BTPTypeNameUser292AllOf{}
	return &this
}

// NewBTPTypeNameUser292AllOfWithDefaults instantiates a new BTPTypeNameUser292AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPTypeNameUser292AllOfWithDefaults() *BTPTypeNameUser292AllOf {
	this := BTPTypeNameUser292AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPTypeNameUser292AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTypeNameUser292AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPTypeNameUser292AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPTypeNameUser292AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTPTypeNameUser292AllOf) GetType() BTPName261 {
	if o == nil || o.Type == nil {
		var ret BTPName261
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTypeNameUser292AllOf) GetTypeOk() (*BTPName261, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTPTypeNameUser292AllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given BTPName261 and assigns it to the Type field.
func (o *BTPTypeNameUser292AllOf) SetType(v BTPName261) {
	o.Type = &v
}

func (o BTPTypeNameUser292AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableBTPTypeNameUser292AllOf struct {
	value *BTPTypeNameUser292AllOf
	isSet bool
}

func (v NullableBTPTypeNameUser292AllOf) Get() *BTPTypeNameUser292AllOf {
	return v.value
}

func (v *NullableBTPTypeNameUser292AllOf) Set(val *BTPTypeNameUser292AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPTypeNameUser292AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPTypeNameUser292AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPTypeNameUser292AllOf(val *BTPTypeNameUser292AllOf) *NullableBTPTypeNameUser292AllOf {
	return &NullableBTPTypeNameUser292AllOf{value: val, isSet: true}
}

func (v NullableBTPTypeNameUser292AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPTypeNameUser292AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
