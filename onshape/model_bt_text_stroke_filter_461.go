/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTTextStrokeFilter461 struct for BTTextStrokeFilter461
type BTTextStrokeFilter461 struct {
	BTQueryFilter183
	BtType *string `json:"btType,omitempty"`
	IsStroke *bool `json:"isStroke,omitempty"`
}

// NewBTTextStrokeFilter461 instantiates a new BTTextStrokeFilter461 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTTextStrokeFilter461() *BTTextStrokeFilter461 {
	this := BTTextStrokeFilter461{}
	return &this
}

// NewBTTextStrokeFilter461WithDefaults instantiates a new BTTextStrokeFilter461 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTTextStrokeFilter461WithDefaults() *BTTextStrokeFilter461 {
	this := BTTextStrokeFilter461{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTTextStrokeFilter461) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTextStrokeFilter461) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTTextStrokeFilter461) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTTextStrokeFilter461) SetBtType(v string) {
	o.BtType = &v
}

// GetIsStroke returns the IsStroke field value if set, zero value otherwise.
func (o *BTTextStrokeFilter461) GetIsStroke() bool {
	if o == nil || o.IsStroke == nil {
		var ret bool
		return ret
	}
	return *o.IsStroke
}

// GetIsStrokeOk returns a tuple with the IsStroke field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTextStrokeFilter461) GetIsStrokeOk() (*bool, bool) {
	if o == nil || o.IsStroke == nil {
		return nil, false
	}
	return o.IsStroke, true
}

// HasIsStroke returns a boolean if a field has been set.
func (o *BTTextStrokeFilter461) HasIsStroke() bool {
	if o != nil && o.IsStroke != nil {
		return true
	}

	return false
}

// SetIsStroke gets a reference to the given bool and assigns it to the IsStroke field.
func (o *BTTextStrokeFilter461) SetIsStroke(v bool) {
	o.IsStroke = &v
}

func (o BTTextStrokeFilter461) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
	if errBTQueryFilter183 != nil {
		return []byte{}, errBTQueryFilter183
	}
	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
	if errBTQueryFilter183 != nil {
		return []byte{}, errBTQueryFilter183
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.IsStroke != nil {
		toSerialize["isStroke"] = o.IsStroke
	}
	return json.Marshal(toSerialize)
}

type NullableBTTextStrokeFilter461 struct {
	value *BTTextStrokeFilter461
	isSet bool
}

func (v NullableBTTextStrokeFilter461) Get() *BTTextStrokeFilter461 {
	return v.value
}

func (v *NullableBTTextStrokeFilter461) Set(val *BTTextStrokeFilter461) {
	v.value = val
	v.isSet = true
}

func (v NullableBTTextStrokeFilter461) IsSet() bool {
	return v.isSet
}

func (v *NullableBTTextStrokeFilter461) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTTextStrokeFilter461(val *BTTextStrokeFilter461) *NullableBTTextStrokeFilter461 {
	return &NullableBTTextStrokeFilter461{value: val, isSet: true}
}

func (v NullableBTTextStrokeFilter461) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTTextStrokeFilter461) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
