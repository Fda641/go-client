/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementCompressedQuery1237 struct for BTPStatementCompressedQuery1237
type BTPStatementCompressedQuery1237 struct {
	BTPStatement269
	BtType *string `json:"btType,omitempty"`
	Query *string `json:"query,omitempty"`
}

// NewBTPStatementCompressedQuery1237 instantiates a new BTPStatementCompressedQuery1237 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementCompressedQuery1237() *BTPStatementCompressedQuery1237 {
	this := BTPStatementCompressedQuery1237{}
	return &this
}

// NewBTPStatementCompressedQuery1237WithDefaults instantiates a new BTPStatementCompressedQuery1237 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementCompressedQuery1237WithDefaults() *BTPStatementCompressedQuery1237 {
	this := BTPStatementCompressedQuery1237{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementCompressedQuery1237) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementCompressedQuery1237) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementCompressedQuery1237) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementCompressedQuery1237) SetBtType(v string) {
	o.BtType = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *BTPStatementCompressedQuery1237) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementCompressedQuery1237) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *BTPStatementCompressedQuery1237) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *BTPStatementCompressedQuery1237) SetQuery(v string) {
	o.Query = &v
}

func (o BTPStatementCompressedQuery1237) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementCompressedQuery1237 struct {
	value *BTPStatementCompressedQuery1237
	isSet bool
}

func (v NullableBTPStatementCompressedQuery1237) Get() *BTPStatementCompressedQuery1237 {
	return v.value
}

func (v *NullableBTPStatementCompressedQuery1237) Set(val *BTPStatementCompressedQuery1237) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementCompressedQuery1237) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementCompressedQuery1237) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementCompressedQuery1237(val *BTPStatementCompressedQuery1237) *NullableBTPStatementCompressedQuery1237 {
	return &NullableBTPStatementCompressedQuery1237{value: val, isSet: true}
}

func (v NullableBTPStatementCompressedQuery1237) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementCompressedQuery1237) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
