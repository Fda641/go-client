/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTCylinderDescription686AllOf struct for BTCylinderDescription686AllOf
type BTCylinderDescription686AllOf struct {
	Axis *BTVector3d389 `json:"axis,omitempty"`
	BtType *string `json:"btType,omitempty"`
	Origin *BTVector3d389 `json:"origin,omitempty"`
	Radius *float64 `json:"radius,omitempty"`
}

// NewBTCylinderDescription686AllOf instantiates a new BTCylinderDescription686AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTCylinderDescription686AllOf() *BTCylinderDescription686AllOf {
	this := BTCylinderDescription686AllOf{}
	return &this
}

// NewBTCylinderDescription686AllOfWithDefaults instantiates a new BTCylinderDescription686AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTCylinderDescription686AllOfWithDefaults() *BTCylinderDescription686AllOf {
	this := BTCylinderDescription686AllOf{}
	return &this
}

// GetAxis returns the Axis field value if set, zero value otherwise.
func (o *BTCylinderDescription686AllOf) GetAxis() BTVector3d389 {
	if o == nil || o.Axis == nil {
		var ret BTVector3d389
		return ret
	}
	return *o.Axis
}

// GetAxisOk returns a tuple with the Axis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTCylinderDescription686AllOf) GetAxisOk() (*BTVector3d389, bool) {
	if o == nil || o.Axis == nil {
		return nil, false
	}
	return o.Axis, true
}

// HasAxis returns a boolean if a field has been set.
func (o *BTCylinderDescription686AllOf) HasAxis() bool {
	if o != nil && o.Axis != nil {
		return true
	}

	return false
}

// SetAxis gets a reference to the given BTVector3d389 and assigns it to the Axis field.
func (o *BTCylinderDescription686AllOf) SetAxis(v BTVector3d389) {
	o.Axis = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTCylinderDescription686AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTCylinderDescription686AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTCylinderDescription686AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTCylinderDescription686AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *BTCylinderDescription686AllOf) GetOrigin() BTVector3d389 {
	if o == nil || o.Origin == nil {
		var ret BTVector3d389
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTCylinderDescription686AllOf) GetOriginOk() (*BTVector3d389, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *BTCylinderDescription686AllOf) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given BTVector3d389 and assigns it to the Origin field.
func (o *BTCylinderDescription686AllOf) SetOrigin(v BTVector3d389) {
	o.Origin = &v
}

// GetRadius returns the Radius field value if set, zero value otherwise.
func (o *BTCylinderDescription686AllOf) GetRadius() float64 {
	if o == nil || o.Radius == nil {
		var ret float64
		return ret
	}
	return *o.Radius
}

// GetRadiusOk returns a tuple with the Radius field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTCylinderDescription686AllOf) GetRadiusOk() (*float64, bool) {
	if o == nil || o.Radius == nil {
		return nil, false
	}
	return o.Radius, true
}

// HasRadius returns a boolean if a field has been set.
func (o *BTCylinderDescription686AllOf) HasRadius() bool {
	if o != nil && o.Radius != nil {
		return true
	}

	return false
}

// SetRadius gets a reference to the given float64 and assigns it to the Radius field.
func (o *BTCylinderDescription686AllOf) SetRadius(v float64) {
	o.Radius = &v
}

func (o BTCylinderDescription686AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Axis != nil {
		toSerialize["axis"] = o.Axis
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.Radius != nil {
		toSerialize["radius"] = o.Radius
	}
	return json.Marshal(toSerialize)
}

type NullableBTCylinderDescription686AllOf struct {
	value *BTCylinderDescription686AllOf
	isSet bool
}

func (v NullableBTCylinderDescription686AllOf) Get() *BTCylinderDescription686AllOf {
	return v.value
}

func (v *NullableBTCylinderDescription686AllOf) Set(val *BTCylinderDescription686AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTCylinderDescription686AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTCylinderDescription686AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTCylinderDescription686AllOf(val *BTCylinderDescription686AllOf) *NullableBTCylinderDescription686AllOf {
	return &NullableBTCylinderDescription686AllOf{value: val, isSet: true}
}

func (v NullableBTCylinderDescription686AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTCylinderDescription686AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
