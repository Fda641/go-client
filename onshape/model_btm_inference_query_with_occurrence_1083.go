/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMInferenceQueryWithOccurrence1083 struct for BTMInferenceQueryWithOccurrence1083
type BTMInferenceQueryWithOccurrence1083 struct {
	BTMIndividualQueryWithOccurrence811
	BtType *string `json:"btType,omitempty"`
	InferenceType *string `json:"inferenceType,omitempty"`
	SecondDeterministicId *string `json:"secondDeterministicId,omitempty"`
	SecondEntityQuery *string `json:"secondEntityQuery,omitempty"`
}

// NewBTMInferenceQueryWithOccurrence1083 instantiates a new BTMInferenceQueryWithOccurrence1083 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMInferenceQueryWithOccurrence1083() *BTMInferenceQueryWithOccurrence1083 {
	this := BTMInferenceQueryWithOccurrence1083{}
	return &this
}

// NewBTMInferenceQueryWithOccurrence1083WithDefaults instantiates a new BTMInferenceQueryWithOccurrence1083 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMInferenceQueryWithOccurrence1083WithDefaults() *BTMInferenceQueryWithOccurrence1083 {
	this := BTMInferenceQueryWithOccurrence1083{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMInferenceQueryWithOccurrence1083) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMInferenceQueryWithOccurrence1083) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMInferenceQueryWithOccurrence1083) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMInferenceQueryWithOccurrence1083) SetBtType(v string) {
	o.BtType = &v
}

// GetInferenceType returns the InferenceType field value if set, zero value otherwise.
func (o *BTMInferenceQueryWithOccurrence1083) GetInferenceType() string {
	if o == nil || o.InferenceType == nil {
		var ret string
		return ret
	}
	return *o.InferenceType
}

// GetInferenceTypeOk returns a tuple with the InferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMInferenceQueryWithOccurrence1083) GetInferenceTypeOk() (*string, bool) {
	if o == nil || o.InferenceType == nil {
		return nil, false
	}
	return o.InferenceType, true
}

// HasInferenceType returns a boolean if a field has been set.
func (o *BTMInferenceQueryWithOccurrence1083) HasInferenceType() bool {
	if o != nil && o.InferenceType != nil {
		return true
	}

	return false
}

// SetInferenceType gets a reference to the given string and assigns it to the InferenceType field.
func (o *BTMInferenceQueryWithOccurrence1083) SetInferenceType(v string) {
	o.InferenceType = &v
}

// GetSecondDeterministicId returns the SecondDeterministicId field value if set, zero value otherwise.
func (o *BTMInferenceQueryWithOccurrence1083) GetSecondDeterministicId() string {
	if o == nil || o.SecondDeterministicId == nil {
		var ret string
		return ret
	}
	return *o.SecondDeterministicId
}

// GetSecondDeterministicIdOk returns a tuple with the SecondDeterministicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMInferenceQueryWithOccurrence1083) GetSecondDeterministicIdOk() (*string, bool) {
	if o == nil || o.SecondDeterministicId == nil {
		return nil, false
	}
	return o.SecondDeterministicId, true
}

// HasSecondDeterministicId returns a boolean if a field has been set.
func (o *BTMInferenceQueryWithOccurrence1083) HasSecondDeterministicId() bool {
	if o != nil && o.SecondDeterministicId != nil {
		return true
	}

	return false
}

// SetSecondDeterministicId gets a reference to the given string and assigns it to the SecondDeterministicId field.
func (o *BTMInferenceQueryWithOccurrence1083) SetSecondDeterministicId(v string) {
	o.SecondDeterministicId = &v
}

// GetSecondEntityQuery returns the SecondEntityQuery field value if set, zero value otherwise.
func (o *BTMInferenceQueryWithOccurrence1083) GetSecondEntityQuery() string {
	if o == nil || o.SecondEntityQuery == nil {
		var ret string
		return ret
	}
	return *o.SecondEntityQuery
}

// GetSecondEntityQueryOk returns a tuple with the SecondEntityQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMInferenceQueryWithOccurrence1083) GetSecondEntityQueryOk() (*string, bool) {
	if o == nil || o.SecondEntityQuery == nil {
		return nil, false
	}
	return o.SecondEntityQuery, true
}

// HasSecondEntityQuery returns a boolean if a field has been set.
func (o *BTMInferenceQueryWithOccurrence1083) HasSecondEntityQuery() bool {
	if o != nil && o.SecondEntityQuery != nil {
		return true
	}

	return false
}

// SetSecondEntityQuery gets a reference to the given string and assigns it to the SecondEntityQuery field.
func (o *BTMInferenceQueryWithOccurrence1083) SetSecondEntityQuery(v string) {
	o.SecondEntityQuery = &v
}

func (o BTMInferenceQueryWithOccurrence1083) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMIndividualQueryWithOccurrence811, errBTMIndividualQueryWithOccurrence811 := json.Marshal(o.BTMIndividualQueryWithOccurrence811)
	if errBTMIndividualQueryWithOccurrence811 != nil {
		return []byte{}, errBTMIndividualQueryWithOccurrence811
	}
	errBTMIndividualQueryWithOccurrence811 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrence811), &toSerialize)
	if errBTMIndividualQueryWithOccurrence811 != nil {
		return []byte{}, errBTMIndividualQueryWithOccurrence811
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.InferenceType != nil {
		toSerialize["inferenceType"] = o.InferenceType
	}
	if o.SecondDeterministicId != nil {
		toSerialize["secondDeterministicId"] = o.SecondDeterministicId
	}
	if o.SecondEntityQuery != nil {
		toSerialize["secondEntityQuery"] = o.SecondEntityQuery
	}
	return json.Marshal(toSerialize)
}

type NullableBTMInferenceQueryWithOccurrence1083 struct {
	value *BTMInferenceQueryWithOccurrence1083
	isSet bool
}

func (v NullableBTMInferenceQueryWithOccurrence1083) Get() *BTMInferenceQueryWithOccurrence1083 {
	return v.value
}

func (v *NullableBTMInferenceQueryWithOccurrence1083) Set(val *BTMInferenceQueryWithOccurrence1083) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMInferenceQueryWithOccurrence1083) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMInferenceQueryWithOccurrence1083) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMInferenceQueryWithOccurrence1083(val *BTMInferenceQueryWithOccurrence1083) *NullableBTMInferenceQueryWithOccurrence1083 {
	return &NullableBTMInferenceQueryWithOccurrence1083{value: val, isSet: true}
}

func (v NullableBTMInferenceQueryWithOccurrence1083) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMInferenceQueryWithOccurrence1083) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
