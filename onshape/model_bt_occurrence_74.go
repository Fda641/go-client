/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTOccurrence74 struct for BTOccurrence74
type BTOccurrence74 struct {
	BtType *string `json:"btType,omitempty"`
	FullPathAsString *string `json:"fullPathAsString,omitempty"`
	HeadInstanceId *string `json:"headInstanceId,omitempty"`
	OccurrenceWithoutHead *BTOccurrence74 `json:"occurrenceWithoutHead,omitempty"`
	OccurrenceWithoutTail *BTOccurrence74 `json:"occurrenceWithoutTail,omitempty"`
	Parent *BTOccurrence74 `json:"parent,omitempty"`
	Path *[]string `json:"path,omitempty"`
	PatternDescendant *bool `json:"patternDescendant,omitempty"`
	RootOccurrence *bool `json:"rootOccurrence,omitempty"`
	TailInstanceId *string `json:"tailInstanceId,omitempty"`
}

// NewBTOccurrence74 instantiates a new BTOccurrence74 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTOccurrence74() *BTOccurrence74 {
	this := BTOccurrence74{}
	return &this
}

// NewBTOccurrence74WithDefaults instantiates a new BTOccurrence74 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTOccurrence74WithDefaults() *BTOccurrence74 {
	this := BTOccurrence74{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTOccurrence74) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTOccurrence74) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTOccurrence74) SetBtType(v string) {
	o.BtType = &v
}

// GetFullPathAsString returns the FullPathAsString field value if set, zero value otherwise.
func (o *BTOccurrence74) GetFullPathAsString() string {
	if o == nil || o.FullPathAsString == nil {
		var ret string
		return ret
	}
	return *o.FullPathAsString
}

// GetFullPathAsStringOk returns a tuple with the FullPathAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetFullPathAsStringOk() (*string, bool) {
	if o == nil || o.FullPathAsString == nil {
		return nil, false
	}
	return o.FullPathAsString, true
}

// HasFullPathAsString returns a boolean if a field has been set.
func (o *BTOccurrence74) HasFullPathAsString() bool {
	if o != nil && o.FullPathAsString != nil {
		return true
	}

	return false
}

// SetFullPathAsString gets a reference to the given string and assigns it to the FullPathAsString field.
func (o *BTOccurrence74) SetFullPathAsString(v string) {
	o.FullPathAsString = &v
}

// GetHeadInstanceId returns the HeadInstanceId field value if set, zero value otherwise.
func (o *BTOccurrence74) GetHeadInstanceId() string {
	if o == nil || o.HeadInstanceId == nil {
		var ret string
		return ret
	}
	return *o.HeadInstanceId
}

// GetHeadInstanceIdOk returns a tuple with the HeadInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetHeadInstanceIdOk() (*string, bool) {
	if o == nil || o.HeadInstanceId == nil {
		return nil, false
	}
	return o.HeadInstanceId, true
}

// HasHeadInstanceId returns a boolean if a field has been set.
func (o *BTOccurrence74) HasHeadInstanceId() bool {
	if o != nil && o.HeadInstanceId != nil {
		return true
	}

	return false
}

// SetHeadInstanceId gets a reference to the given string and assigns it to the HeadInstanceId field.
func (o *BTOccurrence74) SetHeadInstanceId(v string) {
	o.HeadInstanceId = &v
}

// GetOccurrenceWithoutHead returns the OccurrenceWithoutHead field value if set, zero value otherwise.
func (o *BTOccurrence74) GetOccurrenceWithoutHead() BTOccurrence74 {
	if o == nil || o.OccurrenceWithoutHead == nil {
		var ret BTOccurrence74
		return ret
	}
	return *o.OccurrenceWithoutHead
}

// GetOccurrenceWithoutHeadOk returns a tuple with the OccurrenceWithoutHead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetOccurrenceWithoutHeadOk() (*BTOccurrence74, bool) {
	if o == nil || o.OccurrenceWithoutHead == nil {
		return nil, false
	}
	return o.OccurrenceWithoutHead, true
}

// HasOccurrenceWithoutHead returns a boolean if a field has been set.
func (o *BTOccurrence74) HasOccurrenceWithoutHead() bool {
	if o != nil && o.OccurrenceWithoutHead != nil {
		return true
	}

	return false
}

// SetOccurrenceWithoutHead gets a reference to the given BTOccurrence74 and assigns it to the OccurrenceWithoutHead field.
func (o *BTOccurrence74) SetOccurrenceWithoutHead(v BTOccurrence74) {
	o.OccurrenceWithoutHead = &v
}

// GetOccurrenceWithoutTail returns the OccurrenceWithoutTail field value if set, zero value otherwise.
func (o *BTOccurrence74) GetOccurrenceWithoutTail() BTOccurrence74 {
	if o == nil || o.OccurrenceWithoutTail == nil {
		var ret BTOccurrence74
		return ret
	}
	return *o.OccurrenceWithoutTail
}

// GetOccurrenceWithoutTailOk returns a tuple with the OccurrenceWithoutTail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetOccurrenceWithoutTailOk() (*BTOccurrence74, bool) {
	if o == nil || o.OccurrenceWithoutTail == nil {
		return nil, false
	}
	return o.OccurrenceWithoutTail, true
}

// HasOccurrenceWithoutTail returns a boolean if a field has been set.
func (o *BTOccurrence74) HasOccurrenceWithoutTail() bool {
	if o != nil && o.OccurrenceWithoutTail != nil {
		return true
	}

	return false
}

// SetOccurrenceWithoutTail gets a reference to the given BTOccurrence74 and assigns it to the OccurrenceWithoutTail field.
func (o *BTOccurrence74) SetOccurrenceWithoutTail(v BTOccurrence74) {
	o.OccurrenceWithoutTail = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *BTOccurrence74) GetParent() BTOccurrence74 {
	if o == nil || o.Parent == nil {
		var ret BTOccurrence74
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetParentOk() (*BTOccurrence74, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *BTOccurrence74) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given BTOccurrence74 and assigns it to the Parent field.
func (o *BTOccurrence74) SetParent(v BTOccurrence74) {
	o.Parent = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *BTOccurrence74) GetPath() []string {
	if o == nil || o.Path == nil {
		var ret []string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetPathOk() (*[]string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *BTOccurrence74) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given []string and assigns it to the Path field.
func (o *BTOccurrence74) SetPath(v []string) {
	o.Path = &v
}

// GetPatternDescendant returns the PatternDescendant field value if set, zero value otherwise.
func (o *BTOccurrence74) GetPatternDescendant() bool {
	if o == nil || o.PatternDescendant == nil {
		var ret bool
		return ret
	}
	return *o.PatternDescendant
}

// GetPatternDescendantOk returns a tuple with the PatternDescendant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetPatternDescendantOk() (*bool, bool) {
	if o == nil || o.PatternDescendant == nil {
		return nil, false
	}
	return o.PatternDescendant, true
}

// HasPatternDescendant returns a boolean if a field has been set.
func (o *BTOccurrence74) HasPatternDescendant() bool {
	if o != nil && o.PatternDescendant != nil {
		return true
	}

	return false
}

// SetPatternDescendant gets a reference to the given bool and assigns it to the PatternDescendant field.
func (o *BTOccurrence74) SetPatternDescendant(v bool) {
	o.PatternDescendant = &v
}

// GetRootOccurrence returns the RootOccurrence field value if set, zero value otherwise.
func (o *BTOccurrence74) GetRootOccurrence() bool {
	if o == nil || o.RootOccurrence == nil {
		var ret bool
		return ret
	}
	return *o.RootOccurrence
}

// GetRootOccurrenceOk returns a tuple with the RootOccurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetRootOccurrenceOk() (*bool, bool) {
	if o == nil || o.RootOccurrence == nil {
		return nil, false
	}
	return o.RootOccurrence, true
}

// HasRootOccurrence returns a boolean if a field has been set.
func (o *BTOccurrence74) HasRootOccurrence() bool {
	if o != nil && o.RootOccurrence != nil {
		return true
	}

	return false
}

// SetRootOccurrence gets a reference to the given bool and assigns it to the RootOccurrence field.
func (o *BTOccurrence74) SetRootOccurrence(v bool) {
	o.RootOccurrence = &v
}

// GetTailInstanceId returns the TailInstanceId field value if set, zero value otherwise.
func (o *BTOccurrence74) GetTailInstanceId() string {
	if o == nil || o.TailInstanceId == nil {
		var ret string
		return ret
	}
	return *o.TailInstanceId
}

// GetTailInstanceIdOk returns a tuple with the TailInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOccurrence74) GetTailInstanceIdOk() (*string, bool) {
	if o == nil || o.TailInstanceId == nil {
		return nil, false
	}
	return o.TailInstanceId, true
}

// HasTailInstanceId returns a boolean if a field has been set.
func (o *BTOccurrence74) HasTailInstanceId() bool {
	if o != nil && o.TailInstanceId != nil {
		return true
	}

	return false
}

// SetTailInstanceId gets a reference to the given string and assigns it to the TailInstanceId field.
func (o *BTOccurrence74) SetTailInstanceId(v string) {
	o.TailInstanceId = &v
}

func (o BTOccurrence74) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.FullPathAsString != nil {
		toSerialize["fullPathAsString"] = o.FullPathAsString
	}
	if o.HeadInstanceId != nil {
		toSerialize["headInstanceId"] = o.HeadInstanceId
	}
	if o.OccurrenceWithoutHead != nil {
		toSerialize["occurrenceWithoutHead"] = o.OccurrenceWithoutHead
	}
	if o.OccurrenceWithoutTail != nil {
		toSerialize["occurrenceWithoutTail"] = o.OccurrenceWithoutTail
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.PatternDescendant != nil {
		toSerialize["patternDescendant"] = o.PatternDescendant
	}
	if o.RootOccurrence != nil {
		toSerialize["rootOccurrence"] = o.RootOccurrence
	}
	if o.TailInstanceId != nil {
		toSerialize["tailInstanceId"] = o.TailInstanceId
	}
	return json.Marshal(toSerialize)
}

type NullableBTOccurrence74 struct {
	value *BTOccurrence74
	isSet bool
}

func (v NullableBTOccurrence74) Get() *BTOccurrence74 {
	return v.value
}

func (v *NullableBTOccurrence74) Set(val *BTOccurrence74) {
	v.value = val
	v.isSet = true
}

func (v NullableBTOccurrence74) IsSet() bool {
	return v.isSet
}

func (v *NullableBTOccurrence74) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTOccurrence74(val *BTOccurrence74) *NullableBTOccurrence74 {
	return &NullableBTOccurrence74{value: val, isSet: true}
}

func (v NullableBTOccurrence74) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTOccurrence74) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
