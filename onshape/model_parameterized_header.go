/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// ParameterizedHeader struct for ParameterizedHeader
type ParameterizedHeader struct {
	Parameters *map[string]string `json:"parameters,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewParameterizedHeader instantiates a new ParameterizedHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterizedHeader() *ParameterizedHeader {
	this := ParameterizedHeader{}
	return &this
}

// NewParameterizedHeaderWithDefaults instantiates a new ParameterizedHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterizedHeaderWithDefaults() *ParameterizedHeader {
	this := ParameterizedHeader{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ParameterizedHeader) GetParameters() map[string]string {
	if o == nil || o.Parameters == nil {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterizedHeader) GetParametersOk() (*map[string]string, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ParameterizedHeader) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *ParameterizedHeader) SetParameters(v map[string]string) {
	o.Parameters = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ParameterizedHeader) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterizedHeader) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ParameterizedHeader) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ParameterizedHeader) SetValue(v string) {
	o.Value = &v
}

func (o ParameterizedHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableParameterizedHeader struct {
	value *ParameterizedHeader
	isSet bool
}

func (v NullableParameterizedHeader) Get() *ParameterizedHeader {
	return v.value
}

func (v *NullableParameterizedHeader) Set(val *ParameterizedHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterizedHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterizedHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterizedHeader(val *ParameterizedHeader) *NullableParameterizedHeader {
	return &NullableParameterizedHeader{value: val, isSet: true}
}

func (v NullableParameterizedHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterizedHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
