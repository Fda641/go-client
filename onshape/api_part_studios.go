/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// PartStudiosApiService PartStudiosApi service
type PartStudiosApiService service

type apiAddPartStudioFeatureRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	bTFeatureDefinitionCall1406 *BTFeatureDefinitionCall1406
}


func (r apiAddPartStudioFeatureRequest) BTFeatureDefinitionCall1406(bTFeatureDefinitionCall1406 BTFeatureDefinitionCall1406) apiAddPartStudioFeatureRequest {
	r.bTFeatureDefinitionCall1406 = &bTFeatureDefinitionCall1406
	return r
}

/*
AddPartStudioFeature Add Feature
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiAddPartStudioFeatureRequest
*/
func (a *PartStudiosApiService) AddPartStudioFeature(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiAddPartStudioFeatureRequest {
	return apiAddPartStudioFeatureRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTFeatureDefinitionResponse1617
*/
func (r apiAddPartStudioFeatureRequest) Execute() (BTFeatureDefinitionResponse1617, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureDefinitionResponse1617
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.AddPartStudioFeature")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTFeatureDefinitionCall1406
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureDefinitionResponse1617
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiComparePartStudiosRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	workspaceId *string
	versionId *string
	microversionId *string
	sourceConfiguration *string
	targetConfiguration *string
	linkDocumentId *string
}


func (r apiComparePartStudiosRequest) WorkspaceId(workspaceId string) apiComparePartStudiosRequest {
	r.workspaceId = &workspaceId
	return r
}

func (r apiComparePartStudiosRequest) VersionId(versionId string) apiComparePartStudiosRequest {
	r.versionId = &versionId
	return r
}

func (r apiComparePartStudiosRequest) MicroversionId(microversionId string) apiComparePartStudiosRequest {
	r.microversionId = &microversionId
	return r
}

func (r apiComparePartStudiosRequest) SourceConfiguration(sourceConfiguration string) apiComparePartStudiosRequest {
	r.sourceConfiguration = &sourceConfiguration
	return r
}

func (r apiComparePartStudiosRequest) TargetConfiguration(targetConfiguration string) apiComparePartStudiosRequest {
	r.targetConfiguration = &targetConfiguration
	return r
}

func (r apiComparePartStudiosRequest) LinkDocumentId(linkDocumentId string) apiComparePartStudiosRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
ComparePartStudios Compare Part Studios
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiComparePartStudiosRequest
*/
func (a *PartStudiosApiService) ComparePartStudios(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiComparePartStudiosRequest {
	return apiComparePartStudiosRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTRootDiffInfo
*/
func (r apiComparePartStudiosRequest) Execute() (BTRootDiffInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTRootDiffInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.ComparePartStudios")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
						
	if r.workspaceId != nil {
		localVarQueryParams.Add("workspaceId", parameterToString(*r.workspaceId, ""))
	}
	if r.versionId != nil {
		localVarQueryParams.Add("versionId", parameterToString(*r.versionId, ""))
	}
	if r.microversionId != nil {
		localVarQueryParams.Add("microversionId", parameterToString(*r.microversionId, ""))
	}
	if r.sourceConfiguration != nil {
		localVarQueryParams.Add("sourceConfiguration", parameterToString(*r.sourceConfiguration, ""))
	}
	if r.targetConfiguration != nil {
		localVarQueryParams.Add("targetConfiguration", parameterToString(*r.targetConfiguration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTRootDiffInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiCreatePartStudioRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wid string
	bTModelElementParams *BTModelElementParams
}


func (r apiCreatePartStudioRequest) BTModelElementParams(bTModelElementParams BTModelElementParams) apiCreatePartStudioRequest {
	r.bTModelElementParams = &bTModelElementParams
	return r
}

/*
CreatePartStudio Create Part Studio
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wid Workspace ID.
@return apiCreatePartStudioRequest
*/
func (a *PartStudiosApiService) CreatePartStudio(ctx _context.Context, did string, wid string) apiCreatePartStudioRequest {
	return apiCreatePartStudioRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
	}
}

/*
Execute executes the request
 @return BTDocumentElementInfo
*/
func (r apiCreatePartStudioRequest) Execute() (BTDocumentElementInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTDocumentElementInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.CreatePartStudio")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/w/{wid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	if r.bTModelElementParams == nil {
		return localVarReturnValue, nil, reportError("bTModelElementParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTModelElementParams
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTDocumentElementInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiCreatePartStudioTranslationRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wv string
	wvid string
	eid string
	bTTranslateFormatParams *BTTranslateFormatParams
}


func (r apiCreatePartStudioTranslationRequest) BTTranslateFormatParams(bTTranslateFormatParams BTTranslateFormatParams) apiCreatePartStudioTranslationRequest {
	r.bTTranslateFormatParams = &bTTranslateFormatParams
	return r
}

/*
CreatePartStudioTranslation Create Part Studio translation
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wv One of w or v corresponding to whether a workspace or version was specified.
 * @param wvid Workspace (w) or Version (v) ID.
 * @param eid Element ID.
@return apiCreatePartStudioTranslationRequest
*/
func (a *PartStudiosApiService) CreatePartStudioTranslation(ctx _context.Context, did string, wv string, wvid string, eid string) apiCreatePartStudioTranslationRequest {
	return apiCreatePartStudioTranslationRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wv: wv,
		wvid: wvid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTTranslationRequestInfo
*/
func (r apiCreatePartStudioTranslationRequest) Execute() (BTTranslationRequestInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTTranslationRequestInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.CreatePartStudioTranslation")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wv"+"}", _neturl.QueryEscape(parameterToString(r.wv, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvid"+"}", _neturl.QueryEscape(parameterToString(r.wvid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	if r.bTTranslateFormatParams == nil {
		return localVarReturnValue, nil, reportError("bTTranslateFormatParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTTranslateFormatParams
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTTranslationRequestInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiDeletePartStudioFeatureRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wid string
	eid string
	fid string
}


/*
DeletePartStudioFeature Delete Feature
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wid Workspace ID.
 * @param eid Element ID.
 * @param fid The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure
@return apiDeletePartStudioFeatureRequest
*/
func (a *PartStudiosApiService) DeletePartStudioFeature(ctx _context.Context, did string, wid string, eid string, fid string) apiDeletePartStudioFeatureRequest {
	return apiDeletePartStudioFeatureRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
		eid: eid,
		fid: fid,
	}
}

/*
Execute executes the request
 @return BTFeatureApiBase1430
*/
func (r apiDeletePartStudioFeatureRequest) Execute() (BTFeatureApiBase1430, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureApiBase1430
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.DeletePartStudioFeature")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fid"+"}", _neturl.QueryEscape(parameterToString(r.fid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureApiBase1430
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiEvalFeatureScriptRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	configuration *string
	bTFeatureScriptEvalCall2377 *BTFeatureScriptEvalCall2377
}


func (r apiEvalFeatureScriptRequest) Configuration(configuration string) apiEvalFeatureScriptRequest {
	r.configuration = &configuration
	return r
}

func (r apiEvalFeatureScriptRequest) BTFeatureScriptEvalCall2377(bTFeatureScriptEvalCall2377 BTFeatureScriptEvalCall2377) apiEvalFeatureScriptRequest {
	r.bTFeatureScriptEvalCall2377 = &bTFeatureScriptEvalCall2377
	return r
}

/*
EvalFeatureScript Evaluate FeatureScript
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiEvalFeatureScriptRequest
*/
func (a *PartStudiosApiService) EvalFeatureScript(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiEvalFeatureScriptRequest {
	return apiEvalFeatureScriptRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTFeatureScriptEvalResponse1859
*/
func (r apiEvalFeatureScriptRequest) Execute() (BTFeatureScriptEvalResponse1859, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureScriptEvalResponse1859
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.EvalFeatureScript")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
		
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTFeatureScriptEvalCall2377
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureScriptEvalResponse1859
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiExportPS1Request struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	partIds *string
	version *string
	includeExportIds *bool
	configuration *string
	linkDocumentId *string
}


func (r apiExportPS1Request) PartIds(partIds string) apiExportPS1Request {
	r.partIds = &partIds
	return r
}

func (r apiExportPS1Request) Version(version string) apiExportPS1Request {
	r.version = &version
	return r
}

func (r apiExportPS1Request) IncludeExportIds(includeExportIds bool) apiExportPS1Request {
	r.includeExportIds = &includeExportIds
	return r
}

func (r apiExportPS1Request) Configuration(configuration string) apiExportPS1Request {
	r.configuration = &configuration
	return r
}

func (r apiExportPS1Request) LinkDocumentId(linkDocumentId string) apiExportPS1Request {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
ExportPS1 Export Part Studio to Parasolid
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiExportPS1Request
*/
func (a *PartStudiosApiService) ExportPS1(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiExportPS1Request {
	return apiExportPS1Request{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request

*/
func (r apiExportPS1Request) Execute() (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.ExportPS1")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
					
	if r.partIds != nil {
		localVarQueryParams.Add("partIds", parameterToString(*r.partIds, ""))
	}
	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.includeExportIds != nil {
		localVarQueryParams.Add("includeExportIds", parameterToString(*r.includeExportIds, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type apiExportStl1Request struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	partIds *string
	mode *string
	grouping *bool
	scale *float64
	units *string
	angleTolerance *float64
	chordTolerance *float64
	maxFacetWidth *float64
	minFacetWidth *float64
	configuration *string
	linkDocumentId *string
}


func (r apiExportStl1Request) PartIds(partIds string) apiExportStl1Request {
	r.partIds = &partIds
	return r
}

func (r apiExportStl1Request) Mode(mode string) apiExportStl1Request {
	r.mode = &mode
	return r
}

func (r apiExportStl1Request) Grouping(grouping bool) apiExportStl1Request {
	r.grouping = &grouping
	return r
}

func (r apiExportStl1Request) Scale(scale float64) apiExportStl1Request {
	r.scale = &scale
	return r
}

func (r apiExportStl1Request) Units(units string) apiExportStl1Request {
	r.units = &units
	return r
}

func (r apiExportStl1Request) AngleTolerance(angleTolerance float64) apiExportStl1Request {
	r.angleTolerance = &angleTolerance
	return r
}

func (r apiExportStl1Request) ChordTolerance(chordTolerance float64) apiExportStl1Request {
	r.chordTolerance = &chordTolerance
	return r
}

func (r apiExportStl1Request) MaxFacetWidth(maxFacetWidth float64) apiExportStl1Request {
	r.maxFacetWidth = &maxFacetWidth
	return r
}

func (r apiExportStl1Request) MinFacetWidth(minFacetWidth float64) apiExportStl1Request {
	r.minFacetWidth = &minFacetWidth
	return r
}

func (r apiExportStl1Request) Configuration(configuration string) apiExportStl1Request {
	r.configuration = &configuration
	return r
}

func (r apiExportStl1Request) LinkDocumentId(linkDocumentId string) apiExportStl1Request {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
ExportStl1 Export Part Studio to STL
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiExportStl1Request
*/
func (a *PartStudiosApiService) ExportStl1(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiExportStl1Request {
	return apiExportStl1Request{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request

*/
func (r apiExportStl1Request) Execute() (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.ExportStl1")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
											
	if r.partIds != nil {
		localVarQueryParams.Add("partIds", parameterToString(*r.partIds, ""))
	}
	if r.mode != nil {
		localVarQueryParams.Add("mode", parameterToString(*r.mode, ""))
	}
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	if r.scale != nil {
		localVarQueryParams.Add("scale", parameterToString(*r.scale, ""))
	}
	if r.units != nil {
		localVarQueryParams.Add("units", parameterToString(*r.units, ""))
	}
	if r.angleTolerance != nil {
		localVarQueryParams.Add("angleTolerance", parameterToString(*r.angleTolerance, ""))
	}
	if r.chordTolerance != nil {
		localVarQueryParams.Add("chordTolerance", parameterToString(*r.chordTolerance, ""))
	}
	if r.maxFacetWidth != nil {
		localVarQueryParams.Add("maxFacetWidth", parameterToString(*r.maxFacetWidth, ""))
	}
	if r.minFacetWidth != nil {
		localVarQueryParams.Add("minFacetWidth", parameterToString(*r.minFacetWidth, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type apiGetPartStudioBodyDetailsRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	configuration *string
	linkDocumentId *string
	rollbackBarIndex *int32
	body *string
}


func (r apiGetPartStudioBodyDetailsRequest) Configuration(configuration string) apiGetPartStudioBodyDetailsRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioBodyDetailsRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioBodyDetailsRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r apiGetPartStudioBodyDetailsRequest) RollbackBarIndex(rollbackBarIndex int32) apiGetPartStudioBodyDetailsRequest {
	r.rollbackBarIndex = &rollbackBarIndex
	return r
}

func (r apiGetPartStudioBodyDetailsRequest) Body(body string) apiGetPartStudioBodyDetailsRequest {
	r.body = &body
	return r
}

/*
GetPartStudioBodyDetails Array of body information
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiGetPartStudioBodyDetailsRequest
*/
func (a *PartStudiosApiService) GetPartStudioBodyDetails(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioBodyDetailsRequest {
	return apiGetPartStudioBodyDetailsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTExportModelBodiesResponse734
*/
func (r apiGetPartStudioBodyDetailsRequest) Execute() (BTExportModelBodiesResponse734, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTExportModelBodiesResponse734
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioBodyDetails")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
				
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	if r.rollbackBarIndex != nil {
		localVarQueryParams.Add("rollbackBarIndex", parameterToString(*r.rollbackBarIndex, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTExportModelBodiesResponse734
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioBoundingBoxesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	includeHidden *bool
	includeWireBodies *bool
	configuration *string
	linkDocumentId *string
}


func (r apiGetPartStudioBoundingBoxesRequest) IncludeHidden(includeHidden bool) apiGetPartStudioBoundingBoxesRequest {
	r.includeHidden = &includeHidden
	return r
}

func (r apiGetPartStudioBoundingBoxesRequest) IncludeWireBodies(includeWireBodies bool) apiGetPartStudioBoundingBoxesRequest {
	r.includeWireBodies = &includeWireBodies
	return r
}

func (r apiGetPartStudioBoundingBoxesRequest) Configuration(configuration string) apiGetPartStudioBoundingBoxesRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioBoundingBoxesRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioBoundingBoxesRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
GetPartStudioBoundingBoxes Mass properties of parts or a PartStudio.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiGetPartStudioBoundingBoxesRequest
*/
func (a *PartStudiosApiService) GetPartStudioBoundingBoxes(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioBoundingBoxesRequest {
	return apiGetPartStudioBoundingBoxesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTBoundingBoxInfo
*/
func (r apiGetPartStudioBoundingBoxesRequest) Execute() (BTBoundingBoxInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTBoundingBoxInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioBoundingBoxes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
				
	if r.includeHidden != nil {
		localVarQueryParams.Add("includeHidden", parameterToString(*r.includeHidden, ""))
	}
	if r.includeWireBodies != nil {
		localVarQueryParams.Add("includeWireBodies", parameterToString(*r.includeWireBodies, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTBoundingBoxInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioConfigurationRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
}


/*
GetPartStudioConfiguration Get Configuration
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiGetPartStudioConfigurationRequest
*/
func (a *PartStudiosApiService) GetPartStudioConfiguration(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioConfigurationRequest {
	return apiGetPartStudioConfigurationRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request

*/
func (r apiGetPartStudioConfigurationRequest) Execute() (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioConfiguration")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
type apiGetPartStudioFeatureSpecsRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
}


/*
GetPartStudioFeatureSpecs Get Feature Specs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiGetPartStudioFeatureSpecsRequest
*/
func (a *PartStudiosApiService) GetPartStudioFeatureSpecs(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioFeatureSpecsRequest {
	return apiGetPartStudioFeatureSpecsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTFeatureSpecsResponse664
*/
func (r apiGetPartStudioFeatureSpecsRequest) Execute() (BTFeatureSpecsResponse664, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureSpecsResponse664
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioFeatureSpecs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureSpecsResponse664
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioFeaturesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	featureId *[]string
	linkDocumentId *string
	noSketchGeometry *bool
}


func (r apiGetPartStudioFeaturesRequest) FeatureId(featureId []string) apiGetPartStudioFeaturesRequest {
	r.featureId = &featureId
	return r
}

func (r apiGetPartStudioFeaturesRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioFeaturesRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r apiGetPartStudioFeaturesRequest) NoSketchGeometry(noSketchGeometry bool) apiGetPartStudioFeaturesRequest {
	r.noSketchGeometry = &noSketchGeometry
	return r
}

/*
GetPartStudioFeatures Get Feature List
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiGetPartStudioFeaturesRequest
*/
func (a *PartStudiosApiService) GetPartStudioFeatures(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioFeaturesRequest {
	return apiGetPartStudioFeaturesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTFeatureListResponse2457
*/
func (r apiGetPartStudioFeaturesRequest) Execute() (BTFeatureListResponse2457, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureListResponse2457
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioFeatures")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
			
	if r.featureId != nil {
		t := *r.featureId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("featureId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("featureId", parameterToString(t, "multi"))
		}
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	if r.noSketchGeometry != nil {
		localVarQueryParams.Add("noSketchGeometry", parameterToString(*r.noSketchGeometry, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v2+json;charset=UTF-8;qs=0.2"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureListResponse2457
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioMassPropertiesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	partId *[]string
	massAsGroup *bool
	configuration *string
	linkDocumentId *string
}


func (r apiGetPartStudioMassPropertiesRequest) PartId(partId []string) apiGetPartStudioMassPropertiesRequest {
	r.partId = &partId
	return r
}

func (r apiGetPartStudioMassPropertiesRequest) MassAsGroup(massAsGroup bool) apiGetPartStudioMassPropertiesRequest {
	r.massAsGroup = &massAsGroup
	return r
}

func (r apiGetPartStudioMassPropertiesRequest) Configuration(configuration string) apiGetPartStudioMassPropertiesRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioMassPropertiesRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioMassPropertiesRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
GetPartStudioMassProperties Mass properties of parts or a PartStudio.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiGetPartStudioMassPropertiesRequest
*/
func (a *PartStudiosApiService) GetPartStudioMassProperties(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioMassPropertiesRequest {
	return apiGetPartStudioMassPropertiesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTMassPropertiesBulkInfo
*/
func (r apiGetPartStudioMassPropertiesRequest) Execute() (BTMassPropertiesBulkInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTMassPropertiesBulkInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioMassProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
				
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("partId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("partId", parameterToString(t, "multi"))
		}
	}
	if r.massAsGroup != nil {
		localVarQueryParams.Add("massAsGroup", parameterToString(*r.massAsGroup, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTMassPropertiesBulkInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioNamedViewsRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	eid string
	skipPerspective *bool
	includeSectionCutViews *bool
	linkDocumentId *string
}


func (r apiGetPartStudioNamedViewsRequest) SkipPerspective(skipPerspective bool) apiGetPartStudioNamedViewsRequest {
	r.skipPerspective = &skipPerspective
	return r
}

func (r apiGetPartStudioNamedViewsRequest) IncludeSectionCutViews(includeSectionCutViews bool) apiGetPartStudioNamedViewsRequest {
	r.includeSectionCutViews = &includeSectionCutViews
	return r
}

func (r apiGetPartStudioNamedViewsRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioNamedViewsRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
GetPartStudioNamedViews Get Named Views
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param eid Element ID.
@return apiGetPartStudioNamedViewsRequest
*/
func (a *PartStudiosApiService) GetPartStudioNamedViews(ctx _context.Context, did string, eid string) apiGetPartStudioNamedViewsRequest {
	return apiGetPartStudioNamedViewsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTNamedViewsInfo
*/
func (r apiGetPartStudioNamedViewsRequest) Execute() (BTNamedViewsInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTNamedViewsInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioNamedViews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/e/{eid}/namedViews"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
			
	if r.skipPerspective != nil {
		localVarQueryParams.Add("skipPerspective", parameterToString(*r.skipPerspective, ""))
	}
	if r.includeSectionCutViews != nil {
		localVarQueryParams.Add("includeSectionCutViews", parameterToString(*r.includeSectionCutViews, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTNamedViewsInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioShadedViewsRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	viewMatrix *string
	outputHeight *int32
	outputWidth *int32
	pixelSize *float64
	edges *string
	showAllParts *bool
	includeSurfaces *bool
	useAntiAliasing *bool
	configuration *string
	linkDocumentId *string
}


func (r apiGetPartStudioShadedViewsRequest) ViewMatrix(viewMatrix string) apiGetPartStudioShadedViewsRequest {
	r.viewMatrix = &viewMatrix
	return r
}

func (r apiGetPartStudioShadedViewsRequest) OutputHeight(outputHeight int32) apiGetPartStudioShadedViewsRequest {
	r.outputHeight = &outputHeight
	return r
}

func (r apiGetPartStudioShadedViewsRequest) OutputWidth(outputWidth int32) apiGetPartStudioShadedViewsRequest {
	r.outputWidth = &outputWidth
	return r
}

func (r apiGetPartStudioShadedViewsRequest) PixelSize(pixelSize float64) apiGetPartStudioShadedViewsRequest {
	r.pixelSize = &pixelSize
	return r
}

func (r apiGetPartStudioShadedViewsRequest) Edges(edges string) apiGetPartStudioShadedViewsRequest {
	r.edges = &edges
	return r
}

func (r apiGetPartStudioShadedViewsRequest) ShowAllParts(showAllParts bool) apiGetPartStudioShadedViewsRequest {
	r.showAllParts = &showAllParts
	return r
}

func (r apiGetPartStudioShadedViewsRequest) IncludeSurfaces(includeSurfaces bool) apiGetPartStudioShadedViewsRequest {
	r.includeSurfaces = &includeSurfaces
	return r
}

func (r apiGetPartStudioShadedViewsRequest) UseAntiAliasing(useAntiAliasing bool) apiGetPartStudioShadedViewsRequest {
	r.useAntiAliasing = &useAntiAliasing
	return r
}

func (r apiGetPartStudioShadedViewsRequest) Configuration(configuration string) apiGetPartStudioShadedViewsRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioShadedViewsRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioShadedViewsRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
GetPartStudioShadedViews Get Shaded Views
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiGetPartStudioShadedViewsRequest
*/
func (a *PartStudiosApiService) GetPartStudioShadedViews(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioShadedViewsRequest {
	return apiGetPartStudioShadedViewsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTShadedViewsInfo
*/
func (r apiGetPartStudioShadedViewsRequest) Execute() (BTShadedViewsInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTShadedViewsInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioShadedViews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
										
	if r.viewMatrix != nil {
		localVarQueryParams.Add("viewMatrix", parameterToString(*r.viewMatrix, ""))
	}
	if r.outputHeight != nil {
		localVarQueryParams.Add("outputHeight", parameterToString(*r.outputHeight, ""))
	}
	if r.outputWidth != nil {
		localVarQueryParams.Add("outputWidth", parameterToString(*r.outputWidth, ""))
	}
	if r.pixelSize != nil {
		localVarQueryParams.Add("pixelSize", parameterToString(*r.pixelSize, ""))
	}
	if r.edges != nil {
		localVarQueryParams.Add("edges", parameterToString(*r.edges, ""))
	}
	if r.showAllParts != nil {
		localVarQueryParams.Add("showAllParts", parameterToString(*r.showAllParts, ""))
	}
	if r.includeSurfaces != nil {
		localVarQueryParams.Add("includeSurfaces", parameterToString(*r.includeSurfaces, ""))
	}
	if r.useAntiAliasing != nil {
		localVarQueryParams.Add("useAntiAliasing", parameterToString(*r.useAntiAliasing, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTShadedViewsInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioTessellatedEdgesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	angleTolerance *float64
	chordTolerance *float64
	partId *[]string
	edgeId *[]string
	configuration *string
	linkDocumentId *string
}


func (r apiGetPartStudioTessellatedEdgesRequest) AngleTolerance(angleTolerance float64) apiGetPartStudioTessellatedEdgesRequest {
	r.angleTolerance = &angleTolerance
	return r
}

func (r apiGetPartStudioTessellatedEdgesRequest) ChordTolerance(chordTolerance float64) apiGetPartStudioTessellatedEdgesRequest {
	r.chordTolerance = &chordTolerance
	return r
}

func (r apiGetPartStudioTessellatedEdgesRequest) PartId(partId []string) apiGetPartStudioTessellatedEdgesRequest {
	r.partId = &partId
	return r
}

func (r apiGetPartStudioTessellatedEdgesRequest) EdgeId(edgeId []string) apiGetPartStudioTessellatedEdgesRequest {
	r.edgeId = &edgeId
	return r
}

func (r apiGetPartStudioTessellatedEdgesRequest) Configuration(configuration string) apiGetPartStudioTessellatedEdgesRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioTessellatedEdgesRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioTessellatedEdgesRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

/*
GetPartStudioTessellatedEdges Tesselated edges from a PartStudio.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiGetPartStudioTessellatedEdgesRequest
*/
func (a *PartStudiosApiService) GetPartStudioTessellatedEdges(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioTessellatedEdgesRequest {
	return apiGetPartStudioTessellatedEdgesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTExportTessellatedEdgesResponse327
*/
func (r apiGetPartStudioTessellatedEdgesRequest) Execute() (BTExportTessellatedEdgesResponse327, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTExportTessellatedEdgesResponse327
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioTessellatedEdges")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
						
	if r.angleTolerance != nil {
		localVarQueryParams.Add("angleTolerance", parameterToString(*r.angleTolerance, ""))
	}
	if r.chordTolerance != nil {
		localVarQueryParams.Add("chordTolerance", parameterToString(*r.chordTolerance, ""))
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("partId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("partId", parameterToString(t, "multi"))
		}
	}
	if r.edgeId != nil {
		t := *r.edgeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("edgeId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("edgeId", parameterToString(t, "multi"))
		}
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTExportTessellatedEdgesResponse327
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiGetPartStudioTessellatedFacesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	angleTolerance *float64
	chordTolerance *float64
	maxFacetWidth *float64
	outputVertexNormals *bool
	outputFacetNormals *bool
	outputTextureCoordinates *bool
	outputFaceAppearances *bool
	outputIndexTable *bool
	partId *[]string
	faceId *[]string
	outputErrorFaces *bool
	configuration *string
	linkDocumentId *string
	body *string
}


func (r apiGetPartStudioTessellatedFacesRequest) AngleTolerance(angleTolerance float64) apiGetPartStudioTessellatedFacesRequest {
	r.angleTolerance = &angleTolerance
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) ChordTolerance(chordTolerance float64) apiGetPartStudioTessellatedFacesRequest {
	r.chordTolerance = &chordTolerance
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) MaxFacetWidth(maxFacetWidth float64) apiGetPartStudioTessellatedFacesRequest {
	r.maxFacetWidth = &maxFacetWidth
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputVertexNormals(outputVertexNormals bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputVertexNormals = &outputVertexNormals
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputFacetNormals(outputFacetNormals bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputFacetNormals = &outputFacetNormals
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputTextureCoordinates(outputTextureCoordinates bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputTextureCoordinates = &outputTextureCoordinates
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputFaceAppearances(outputFaceAppearances bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputFaceAppearances = &outputFaceAppearances
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputIndexTable(outputIndexTable bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputIndexTable = &outputIndexTable
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) PartId(partId []string) apiGetPartStudioTessellatedFacesRequest {
	r.partId = &partId
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) FaceId(faceId []string) apiGetPartStudioTessellatedFacesRequest {
	r.faceId = &faceId
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) OutputErrorFaces(outputErrorFaces bool) apiGetPartStudioTessellatedFacesRequest {
	r.outputErrorFaces = &outputErrorFaces
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) Configuration(configuration string) apiGetPartStudioTessellatedFacesRequest {
	r.configuration = &configuration
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) LinkDocumentId(linkDocumentId string) apiGetPartStudioTessellatedFacesRequest {
	r.linkDocumentId = &linkDocumentId
	return r
}

func (r apiGetPartStudioTessellatedFacesRequest) Body(body string) apiGetPartStudioTessellatedFacesRequest {
	r.body = &body
	return r
}

/*
GetPartStudioTessellatedFaces Tesselated faces of the parts in the Part Studio.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiGetPartStudioTessellatedFacesRequest
*/
func (a *PartStudiosApiService) GetPartStudioTessellatedFaces(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiGetPartStudioTessellatedFacesRequest {
	return apiGetPartStudioTessellatedFacesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTExportTessellatedFacesResponse898
*/
func (r apiGetPartStudioTessellatedFacesRequest) Execute() (BTExportTessellatedFacesResponse898, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTExportTessellatedFacesResponse898
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.GetPartStudioTessellatedFaces")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
														
	if r.angleTolerance != nil {
		localVarQueryParams.Add("angleTolerance", parameterToString(*r.angleTolerance, ""))
	}
	if r.chordTolerance != nil {
		localVarQueryParams.Add("chordTolerance", parameterToString(*r.chordTolerance, ""))
	}
	if r.maxFacetWidth != nil {
		localVarQueryParams.Add("maxFacetWidth", parameterToString(*r.maxFacetWidth, ""))
	}
	if r.outputVertexNormals != nil {
		localVarQueryParams.Add("outputVertexNormals", parameterToString(*r.outputVertexNormals, ""))
	}
	if r.outputFacetNormals != nil {
		localVarQueryParams.Add("outputFacetNormals", parameterToString(*r.outputFacetNormals, ""))
	}
	if r.outputTextureCoordinates != nil {
		localVarQueryParams.Add("outputTextureCoordinates", parameterToString(*r.outputTextureCoordinates, ""))
	}
	if r.outputFaceAppearances != nil {
		localVarQueryParams.Add("outputFaceAppearances", parameterToString(*r.outputFaceAppearances, ""))
	}
	if r.outputIndexTable != nil {
		localVarQueryParams.Add("outputIndexTable", parameterToString(*r.outputIndexTable, ""))
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("partId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("partId", parameterToString(t, "multi"))
		}
	}
	if r.faceId != nil {
		t := *r.faceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("faceId", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("faceId", parameterToString(t, "multi"))
		}
	}
	if r.outputErrorFaces != nil {
		localVarQueryParams.Add("outputErrorFaces", parameterToString(*r.outputErrorFaces, ""))
	}
	if r.configuration != nil {
		localVarQueryParams.Add("configuration", parameterToString(*r.configuration, ""))
	}
	if r.linkDocumentId != nil {
		localVarQueryParams.Add("linkDocumentId", parameterToString(*r.linkDocumentId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTExportTessellatedFacesResponse898
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiTranslateIdsRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	bTIdTranslationParams *BTIdTranslationParams
}


func (r apiTranslateIdsRequest) BTIdTranslationParams(bTIdTranslationParams BTIdTranslationParams) apiTranslateIdsRequest {
	r.bTIdTranslationParams = &bTIdTranslationParams
	return r
}

/*
TranslateIds Id Translations
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wvm One of w or v or m corresponding to whether a workspace or version or microversion was entered.
 * @param wvmid Workspace (w), Version (v) or Microversion (m) ID.
 * @param eid Element ID.
@return apiTranslateIdsRequest
*/
func (a *PartStudiosApiService) TranslateIds(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiTranslateIdsRequest {
	return apiTranslateIdsRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTIdTranslationInfo
*/
func (r apiTranslateIdsRequest) Execute() (BTIdTranslationInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTIdTranslationInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.TranslateIds")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	if r.bTIdTranslationParams == nil {
		return localVarReturnValue, nil, reportError("bTIdTranslationParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bTIdTranslationParams
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTIdTranslationInfo
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUpdateFeaturesRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wid string
	eid string
	body *string
}


func (r apiUpdateFeaturesRequest) Body(body string) apiUpdateFeaturesRequest {
	r.body = &body
	return r
}

/*
UpdateFeatures Update Features
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wid Workspace ID.
 * @param eid Element ID.
@return apiUpdateFeaturesRequest
*/
func (a *PartStudiosApiService) UpdateFeatures(ctx _context.Context, did string, wid string, eid string) apiUpdateFeaturesRequest {
	return apiUpdateFeaturesRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTUpdateFeaturesResponse1333
*/
func (r apiUpdateFeaturesRequest) Execute() (BTUpdateFeaturesResponse1333, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTUpdateFeaturesResponse1333
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.UpdateFeatures")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTUpdateFeaturesResponse1333
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUpdatePartStudioConfigurationRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wvm string
	wvmid string
	eid string
	body *string
}


func (r apiUpdatePartStudioConfigurationRequest) Body(body string) apiUpdatePartStudioConfigurationRequest {
	r.body = &body
	return r
}

/*
UpdatePartStudioConfiguration Update Configuration
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did
 * @param wvm
 * @param wvmid
 * @param eid
@return apiUpdatePartStudioConfigurationRequest
*/
func (a *PartStudiosApiService) UpdatePartStudioConfiguration(ctx _context.Context, did string, wvm string, wvmid string, eid string) apiUpdatePartStudioConfigurationRequest {
	return apiUpdatePartStudioConfigurationRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wvm: wvm,
		wvmid: wvmid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTConfigurationResponse2019
*/
func (r apiUpdatePartStudioConfigurationRequest) Execute() (BTConfigurationResponse2019, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTConfigurationResponse2019
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.UpdatePartStudioConfiguration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvm"+"}", _neturl.QueryEscape(parameterToString(r.wvm, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wvmid"+"}", _neturl.QueryEscape(parameterToString(r.wvmid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTConfigurationResponse2019
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUpdatePartStudioFeatureRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wid string
	eid string
	fid string
	body *string
}


func (r apiUpdatePartStudioFeatureRequest) Body(body string) apiUpdatePartStudioFeatureRequest {
	r.body = &body
	return r
}

/*
UpdatePartStudioFeature Update Feature
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wid Workspace ID.
 * @param eid Element ID.
 * @param fid The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure
@return apiUpdatePartStudioFeatureRequest
*/
func (a *PartStudiosApiService) UpdatePartStudioFeature(ctx _context.Context, did string, wid string, eid string, fid string) apiUpdatePartStudioFeatureRequest {
	return apiUpdatePartStudioFeatureRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
		eid: eid,
		fid: fid,
	}
}

/*
Execute executes the request
 @return BTFeatureDefinitionResponse1617
*/
func (r apiUpdatePartStudioFeatureRequest) Execute() (BTFeatureDefinitionResponse1617, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTFeatureDefinitionResponse1617
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.UpdatePartStudioFeature")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fid"+"}", _neturl.QueryEscape(parameterToString(r.fid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTFeatureDefinitionResponse1617
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiUpdateRollbackRequest struct {
	ctx _context.Context
	apiService *PartStudiosApiService
	did string
	wid string
	eid string
	body *string
}


func (r apiUpdateRollbackRequest) Body(body string) apiUpdateRollbackRequest {
	r.body = &body
	return r
}

/*
UpdateRollback Update Feature Rollback
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param did Document ID.
 * @param wid Workspace ID.
 * @param eid Element ID.
@return apiUpdateRollbackRequest
*/
func (a *PartStudiosApiService) UpdateRollback(ctx _context.Context, did string, wid string, eid string) apiUpdateRollbackRequest {
	return apiUpdateRollbackRequest{
		apiService: a,
		ctx: ctx,
		did: did,
		wid: wid,
		eid: eid,
	}
}

/*
Execute executes the request
 @return BTSetFeatureRollbackResponse1042
*/
func (r apiUpdateRollbackRequest) Execute() (BTSetFeatureRollbackResponse1042, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BTSetFeatureRollbackResponse1042
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "PartStudiosApiService.UpdateRollback")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback"
	localVarPath = strings.Replace(localVarPath, "{"+"did"+"}", _neturl.QueryEscape(parameterToString(r.did, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"wid"+"}", _neturl.QueryEscape(parameterToString(r.wid, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"eid"+"}", _neturl.QueryEscape(parameterToString(r.eid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	
	
	
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BTSetFeatureRollbackResponse1042
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
