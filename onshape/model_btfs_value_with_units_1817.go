/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTFSValueWithUnits1817 struct for BTFSValueWithUnits1817
type BTFSValueWithUnits1817 struct {
	BTFSValue1888
	BtType *string `json:"btType,omitempty"`
	QuantityType *string `json:"quantityType,omitempty"`
	UnitToPower *map[string]int32 `json:"unitToPower,omitempty"`
	Value *float64 `json:"value,omitempty"`
	ValueObject *float64 `json:"valueObject,omitempty"`
}

// NewBTFSValueWithUnits1817 instantiates a new BTFSValueWithUnits1817 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFSValueWithUnits1817() *BTFSValueWithUnits1817 {
	this := BTFSValueWithUnits1817{}
	return &this
}

// NewBTFSValueWithUnits1817WithDefaults instantiates a new BTFSValueWithUnits1817 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFSValueWithUnits1817WithDefaults() *BTFSValueWithUnits1817 {
	this := BTFSValueWithUnits1817{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFSValueWithUnits1817) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueWithUnits1817) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFSValueWithUnits1817) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFSValueWithUnits1817) SetBtType(v string) {
	o.BtType = &v
}

// GetQuantityType returns the QuantityType field value if set, zero value otherwise.
func (o *BTFSValueWithUnits1817) GetQuantityType() string {
	if o == nil || o.QuantityType == nil {
		var ret string
		return ret
	}
	return *o.QuantityType
}

// GetQuantityTypeOk returns a tuple with the QuantityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueWithUnits1817) GetQuantityTypeOk() (*string, bool) {
	if o == nil || o.QuantityType == nil {
		return nil, false
	}
	return o.QuantityType, true
}

// HasQuantityType returns a boolean if a field has been set.
func (o *BTFSValueWithUnits1817) HasQuantityType() bool {
	if o != nil && o.QuantityType != nil {
		return true
	}

	return false
}

// SetQuantityType gets a reference to the given string and assigns it to the QuantityType field.
func (o *BTFSValueWithUnits1817) SetQuantityType(v string) {
	o.QuantityType = &v
}

// GetUnitToPower returns the UnitToPower field value if set, zero value otherwise.
func (o *BTFSValueWithUnits1817) GetUnitToPower() map[string]int32 {
	if o == nil || o.UnitToPower == nil {
		var ret map[string]int32
		return ret
	}
	return *o.UnitToPower
}

// GetUnitToPowerOk returns a tuple with the UnitToPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueWithUnits1817) GetUnitToPowerOk() (*map[string]int32, bool) {
	if o == nil || o.UnitToPower == nil {
		return nil, false
	}
	return o.UnitToPower, true
}

// HasUnitToPower returns a boolean if a field has been set.
func (o *BTFSValueWithUnits1817) HasUnitToPower() bool {
	if o != nil && o.UnitToPower != nil {
		return true
	}

	return false
}

// SetUnitToPower gets a reference to the given map[string]int32 and assigns it to the UnitToPower field.
func (o *BTFSValueWithUnits1817) SetUnitToPower(v map[string]int32) {
	o.UnitToPower = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTFSValueWithUnits1817) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueWithUnits1817) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTFSValueWithUnits1817) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *BTFSValueWithUnits1817) SetValue(v float64) {
	o.Value = &v
}

// GetValueObject returns the ValueObject field value if set, zero value otherwise.
func (o *BTFSValueWithUnits1817) GetValueObject() float64 {
	if o == nil || o.ValueObject == nil {
		var ret float64
		return ret
	}
	return *o.ValueObject
}

// GetValueObjectOk returns a tuple with the ValueObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueWithUnits1817) GetValueObjectOk() (*float64, bool) {
	if o == nil || o.ValueObject == nil {
		return nil, false
	}
	return o.ValueObject, true
}

// HasValueObject returns a boolean if a field has been set.
func (o *BTFSValueWithUnits1817) HasValueObject() bool {
	if o != nil && o.ValueObject != nil {
		return true
	}

	return false
}

// SetValueObject gets a reference to the given float64 and assigns it to the ValueObject field.
func (o *BTFSValueWithUnits1817) SetValueObject(v float64) {
	o.ValueObject = &v
}

func (o BTFSValueWithUnits1817) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
	if errBTFSValue1888 != nil {
		return []byte{}, errBTFSValue1888
	}
	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
	if errBTFSValue1888 != nil {
		return []byte{}, errBTFSValue1888
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.QuantityType != nil {
		toSerialize["quantityType"] = o.QuantityType
	}
	if o.UnitToPower != nil {
		toSerialize["unitToPower"] = o.UnitToPower
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueObject != nil {
		toSerialize["valueObject"] = o.ValueObject
	}
	return json.Marshal(toSerialize)
}

type NullableBTFSValueWithUnits1817 struct {
	value *BTFSValueWithUnits1817
	isSet bool
}

func (v NullableBTFSValueWithUnits1817) Get() *BTFSValueWithUnits1817 {
	return v.value
}

func (v *NullableBTFSValueWithUnits1817) Set(val *BTFSValueWithUnits1817) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFSValueWithUnits1817) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFSValueWithUnits1817) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFSValueWithUnits1817(val *BTFSValueWithUnits1817) *NullableBTFSValueWithUnits1817 {
	return &NullableBTFSValueWithUnits1817{value: val, isSet: true}
}

func (v NullableBTFSValueWithUnits1817) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFSValueWithUnits1817) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
