/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementLoopFor3278 struct for BTPStatementLoopFor3278
type BTPStatementLoopFor3278 struct {
	BTPStatementLoop277
	BtType *string `json:"btType,omitempty"`
	Condition *BTPExpression9 `json:"condition,omitempty"`
	Increment *BTPStatement269 `json:"increment,omitempty"`
	Initialization *BTPStatement269 `json:"initialization,omitempty"`
	SpaceAfterInitialization *BTPSpace10 `json:"spaceAfterInitialization,omitempty"`
	SpaceBeforeCondition *BTPSpace10 `json:"spaceBeforeCondition,omitempty"`
	SpaceBeforeIncrement *BTPSpace10 `json:"spaceBeforeIncrement,omitempty"`
}

// NewBTPStatementLoopFor3278 instantiates a new BTPStatementLoopFor3278 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementLoopFor3278() *BTPStatementLoopFor3278 {
	this := BTPStatementLoopFor3278{}
	return &this
}

// NewBTPStatementLoopFor3278WithDefaults instantiates a new BTPStatementLoopFor3278 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementLoopFor3278WithDefaults() *BTPStatementLoopFor3278 {
	this := BTPStatementLoopFor3278{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementLoopFor3278) SetBtType(v string) {
	o.BtType = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetCondition() BTPExpression9 {
	if o == nil || o.Condition == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetConditionOk() (*BTPExpression9, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given BTPExpression9 and assigns it to the Condition field.
func (o *BTPStatementLoopFor3278) SetCondition(v BTPExpression9) {
	o.Condition = &v
}

// GetIncrement returns the Increment field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetIncrement() BTPStatement269 {
	if o == nil || o.Increment == nil {
		var ret BTPStatement269
		return ret
	}
	return *o.Increment
}

// GetIncrementOk returns a tuple with the Increment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetIncrementOk() (*BTPStatement269, bool) {
	if o == nil || o.Increment == nil {
		return nil, false
	}
	return o.Increment, true
}

// HasIncrement returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasIncrement() bool {
	if o != nil && o.Increment != nil {
		return true
	}

	return false
}

// SetIncrement gets a reference to the given BTPStatement269 and assigns it to the Increment field.
func (o *BTPStatementLoopFor3278) SetIncrement(v BTPStatement269) {
	o.Increment = &v
}

// GetInitialization returns the Initialization field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetInitialization() BTPStatement269 {
	if o == nil || o.Initialization == nil {
		var ret BTPStatement269
		return ret
	}
	return *o.Initialization
}

// GetInitializationOk returns a tuple with the Initialization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetInitializationOk() (*BTPStatement269, bool) {
	if o == nil || o.Initialization == nil {
		return nil, false
	}
	return o.Initialization, true
}

// HasInitialization returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasInitialization() bool {
	if o != nil && o.Initialization != nil {
		return true
	}

	return false
}

// SetInitialization gets a reference to the given BTPStatement269 and assigns it to the Initialization field.
func (o *BTPStatementLoopFor3278) SetInitialization(v BTPStatement269) {
	o.Initialization = &v
}

// GetSpaceAfterInitialization returns the SpaceAfterInitialization field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetSpaceAfterInitialization() BTPSpace10 {
	if o == nil || o.SpaceAfterInitialization == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterInitialization
}

// GetSpaceAfterInitializationOk returns a tuple with the SpaceAfterInitialization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetSpaceAfterInitializationOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterInitialization == nil {
		return nil, false
	}
	return o.SpaceAfterInitialization, true
}

// HasSpaceAfterInitialization returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasSpaceAfterInitialization() bool {
	if o != nil && o.SpaceAfterInitialization != nil {
		return true
	}

	return false
}

// SetSpaceAfterInitialization gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterInitialization field.
func (o *BTPStatementLoopFor3278) SetSpaceAfterInitialization(v BTPSpace10) {
	o.SpaceAfterInitialization = &v
}

// GetSpaceBeforeCondition returns the SpaceBeforeCondition field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetSpaceBeforeCondition() BTPSpace10 {
	if o == nil || o.SpaceBeforeCondition == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBeforeCondition
}

// GetSpaceBeforeConditionOk returns a tuple with the SpaceBeforeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetSpaceBeforeConditionOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBeforeCondition == nil {
		return nil, false
	}
	return o.SpaceBeforeCondition, true
}

// HasSpaceBeforeCondition returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasSpaceBeforeCondition() bool {
	if o != nil && o.SpaceBeforeCondition != nil {
		return true
	}

	return false
}

// SetSpaceBeforeCondition gets a reference to the given BTPSpace10 and assigns it to the SpaceBeforeCondition field.
func (o *BTPStatementLoopFor3278) SetSpaceBeforeCondition(v BTPSpace10) {
	o.SpaceBeforeCondition = &v
}

// GetSpaceBeforeIncrement returns the SpaceBeforeIncrement field value if set, zero value otherwise.
func (o *BTPStatementLoopFor3278) GetSpaceBeforeIncrement() BTPSpace10 {
	if o == nil || o.SpaceBeforeIncrement == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBeforeIncrement
}

// GetSpaceBeforeIncrementOk returns a tuple with the SpaceBeforeIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopFor3278) GetSpaceBeforeIncrementOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBeforeIncrement == nil {
		return nil, false
	}
	return o.SpaceBeforeIncrement, true
}

// HasSpaceBeforeIncrement returns a boolean if a field has been set.
func (o *BTPStatementLoopFor3278) HasSpaceBeforeIncrement() bool {
	if o != nil && o.SpaceBeforeIncrement != nil {
		return true
	}

	return false
}

// SetSpaceBeforeIncrement gets a reference to the given BTPSpace10 and assigns it to the SpaceBeforeIncrement field.
func (o *BTPStatementLoopFor3278) SetSpaceBeforeIncrement(v BTPSpace10) {
	o.SpaceBeforeIncrement = &v
}

func (o BTPStatementLoopFor3278) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatementLoop277, errBTPStatementLoop277 := json.Marshal(o.BTPStatementLoop277)
	if errBTPStatementLoop277 != nil {
		return []byte{}, errBTPStatementLoop277
	}
	errBTPStatementLoop277 = json.Unmarshal([]byte(serializedBTPStatementLoop277), &toSerialize)
	if errBTPStatementLoop277 != nil {
		return []byte{}, errBTPStatementLoop277
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if o.Increment != nil {
		toSerialize["increment"] = o.Increment
	}
	if o.Initialization != nil {
		toSerialize["initialization"] = o.Initialization
	}
	if o.SpaceAfterInitialization != nil {
		toSerialize["spaceAfterInitialization"] = o.SpaceAfterInitialization
	}
	if o.SpaceBeforeCondition != nil {
		toSerialize["spaceBeforeCondition"] = o.SpaceBeforeCondition
	}
	if o.SpaceBeforeIncrement != nil {
		toSerialize["spaceBeforeIncrement"] = o.SpaceBeforeIncrement
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementLoopFor3278 struct {
	value *BTPStatementLoopFor3278
	isSet bool
}

func (v NullableBTPStatementLoopFor3278) Get() *BTPStatementLoopFor3278 {
	return v.value
}

func (v *NullableBTPStatementLoopFor3278) Set(val *BTPStatementLoopFor3278) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementLoopFor3278) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementLoopFor3278) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementLoopFor3278(val *BTPStatementLoopFor3278) *NullableBTPStatementLoopFor3278 {
	return &NullableBTPStatementLoopFor3278{value: val, isSet: true}
}

func (v NullableBTPStatementLoopFor3278) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementLoopFor3278) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
