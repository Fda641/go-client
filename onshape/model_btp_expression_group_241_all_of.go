/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionGroup241AllOf struct for BTPExpressionGroup241AllOf
type BTPExpressionGroup241AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Content *BTPExpression9 `json:"content,omitempty"`
}

// NewBTPExpressionGroup241AllOf instantiates a new BTPExpressionGroup241AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionGroup241AllOf() *BTPExpressionGroup241AllOf {
	this := BTPExpressionGroup241AllOf{}
	return &this
}

// NewBTPExpressionGroup241AllOfWithDefaults instantiates a new BTPExpressionGroup241AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionGroup241AllOfWithDefaults() *BTPExpressionGroup241AllOf {
	this := BTPExpressionGroup241AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionGroup241AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionGroup241AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionGroup241AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionGroup241AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *BTPExpressionGroup241AllOf) GetContent() BTPExpression9 {
	if o == nil || o.Content == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionGroup241AllOf) GetContentOk() (*BTPExpression9, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *BTPExpressionGroup241AllOf) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given BTPExpression9 and assigns it to the Content field.
func (o *BTPExpressionGroup241AllOf) SetContent(v BTPExpression9) {
	o.Content = &v
}

func (o BTPExpressionGroup241AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionGroup241AllOf struct {
	value *BTPExpressionGroup241AllOf
	isSet bool
}

func (v NullableBTPExpressionGroup241AllOf) Get() *BTPExpressionGroup241AllOf {
	return v.value
}

func (v *NullableBTPExpressionGroup241AllOf) Set(val *BTPExpressionGroup241AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionGroup241AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionGroup241AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionGroup241AllOf(val *BTPExpressionGroup241AllOf) *NullableBTPExpressionGroup241AllOf {
	return &NullableBTPExpressionGroup241AllOf{value: val, isSet: true}
}

func (v NullableBTPExpressionGroup241AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionGroup241AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
