/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTOwner3114 struct for BTOwner3114
type BTOwner3114 struct {
	BtType *string `json:"btType,omitempty"`
	OwnerId *string `json:"ownerId,omitempty"`
	OwnerType *string `json:"ownerType,omitempty"`
	OwnerTypeOrdinal *int32 `json:"ownerTypeOrdinal,omitempty"`
}

// NewBTOwner3114 instantiates a new BTOwner3114 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTOwner3114() *BTOwner3114 {
	this := BTOwner3114{}
	return &this
}

// NewBTOwner3114WithDefaults instantiates a new BTOwner3114 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTOwner3114WithDefaults() *BTOwner3114 {
	this := BTOwner3114{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTOwner3114) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOwner3114) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTOwner3114) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTOwner3114) SetBtType(v string) {
	o.BtType = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *BTOwner3114) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOwner3114) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *BTOwner3114) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *BTOwner3114) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetOwnerType returns the OwnerType field value if set, zero value otherwise.
func (o *BTOwner3114) GetOwnerType() string {
	if o == nil || o.OwnerType == nil {
		var ret string
		return ret
	}
	return *o.OwnerType
}

// GetOwnerTypeOk returns a tuple with the OwnerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOwner3114) GetOwnerTypeOk() (*string, bool) {
	if o == nil || o.OwnerType == nil {
		return nil, false
	}
	return o.OwnerType, true
}

// HasOwnerType returns a boolean if a field has been set.
func (o *BTOwner3114) HasOwnerType() bool {
	if o != nil && o.OwnerType != nil {
		return true
	}

	return false
}

// SetOwnerType gets a reference to the given string and assigns it to the OwnerType field.
func (o *BTOwner3114) SetOwnerType(v string) {
	o.OwnerType = &v
}

// GetOwnerTypeOrdinal returns the OwnerTypeOrdinal field value if set, zero value otherwise.
func (o *BTOwner3114) GetOwnerTypeOrdinal() int32 {
	if o == nil || o.OwnerTypeOrdinal == nil {
		var ret int32
		return ret
	}
	return *o.OwnerTypeOrdinal
}

// GetOwnerTypeOrdinalOk returns a tuple with the OwnerTypeOrdinal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTOwner3114) GetOwnerTypeOrdinalOk() (*int32, bool) {
	if o == nil || o.OwnerTypeOrdinal == nil {
		return nil, false
	}
	return o.OwnerTypeOrdinal, true
}

// HasOwnerTypeOrdinal returns a boolean if a field has been set.
func (o *BTOwner3114) HasOwnerTypeOrdinal() bool {
	if o != nil && o.OwnerTypeOrdinal != nil {
		return true
	}

	return false
}

// SetOwnerTypeOrdinal gets a reference to the given int32 and assigns it to the OwnerTypeOrdinal field.
func (o *BTOwner3114) SetOwnerTypeOrdinal(v int32) {
	o.OwnerTypeOrdinal = &v
}

func (o BTOwner3114) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.OwnerType != nil {
		toSerialize["ownerType"] = o.OwnerType
	}
	if o.OwnerTypeOrdinal != nil {
		toSerialize["ownerTypeOrdinal"] = o.OwnerTypeOrdinal
	}
	return json.Marshal(toSerialize)
}

type NullableBTOwner3114 struct {
	value *BTOwner3114
	isSet bool
}

func (v NullableBTOwner3114) Get() *BTOwner3114 {
	return v.value
}

func (v *NullableBTOwner3114) Set(val *BTOwner3114) {
	v.value = val
	v.isSet = true
}

func (v NullableBTOwner3114) IsSet() bool {
	return v.isSet
}

func (v *NullableBTOwner3114) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTOwner3114(val *BTOwner3114) *NullableBTOwner3114 {
	return &NullableBTOwner3114{value: val, isSet: true}
}

func (v NullableBTOwner3114) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTOwner3114) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
