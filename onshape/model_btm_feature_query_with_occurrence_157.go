/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMFeatureQueryWithOccurrence157 struct for BTMFeatureQueryWithOccurrence157
type BTMFeatureQueryWithOccurrence157 struct {
	BTMIndividualQueryWithOccurrenceBase904
	BtType *string `json:"btType,omitempty"`
	FeatureId *string `json:"featureId,omitempty"`
	FeatureIdWithOccurrence *string `json:"featureIdWithOccurrence,omitempty"`
	PartStudioMateConnectorQuery *bool `json:"partStudioMateConnectorQuery,omitempty"`
	QueryData *string `json:"queryData,omitempty"`
}

// NewBTMFeatureQueryWithOccurrence157 instantiates a new BTMFeatureQueryWithOccurrence157 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMFeatureQueryWithOccurrence157() *BTMFeatureQueryWithOccurrence157 {
	this := BTMFeatureQueryWithOccurrence157{}
	return &this
}

// NewBTMFeatureQueryWithOccurrence157WithDefaults instantiates a new BTMFeatureQueryWithOccurrence157 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMFeatureQueryWithOccurrence157WithDefaults() *BTMFeatureQueryWithOccurrence157 {
	this := BTMFeatureQueryWithOccurrence157{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMFeatureQueryWithOccurrence157) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeatureQueryWithOccurrence157) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMFeatureQueryWithOccurrence157) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMFeatureQueryWithOccurrence157) SetBtType(v string) {
	o.BtType = &v
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *BTMFeatureQueryWithOccurrence157) GetFeatureId() string {
	if o == nil || o.FeatureId == nil {
		var ret string
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeatureQueryWithOccurrence157) GetFeatureIdOk() (*string, bool) {
	if o == nil || o.FeatureId == nil {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *BTMFeatureQueryWithOccurrence157) HasFeatureId() bool {
	if o != nil && o.FeatureId != nil {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given string and assigns it to the FeatureId field.
func (o *BTMFeatureQueryWithOccurrence157) SetFeatureId(v string) {
	o.FeatureId = &v
}

// GetFeatureIdWithOccurrence returns the FeatureIdWithOccurrence field value if set, zero value otherwise.
func (o *BTMFeatureQueryWithOccurrence157) GetFeatureIdWithOccurrence() string {
	if o == nil || o.FeatureIdWithOccurrence == nil {
		var ret string
		return ret
	}
	return *o.FeatureIdWithOccurrence
}

// GetFeatureIdWithOccurrenceOk returns a tuple with the FeatureIdWithOccurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeatureQueryWithOccurrence157) GetFeatureIdWithOccurrenceOk() (*string, bool) {
	if o == nil || o.FeatureIdWithOccurrence == nil {
		return nil, false
	}
	return o.FeatureIdWithOccurrence, true
}

// HasFeatureIdWithOccurrence returns a boolean if a field has been set.
func (o *BTMFeatureQueryWithOccurrence157) HasFeatureIdWithOccurrence() bool {
	if o != nil && o.FeatureIdWithOccurrence != nil {
		return true
	}

	return false
}

// SetFeatureIdWithOccurrence gets a reference to the given string and assigns it to the FeatureIdWithOccurrence field.
func (o *BTMFeatureQueryWithOccurrence157) SetFeatureIdWithOccurrence(v string) {
	o.FeatureIdWithOccurrence = &v
}

// GetPartStudioMateConnectorQuery returns the PartStudioMateConnectorQuery field value if set, zero value otherwise.
func (o *BTMFeatureQueryWithOccurrence157) GetPartStudioMateConnectorQuery() bool {
	if o == nil || o.PartStudioMateConnectorQuery == nil {
		var ret bool
		return ret
	}
	return *o.PartStudioMateConnectorQuery
}

// GetPartStudioMateConnectorQueryOk returns a tuple with the PartStudioMateConnectorQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeatureQueryWithOccurrence157) GetPartStudioMateConnectorQueryOk() (*bool, bool) {
	if o == nil || o.PartStudioMateConnectorQuery == nil {
		return nil, false
	}
	return o.PartStudioMateConnectorQuery, true
}

// HasPartStudioMateConnectorQuery returns a boolean if a field has been set.
func (o *BTMFeatureQueryWithOccurrence157) HasPartStudioMateConnectorQuery() bool {
	if o != nil && o.PartStudioMateConnectorQuery != nil {
		return true
	}

	return false
}

// SetPartStudioMateConnectorQuery gets a reference to the given bool and assigns it to the PartStudioMateConnectorQuery field.
func (o *BTMFeatureQueryWithOccurrence157) SetPartStudioMateConnectorQuery(v bool) {
	o.PartStudioMateConnectorQuery = &v
}

// GetQueryData returns the QueryData field value if set, zero value otherwise.
func (o *BTMFeatureQueryWithOccurrence157) GetQueryData() string {
	if o == nil || o.QueryData == nil {
		var ret string
		return ret
	}
	return *o.QueryData
}

// GetQueryDataOk returns a tuple with the QueryData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMFeatureQueryWithOccurrence157) GetQueryDataOk() (*string, bool) {
	if o == nil || o.QueryData == nil {
		return nil, false
	}
	return o.QueryData, true
}

// HasQueryData returns a boolean if a field has been set.
func (o *BTMFeatureQueryWithOccurrence157) HasQueryData() bool {
	if o != nil && o.QueryData != nil {
		return true
	}

	return false
}

// SetQueryData gets a reference to the given string and assigns it to the QueryData field.
func (o *BTMFeatureQueryWithOccurrence157) SetQueryData(v string) {
	o.QueryData = &v
}

func (o BTMFeatureQueryWithOccurrence157) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMIndividualQueryWithOccurrenceBase904, errBTMIndividualQueryWithOccurrenceBase904 := json.Marshal(o.BTMIndividualQueryWithOccurrenceBase904)
	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
		return []byte{}, errBTMIndividualQueryWithOccurrenceBase904
	}
	errBTMIndividualQueryWithOccurrenceBase904 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrenceBase904), &toSerialize)
	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
		return []byte{}, errBTMIndividualQueryWithOccurrenceBase904
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.FeatureId != nil {
		toSerialize["featureId"] = o.FeatureId
	}
	if o.FeatureIdWithOccurrence != nil {
		toSerialize["featureIdWithOccurrence"] = o.FeatureIdWithOccurrence
	}
	if o.PartStudioMateConnectorQuery != nil {
		toSerialize["partStudioMateConnectorQuery"] = o.PartStudioMateConnectorQuery
	}
	if o.QueryData != nil {
		toSerialize["queryData"] = o.QueryData
	}
	return json.Marshal(toSerialize)
}

type NullableBTMFeatureQueryWithOccurrence157 struct {
	value *BTMFeatureQueryWithOccurrence157
	isSet bool
}

func (v NullableBTMFeatureQueryWithOccurrence157) Get() *BTMFeatureQueryWithOccurrence157 {
	return v.value
}

func (v *NullableBTMFeatureQueryWithOccurrence157) Set(val *BTMFeatureQueryWithOccurrence157) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMFeatureQueryWithOccurrence157) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMFeatureQueryWithOccurrence157) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMFeatureQueryWithOccurrence157(val *BTMFeatureQueryWithOccurrence157) *NullableBTMFeatureQueryWithOccurrence157 {
	return &NullableBTMFeatureQueryWithOccurrence157{value: val, isSet: true}
}

func (v NullableBTMFeatureQueryWithOccurrence157) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMFeatureQueryWithOccurrence157) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
