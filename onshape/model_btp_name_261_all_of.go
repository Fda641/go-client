/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPName261AllOf struct for BTPName261AllOf
type BTPName261AllOf struct {
	BtType *string `json:"btType,omitempty"`
	ForExport *bool `json:"forExport,omitempty"`
	GlobalNamespace *bool `json:"globalNamespace,omitempty"`
	Identifier *BTPIdentifier8 `json:"identifier,omitempty"`
	ImportMicroversion *string `json:"importMicroversion,omitempty"`
	Namespace *[]BTPIdentifier8 `json:"namespace,omitempty"`
}

// NewBTPName261AllOf instantiates a new BTPName261AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPName261AllOf() *BTPName261AllOf {
	this := BTPName261AllOf{}
	return &this
}

// NewBTPName261AllOfWithDefaults instantiates a new BTPName261AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPName261AllOfWithDefaults() *BTPName261AllOf {
	this := BTPName261AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPName261AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetForExport returns the ForExport field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetForExport() bool {
	if o == nil || o.ForExport == nil {
		var ret bool
		return ret
	}
	return *o.ForExport
}

// GetForExportOk returns a tuple with the ForExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetForExportOk() (*bool, bool) {
	if o == nil || o.ForExport == nil {
		return nil, false
	}
	return o.ForExport, true
}

// HasForExport returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasForExport() bool {
	if o != nil && o.ForExport != nil {
		return true
	}

	return false
}

// SetForExport gets a reference to the given bool and assigns it to the ForExport field.
func (o *BTPName261AllOf) SetForExport(v bool) {
	o.ForExport = &v
}

// GetGlobalNamespace returns the GlobalNamespace field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetGlobalNamespace() bool {
	if o == nil || o.GlobalNamespace == nil {
		var ret bool
		return ret
	}
	return *o.GlobalNamespace
}

// GetGlobalNamespaceOk returns a tuple with the GlobalNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetGlobalNamespaceOk() (*bool, bool) {
	if o == nil || o.GlobalNamespace == nil {
		return nil, false
	}
	return o.GlobalNamespace, true
}

// HasGlobalNamespace returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasGlobalNamespace() bool {
	if o != nil && o.GlobalNamespace != nil {
		return true
	}

	return false
}

// SetGlobalNamespace gets a reference to the given bool and assigns it to the GlobalNamespace field.
func (o *BTPName261AllOf) SetGlobalNamespace(v bool) {
	o.GlobalNamespace = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetIdentifier() BTPIdentifier8 {
	if o == nil || o.Identifier == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetIdentifierOk() (*BTPIdentifier8, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given BTPIdentifier8 and assigns it to the Identifier field.
func (o *BTPName261AllOf) SetIdentifier(v BTPIdentifier8) {
	o.Identifier = &v
}

// GetImportMicroversion returns the ImportMicroversion field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetImportMicroversion() string {
	if o == nil || o.ImportMicroversion == nil {
		var ret string
		return ret
	}
	return *o.ImportMicroversion
}

// GetImportMicroversionOk returns a tuple with the ImportMicroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetImportMicroversionOk() (*string, bool) {
	if o == nil || o.ImportMicroversion == nil {
		return nil, false
	}
	return o.ImportMicroversion, true
}

// HasImportMicroversion returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasImportMicroversion() bool {
	if o != nil && o.ImportMicroversion != nil {
		return true
	}

	return false
}

// SetImportMicroversion gets a reference to the given string and assigns it to the ImportMicroversion field.
func (o *BTPName261AllOf) SetImportMicroversion(v string) {
	o.ImportMicroversion = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BTPName261AllOf) GetNamespace() []BTPIdentifier8 {
	if o == nil || o.Namespace == nil {
		var ret []BTPIdentifier8
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPName261AllOf) GetNamespaceOk() (*[]BTPIdentifier8, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *BTPName261AllOf) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given []BTPIdentifier8 and assigns it to the Namespace field.
func (o *BTPName261AllOf) SetNamespace(v []BTPIdentifier8) {
	o.Namespace = &v
}

func (o BTPName261AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.ForExport != nil {
		toSerialize["forExport"] = o.ForExport
	}
	if o.GlobalNamespace != nil {
		toSerialize["globalNamespace"] = o.GlobalNamespace
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.ImportMicroversion != nil {
		toSerialize["importMicroversion"] = o.ImportMicroversion
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableBTPName261AllOf struct {
	value *BTPName261AllOf
	isSet bool
}

func (v NullableBTPName261AllOf) Get() *BTPName261AllOf {
	return v.value
}

func (v *NullableBTPName261AllOf) Set(val *BTPName261AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPName261AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPName261AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPName261AllOf(val *BTPName261AllOf) *NullableBTPName261AllOf {
	return &NullableBTPName261AllOf{value: val, isSet: true}
}

func (v NullableBTPName261AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPName261AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
