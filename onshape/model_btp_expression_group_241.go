/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionGroup241 struct for BTPExpressionGroup241
type BTPExpressionGroup241 struct {
	BTPExpression9
	BtType *string `json:"btType,omitempty"`
	Content *BTPExpression9 `json:"content,omitempty"`
}

// NewBTPExpressionGroup241 instantiates a new BTPExpressionGroup241 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionGroup241() *BTPExpressionGroup241 {
	this := BTPExpressionGroup241{}
	return &this
}

// NewBTPExpressionGroup241WithDefaults instantiates a new BTPExpressionGroup241 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionGroup241WithDefaults() *BTPExpressionGroup241 {
	this := BTPExpressionGroup241{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionGroup241) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionGroup241) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionGroup241) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionGroup241) SetBtType(v string) {
	o.BtType = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *BTPExpressionGroup241) GetContent() BTPExpression9 {
	if o == nil || o.Content == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionGroup241) GetContentOk() (*BTPExpression9, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *BTPExpressionGroup241) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given BTPExpression9 and assigns it to the Content field.
func (o *BTPExpressionGroup241) SetContent(v BTPExpression9) {
	o.Content = &v
}

func (o BTPExpressionGroup241) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionGroup241 struct {
	value *BTPExpressionGroup241
	isSet bool
}

func (v NullableBTPExpressionGroup241) Get() *BTPExpressionGroup241 {
	return v.value
}

func (v *NullableBTPExpressionGroup241) Set(val *BTPExpressionGroup241) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionGroup241) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionGroup241) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionGroup241(val *BTPExpressionGroup241) *NullableBTPExpressionGroup241 {
	return &NullableBTPExpressionGroup241{value: val, isSet: true}
}

func (v NullableBTPExpressionGroup241) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionGroup241) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
