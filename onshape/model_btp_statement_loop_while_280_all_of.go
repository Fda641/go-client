/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementLoopWhile280AllOf struct for BTPStatementLoopWhile280AllOf
type BTPStatementLoopWhile280AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Condition *BTPExpression9 `json:"condition,omitempty"`
}

// NewBTPStatementLoopWhile280AllOf instantiates a new BTPStatementLoopWhile280AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementLoopWhile280AllOf() *BTPStatementLoopWhile280AllOf {
	this := BTPStatementLoopWhile280AllOf{}
	return &this
}

// NewBTPStatementLoopWhile280AllOfWithDefaults instantiates a new BTPStatementLoopWhile280AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementLoopWhile280AllOfWithDefaults() *BTPStatementLoopWhile280AllOf {
	this := BTPStatementLoopWhile280AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementLoopWhile280AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopWhile280AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementLoopWhile280AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementLoopWhile280AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *BTPStatementLoopWhile280AllOf) GetCondition() BTPExpression9 {
	if o == nil || o.Condition == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementLoopWhile280AllOf) GetConditionOk() (*BTPExpression9, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *BTPStatementLoopWhile280AllOf) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given BTPExpression9 and assigns it to the Condition field.
func (o *BTPStatementLoopWhile280AllOf) SetCondition(v BTPExpression9) {
	o.Condition = &v
}

func (o BTPStatementLoopWhile280AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementLoopWhile280AllOf struct {
	value *BTPStatementLoopWhile280AllOf
	isSet bool
}

func (v NullableBTPStatementLoopWhile280AllOf) Get() *BTPStatementLoopWhile280AllOf {
	return v.value
}

func (v *NullableBTPStatementLoopWhile280AllOf) Set(val *BTPStatementLoopWhile280AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementLoopWhile280AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementLoopWhile280AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementLoopWhile280AllOf(val *BTPStatementLoopWhile280AllOf) *NullableBTPStatementLoopWhile280AllOf {
	return &NullableBTPStatementLoopWhile280AllOf{value: val, isSet: true}
}

func (v NullableBTPStatementLoopWhile280AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementLoopWhile280AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
