/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTUnitsDisplayPrecision struct for BTUnitsDisplayPrecision
type BTUnitsDisplayPrecision struct {
	Centimeter *int32 `json:"centimeter,omitempty"`
	Degree *int32 `json:"degree,omitempty"`
	Foot *int32 `json:"foot,omitempty"`
	Gram *int32 `json:"gram,omitempty"`
	Inch *int32 `json:"inch,omitempty"`
	Kilogram *int32 `json:"kilogram,omitempty"`
	Meter *int32 `json:"meter,omitempty"`
	Millimeter *int32 `json:"millimeter,omitempty"`
	Ounce *int32 `json:"ounce,omitempty"`
	Pound *int32 `json:"pound,omitempty"`
	Radian *int32 `json:"radian,omitempty"`
	Yard *int32 `json:"yard,omitempty"`
}

// NewBTUnitsDisplayPrecision instantiates a new BTUnitsDisplayPrecision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTUnitsDisplayPrecision() *BTUnitsDisplayPrecision {
	this := BTUnitsDisplayPrecision{}
	return &this
}

// NewBTUnitsDisplayPrecisionWithDefaults instantiates a new BTUnitsDisplayPrecision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTUnitsDisplayPrecisionWithDefaults() *BTUnitsDisplayPrecision {
	this := BTUnitsDisplayPrecision{}
	return &this
}

// GetCentimeter returns the Centimeter field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetCentimeter() int32 {
	if o == nil || o.Centimeter == nil {
		var ret int32
		return ret
	}
	return *o.Centimeter
}

// GetCentimeterOk returns a tuple with the Centimeter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetCentimeterOk() (*int32, bool) {
	if o == nil || o.Centimeter == nil {
		return nil, false
	}
	return o.Centimeter, true
}

// HasCentimeter returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasCentimeter() bool {
	if o != nil && o.Centimeter != nil {
		return true
	}

	return false
}

// SetCentimeter gets a reference to the given int32 and assigns it to the Centimeter field.
func (o *BTUnitsDisplayPrecision) SetCentimeter(v int32) {
	o.Centimeter = &v
}

// GetDegree returns the Degree field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetDegree() int32 {
	if o == nil || o.Degree == nil {
		var ret int32
		return ret
	}
	return *o.Degree
}

// GetDegreeOk returns a tuple with the Degree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetDegreeOk() (*int32, bool) {
	if o == nil || o.Degree == nil {
		return nil, false
	}
	return o.Degree, true
}

// HasDegree returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasDegree() bool {
	if o != nil && o.Degree != nil {
		return true
	}

	return false
}

// SetDegree gets a reference to the given int32 and assigns it to the Degree field.
func (o *BTUnitsDisplayPrecision) SetDegree(v int32) {
	o.Degree = &v
}

// GetFoot returns the Foot field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetFoot() int32 {
	if o == nil || o.Foot == nil {
		var ret int32
		return ret
	}
	return *o.Foot
}

// GetFootOk returns a tuple with the Foot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetFootOk() (*int32, bool) {
	if o == nil || o.Foot == nil {
		return nil, false
	}
	return o.Foot, true
}

// HasFoot returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasFoot() bool {
	if o != nil && o.Foot != nil {
		return true
	}

	return false
}

// SetFoot gets a reference to the given int32 and assigns it to the Foot field.
func (o *BTUnitsDisplayPrecision) SetFoot(v int32) {
	o.Foot = &v
}

// GetGram returns the Gram field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetGram() int32 {
	if o == nil || o.Gram == nil {
		var ret int32
		return ret
	}
	return *o.Gram
}

// GetGramOk returns a tuple with the Gram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetGramOk() (*int32, bool) {
	if o == nil || o.Gram == nil {
		return nil, false
	}
	return o.Gram, true
}

// HasGram returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasGram() bool {
	if o != nil && o.Gram != nil {
		return true
	}

	return false
}

// SetGram gets a reference to the given int32 and assigns it to the Gram field.
func (o *BTUnitsDisplayPrecision) SetGram(v int32) {
	o.Gram = &v
}

// GetInch returns the Inch field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetInch() int32 {
	if o == nil || o.Inch == nil {
		var ret int32
		return ret
	}
	return *o.Inch
}

// GetInchOk returns a tuple with the Inch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetInchOk() (*int32, bool) {
	if o == nil || o.Inch == nil {
		return nil, false
	}
	return o.Inch, true
}

// HasInch returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasInch() bool {
	if o != nil && o.Inch != nil {
		return true
	}

	return false
}

// SetInch gets a reference to the given int32 and assigns it to the Inch field.
func (o *BTUnitsDisplayPrecision) SetInch(v int32) {
	o.Inch = &v
}

// GetKilogram returns the Kilogram field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetKilogram() int32 {
	if o == nil || o.Kilogram == nil {
		var ret int32
		return ret
	}
	return *o.Kilogram
}

// GetKilogramOk returns a tuple with the Kilogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetKilogramOk() (*int32, bool) {
	if o == nil || o.Kilogram == nil {
		return nil, false
	}
	return o.Kilogram, true
}

// HasKilogram returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasKilogram() bool {
	if o != nil && o.Kilogram != nil {
		return true
	}

	return false
}

// SetKilogram gets a reference to the given int32 and assigns it to the Kilogram field.
func (o *BTUnitsDisplayPrecision) SetKilogram(v int32) {
	o.Kilogram = &v
}

// GetMeter returns the Meter field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetMeter() int32 {
	if o == nil || o.Meter == nil {
		var ret int32
		return ret
	}
	return *o.Meter
}

// GetMeterOk returns a tuple with the Meter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetMeterOk() (*int32, bool) {
	if o == nil || o.Meter == nil {
		return nil, false
	}
	return o.Meter, true
}

// HasMeter returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasMeter() bool {
	if o != nil && o.Meter != nil {
		return true
	}

	return false
}

// SetMeter gets a reference to the given int32 and assigns it to the Meter field.
func (o *BTUnitsDisplayPrecision) SetMeter(v int32) {
	o.Meter = &v
}

// GetMillimeter returns the Millimeter field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetMillimeter() int32 {
	if o == nil || o.Millimeter == nil {
		var ret int32
		return ret
	}
	return *o.Millimeter
}

// GetMillimeterOk returns a tuple with the Millimeter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetMillimeterOk() (*int32, bool) {
	if o == nil || o.Millimeter == nil {
		return nil, false
	}
	return o.Millimeter, true
}

// HasMillimeter returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasMillimeter() bool {
	if o != nil && o.Millimeter != nil {
		return true
	}

	return false
}

// SetMillimeter gets a reference to the given int32 and assigns it to the Millimeter field.
func (o *BTUnitsDisplayPrecision) SetMillimeter(v int32) {
	o.Millimeter = &v
}

// GetOunce returns the Ounce field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetOunce() int32 {
	if o == nil || o.Ounce == nil {
		var ret int32
		return ret
	}
	return *o.Ounce
}

// GetOunceOk returns a tuple with the Ounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetOunceOk() (*int32, bool) {
	if o == nil || o.Ounce == nil {
		return nil, false
	}
	return o.Ounce, true
}

// HasOunce returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasOunce() bool {
	if o != nil && o.Ounce != nil {
		return true
	}

	return false
}

// SetOunce gets a reference to the given int32 and assigns it to the Ounce field.
func (o *BTUnitsDisplayPrecision) SetOunce(v int32) {
	o.Ounce = &v
}

// GetPound returns the Pound field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetPound() int32 {
	if o == nil || o.Pound == nil {
		var ret int32
		return ret
	}
	return *o.Pound
}

// GetPoundOk returns a tuple with the Pound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetPoundOk() (*int32, bool) {
	if o == nil || o.Pound == nil {
		return nil, false
	}
	return o.Pound, true
}

// HasPound returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasPound() bool {
	if o != nil && o.Pound != nil {
		return true
	}

	return false
}

// SetPound gets a reference to the given int32 and assigns it to the Pound field.
func (o *BTUnitsDisplayPrecision) SetPound(v int32) {
	o.Pound = &v
}

// GetRadian returns the Radian field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetRadian() int32 {
	if o == nil || o.Radian == nil {
		var ret int32
		return ret
	}
	return *o.Radian
}

// GetRadianOk returns a tuple with the Radian field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetRadianOk() (*int32, bool) {
	if o == nil || o.Radian == nil {
		return nil, false
	}
	return o.Radian, true
}

// HasRadian returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasRadian() bool {
	if o != nil && o.Radian != nil {
		return true
	}

	return false
}

// SetRadian gets a reference to the given int32 and assigns it to the Radian field.
func (o *BTUnitsDisplayPrecision) SetRadian(v int32) {
	o.Radian = &v
}

// GetYard returns the Yard field value if set, zero value otherwise.
func (o *BTUnitsDisplayPrecision) GetYard() int32 {
	if o == nil || o.Yard == nil {
		var ret int32
		return ret
	}
	return *o.Yard
}

// GetYardOk returns a tuple with the Yard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTUnitsDisplayPrecision) GetYardOk() (*int32, bool) {
	if o == nil || o.Yard == nil {
		return nil, false
	}
	return o.Yard, true
}

// HasYard returns a boolean if a field has been set.
func (o *BTUnitsDisplayPrecision) HasYard() bool {
	if o != nil && o.Yard != nil {
		return true
	}

	return false
}

// SetYard gets a reference to the given int32 and assigns it to the Yard field.
func (o *BTUnitsDisplayPrecision) SetYard(v int32) {
	o.Yard = &v
}

func (o BTUnitsDisplayPrecision) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Centimeter != nil {
		toSerialize["centimeter"] = o.Centimeter
	}
	if o.Degree != nil {
		toSerialize["degree"] = o.Degree
	}
	if o.Foot != nil {
		toSerialize["foot"] = o.Foot
	}
	if o.Gram != nil {
		toSerialize["gram"] = o.Gram
	}
	if o.Inch != nil {
		toSerialize["inch"] = o.Inch
	}
	if o.Kilogram != nil {
		toSerialize["kilogram"] = o.Kilogram
	}
	if o.Meter != nil {
		toSerialize["meter"] = o.Meter
	}
	if o.Millimeter != nil {
		toSerialize["millimeter"] = o.Millimeter
	}
	if o.Ounce != nil {
		toSerialize["ounce"] = o.Ounce
	}
	if o.Pound != nil {
		toSerialize["pound"] = o.Pound
	}
	if o.Radian != nil {
		toSerialize["radian"] = o.Radian
	}
	if o.Yard != nil {
		toSerialize["yard"] = o.Yard
	}
	return json.Marshal(toSerialize)
}

type NullableBTUnitsDisplayPrecision struct {
	value *BTUnitsDisplayPrecision
	isSet bool
}

func (v NullableBTUnitsDisplayPrecision) Get() *BTUnitsDisplayPrecision {
	return v.value
}

func (v *NullableBTUnitsDisplayPrecision) Set(val *BTUnitsDisplayPrecision) {
	v.value = val
	v.isSet = true
}

func (v NullableBTUnitsDisplayPrecision) IsSet() bool {
	return v.isSet
}

func (v *NullableBTUnitsDisplayPrecision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTUnitsDisplayPrecision(val *BTUnitsDisplayPrecision) *NullableBTUnitsDisplayPrecision {
	return &NullableBTUnitsDisplayPrecision{value: val, isSet: true}
}

func (v NullableBTUnitsDisplayPrecision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTUnitsDisplayPrecision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
