/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTFeatureDefinitionCall1406 struct for BTFeatureDefinitionCall1406
type BTFeatureDefinitionCall1406 struct {
	BTFeatureApiBase1430
	BtType *string `json:"btType,omitempty"`
	Feature *BTMFeature134 `json:"feature,omitempty"`
}

// NewBTFeatureDefinitionCall1406 instantiates a new BTFeatureDefinitionCall1406 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFeatureDefinitionCall1406() *BTFeatureDefinitionCall1406 {
	this := BTFeatureDefinitionCall1406{}
	return &this
}

// NewBTFeatureDefinitionCall1406WithDefaults instantiates a new BTFeatureDefinitionCall1406 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFeatureDefinitionCall1406WithDefaults() *BTFeatureDefinitionCall1406 {
	this := BTFeatureDefinitionCall1406{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFeatureDefinitionCall1406) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureDefinitionCall1406) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFeatureDefinitionCall1406) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFeatureDefinitionCall1406) SetBtType(v string) {
	o.BtType = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *BTFeatureDefinitionCall1406) GetFeature() BTMFeature134 {
	if o == nil || o.Feature == nil {
		var ret BTMFeature134
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFeatureDefinitionCall1406) GetFeatureOk() (*BTMFeature134, bool) {
	if o == nil || o.Feature == nil {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *BTFeatureDefinitionCall1406) HasFeature() bool {
	if o != nil && o.Feature != nil {
		return true
	}

	return false
}

// SetFeature gets a reference to the given BTMFeature134 and assigns it to the Feature field.
func (o *BTFeatureDefinitionCall1406) SetFeature(v BTMFeature134) {
	o.Feature = &v
}

func (o BTFeatureDefinitionCall1406) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTFeatureApiBase1430, errBTFeatureApiBase1430 := json.Marshal(o.BTFeatureApiBase1430)
	if errBTFeatureApiBase1430 != nil {
		return []byte{}, errBTFeatureApiBase1430
	}
	errBTFeatureApiBase1430 = json.Unmarshal([]byte(serializedBTFeatureApiBase1430), &toSerialize)
	if errBTFeatureApiBase1430 != nil {
		return []byte{}, errBTFeatureApiBase1430
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Feature != nil {
		toSerialize["feature"] = o.Feature
	}
	return json.Marshal(toSerialize)
}

type NullableBTFeatureDefinitionCall1406 struct {
	value *BTFeatureDefinitionCall1406
	isSet bool
}

func (v NullableBTFeatureDefinitionCall1406) Get() *BTFeatureDefinitionCall1406 {
	return v.value
}

func (v *NullableBTFeatureDefinitionCall1406) Set(val *BTFeatureDefinitionCall1406) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFeatureDefinitionCall1406) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFeatureDefinitionCall1406) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFeatureDefinitionCall1406(val *BTFeatureDefinitionCall1406) *NullableBTFeatureDefinitionCall1406 {
	return &NullableBTFeatureDefinitionCall1406{value: val, isSet: true}
}

func (v NullableBTFeatureDefinitionCall1406) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFeatureDefinitionCall1406) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
