/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTCommonUnitsInfo struct for BTCommonUnitsInfo
type BTCommonUnitsInfo struct {
	Units *[]BTCommonUnitInfo `json:"units,omitempty"`
}

// NewBTCommonUnitsInfo instantiates a new BTCommonUnitsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTCommonUnitsInfo() *BTCommonUnitsInfo {
	this := BTCommonUnitsInfo{}
	return &this
}

// NewBTCommonUnitsInfoWithDefaults instantiates a new BTCommonUnitsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTCommonUnitsInfoWithDefaults() *BTCommonUnitsInfo {
	this := BTCommonUnitsInfo{}
	return &this
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *BTCommonUnitsInfo) GetUnits() []BTCommonUnitInfo {
	if o == nil || o.Units == nil {
		var ret []BTCommonUnitInfo
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTCommonUnitsInfo) GetUnitsOk() (*[]BTCommonUnitInfo, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *BTCommonUnitsInfo) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []BTCommonUnitInfo and assigns it to the Units field.
func (o *BTCommonUnitsInfo) SetUnits(v []BTCommonUnitInfo) {
	o.Units = &v
}

func (o BTCommonUnitsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	return json.Marshal(toSerialize)
}

type NullableBTCommonUnitsInfo struct {
	value *BTCommonUnitsInfo
	isSet bool
}

func (v NullableBTCommonUnitsInfo) Get() *BTCommonUnitsInfo {
	return v.value
}

func (v *NullableBTCommonUnitsInfo) Set(val *BTCommonUnitsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTCommonUnitsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTCommonUnitsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTCommonUnitsInfo(val *BTCommonUnitsInfo) *NullableBTCommonUnitsInfo {
	return &NullableBTCommonUnitsInfo{value: val, isSet: true}
}

func (v NullableBTCommonUnitsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTCommonUnitsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
