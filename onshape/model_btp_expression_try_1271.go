/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionTry1271 struct for BTPExpressionTry1271
type BTPExpressionTry1271 struct {
	BTPExpression9
	BtType *string `json:"btType,omitempty"`
	Expression *BTPExpression9 `json:"expression,omitempty"`
	Silent *bool `json:"silent,omitempty"`
	SpaceAfterSilent *BTPSpace10 `json:"spaceAfterSilent,omitempty"`
	SpaceAfterTry *BTPSpace10 `json:"spaceAfterTry,omitempty"`
}

// NewBTPExpressionTry1271 instantiates a new BTPExpressionTry1271 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionTry1271() *BTPExpressionTry1271 {
	this := BTPExpressionTry1271{}
	return &this
}

// NewBTPExpressionTry1271WithDefaults instantiates a new BTPExpressionTry1271 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionTry1271WithDefaults() *BTPExpressionTry1271 {
	this := BTPExpressionTry1271{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionTry1271) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionTry1271) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionTry1271) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionTry1271) SetBtType(v string) {
	o.BtType = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *BTPExpressionTry1271) GetExpression() BTPExpression9 {
	if o == nil || o.Expression == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionTry1271) GetExpressionOk() (*BTPExpression9, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *BTPExpressionTry1271) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given BTPExpression9 and assigns it to the Expression field.
func (o *BTPExpressionTry1271) SetExpression(v BTPExpression9) {
	o.Expression = &v
}

// GetSilent returns the Silent field value if set, zero value otherwise.
func (o *BTPExpressionTry1271) GetSilent() bool {
	if o == nil || o.Silent == nil {
		var ret bool
		return ret
	}
	return *o.Silent
}

// GetSilentOk returns a tuple with the Silent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionTry1271) GetSilentOk() (*bool, bool) {
	if o == nil || o.Silent == nil {
		return nil, false
	}
	return o.Silent, true
}

// HasSilent returns a boolean if a field has been set.
func (o *BTPExpressionTry1271) HasSilent() bool {
	if o != nil && o.Silent != nil {
		return true
	}

	return false
}

// SetSilent gets a reference to the given bool and assigns it to the Silent field.
func (o *BTPExpressionTry1271) SetSilent(v bool) {
	o.Silent = &v
}

// GetSpaceAfterSilent returns the SpaceAfterSilent field value if set, zero value otherwise.
func (o *BTPExpressionTry1271) GetSpaceAfterSilent() BTPSpace10 {
	if o == nil || o.SpaceAfterSilent == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterSilent
}

// GetSpaceAfterSilentOk returns a tuple with the SpaceAfterSilent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionTry1271) GetSpaceAfterSilentOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterSilent == nil {
		return nil, false
	}
	return o.SpaceAfterSilent, true
}

// HasSpaceAfterSilent returns a boolean if a field has been set.
func (o *BTPExpressionTry1271) HasSpaceAfterSilent() bool {
	if o != nil && o.SpaceAfterSilent != nil {
		return true
	}

	return false
}

// SetSpaceAfterSilent gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterSilent field.
func (o *BTPExpressionTry1271) SetSpaceAfterSilent(v BTPSpace10) {
	o.SpaceAfterSilent = &v
}

// GetSpaceAfterTry returns the SpaceAfterTry field value if set, zero value otherwise.
func (o *BTPExpressionTry1271) GetSpaceAfterTry() BTPSpace10 {
	if o == nil || o.SpaceAfterTry == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterTry
}

// GetSpaceAfterTryOk returns a tuple with the SpaceAfterTry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionTry1271) GetSpaceAfterTryOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterTry == nil {
		return nil, false
	}
	return o.SpaceAfterTry, true
}

// HasSpaceAfterTry returns a boolean if a field has been set.
func (o *BTPExpressionTry1271) HasSpaceAfterTry() bool {
	if o != nil && o.SpaceAfterTry != nil {
		return true
	}

	return false
}

// SetSpaceAfterTry gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterTry field.
func (o *BTPExpressionTry1271) SetSpaceAfterTry(v BTPSpace10) {
	o.SpaceAfterTry = &v
}

func (o BTPExpressionTry1271) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.Silent != nil {
		toSerialize["silent"] = o.Silent
	}
	if o.SpaceAfterSilent != nil {
		toSerialize["spaceAfterSilent"] = o.SpaceAfterSilent
	}
	if o.SpaceAfterTry != nil {
		toSerialize["spaceAfterTry"] = o.SpaceAfterTry
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionTry1271 struct {
	value *BTPExpressionTry1271
	isSet bool
}

func (v NullableBTPExpressionTry1271) Get() *BTPExpressionTry1271 {
	return v.value
}

func (v *NullableBTPExpressionTry1271) Set(val *BTPExpressionTry1271) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionTry1271) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionTry1271) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionTry1271(val *BTPExpressionTry1271) *NullableBTPExpressionTry1271 {
	return &NullableBTPExpressionTry1271{value: val, isSet: true}
}

func (v NullableBTPExpressionTry1271) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionTry1271) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
