/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionAccess237 struct for BTPExpressionAccess237
type BTPExpressionAccess237 struct {
	BTPExpression9
	Accessor *BTPPropertyAccessor23 `json:"accessor,omitempty"`
	Base *BTPExpression9 `json:"base,omitempty"`
	BtType *string `json:"btType,omitempty"`
	SpaceInAccessor *BTPSpace10 `json:"spaceInAccessor,omitempty"`
}

// NewBTPExpressionAccess237 instantiates a new BTPExpressionAccess237 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionAccess237() *BTPExpressionAccess237 {
	this := BTPExpressionAccess237{}
	return &this
}

// NewBTPExpressionAccess237WithDefaults instantiates a new BTPExpressionAccess237 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionAccess237WithDefaults() *BTPExpressionAccess237 {
	this := BTPExpressionAccess237{}
	return &this
}

// GetAccessor returns the Accessor field value if set, zero value otherwise.
func (o *BTPExpressionAccess237) GetAccessor() BTPPropertyAccessor23 {
	if o == nil || o.Accessor == nil {
		var ret BTPPropertyAccessor23
		return ret
	}
	return *o.Accessor
}

// GetAccessorOk returns a tuple with the Accessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionAccess237) GetAccessorOk() (*BTPPropertyAccessor23, bool) {
	if o == nil || o.Accessor == nil {
		return nil, false
	}
	return o.Accessor, true
}

// HasAccessor returns a boolean if a field has been set.
func (o *BTPExpressionAccess237) HasAccessor() bool {
	if o != nil && o.Accessor != nil {
		return true
	}

	return false
}

// SetAccessor gets a reference to the given BTPPropertyAccessor23 and assigns it to the Accessor field.
func (o *BTPExpressionAccess237) SetAccessor(v BTPPropertyAccessor23) {
	o.Accessor = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *BTPExpressionAccess237) GetBase() BTPExpression9 {
	if o == nil || o.Base == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionAccess237) GetBaseOk() (*BTPExpression9, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *BTPExpressionAccess237) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given BTPExpression9 and assigns it to the Base field.
func (o *BTPExpressionAccess237) SetBase(v BTPExpression9) {
	o.Base = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionAccess237) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionAccess237) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionAccess237) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionAccess237) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceInAccessor returns the SpaceInAccessor field value if set, zero value otherwise.
func (o *BTPExpressionAccess237) GetSpaceInAccessor() BTPSpace10 {
	if o == nil || o.SpaceInAccessor == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceInAccessor
}

// GetSpaceInAccessorOk returns a tuple with the SpaceInAccessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionAccess237) GetSpaceInAccessorOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceInAccessor == nil {
		return nil, false
	}
	return o.SpaceInAccessor, true
}

// HasSpaceInAccessor returns a boolean if a field has been set.
func (o *BTPExpressionAccess237) HasSpaceInAccessor() bool {
	if o != nil && o.SpaceInAccessor != nil {
		return true
	}

	return false
}

// SetSpaceInAccessor gets a reference to the given BTPSpace10 and assigns it to the SpaceInAccessor field.
func (o *BTPExpressionAccess237) SetSpaceInAccessor(v BTPSpace10) {
	o.SpaceInAccessor = &v
}

func (o BTPExpressionAccess237) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	if o.Accessor != nil {
		toSerialize["accessor"] = o.Accessor
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceInAccessor != nil {
		toSerialize["spaceInAccessor"] = o.SpaceInAccessor
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionAccess237 struct {
	value *BTPExpressionAccess237
	isSet bool
}

func (v NullableBTPExpressionAccess237) Get() *BTPExpressionAccess237 {
	return v.value
}

func (v *NullableBTPExpressionAccess237) Set(val *BTPExpressionAccess237) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionAccess237) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionAccess237) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionAccess237(val *BTPExpressionAccess237) *NullableBTPExpressionAccess237 {
	return &NullableBTPExpressionAccess237{value: val, isSet: true}
}

func (v NullableBTPExpressionAccess237) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionAccess237) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
