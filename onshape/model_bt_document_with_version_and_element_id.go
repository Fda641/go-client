/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTDocumentWithVersionAndElementId struct for BTDocumentWithVersionAndElementId
type BTDocumentWithVersionAndElementId struct {
	DocumentId *string `json:"documentId,omitempty"`
	DocumentVersionId *string `json:"documentVersionId,omitempty"`
	ElementId *string `json:"elementId,omitempty"`
	PartNumber *string `json:"partNumber,omitempty"`
	Revision *string `json:"revision,omitempty"`
	UniqueVersionId *string `json:"uniqueVersionId,omitempty"`
	ValidRevisionReference *bool `json:"validRevisionReference,omitempty"`
}

// NewBTDocumentWithVersionAndElementId instantiates a new BTDocumentWithVersionAndElementId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTDocumentWithVersionAndElementId() *BTDocumentWithVersionAndElementId {
	this := BTDocumentWithVersionAndElementId{}
	return &this
}

// NewBTDocumentWithVersionAndElementIdWithDefaults instantiates a new BTDocumentWithVersionAndElementId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTDocumentWithVersionAndElementIdWithDefaults() *BTDocumentWithVersionAndElementId {
	this := BTDocumentWithVersionAndElementId{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *BTDocumentWithVersionAndElementId) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetDocumentVersionId returns the DocumentVersionId field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetDocumentVersionId() string {
	if o == nil || o.DocumentVersionId == nil {
		var ret string
		return ret
	}
	return *o.DocumentVersionId
}

// GetDocumentVersionIdOk returns a tuple with the DocumentVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetDocumentVersionIdOk() (*string, bool) {
	if o == nil || o.DocumentVersionId == nil {
		return nil, false
	}
	return o.DocumentVersionId, true
}

// HasDocumentVersionId returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasDocumentVersionId() bool {
	if o != nil && o.DocumentVersionId != nil {
		return true
	}

	return false
}

// SetDocumentVersionId gets a reference to the given string and assigns it to the DocumentVersionId field.
func (o *BTDocumentWithVersionAndElementId) SetDocumentVersionId(v string) {
	o.DocumentVersionId = &v
}

// GetElementId returns the ElementId field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetElementId() string {
	if o == nil || o.ElementId == nil {
		var ret string
		return ret
	}
	return *o.ElementId
}

// GetElementIdOk returns a tuple with the ElementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetElementIdOk() (*string, bool) {
	if o == nil || o.ElementId == nil {
		return nil, false
	}
	return o.ElementId, true
}

// HasElementId returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasElementId() bool {
	if o != nil && o.ElementId != nil {
		return true
	}

	return false
}

// SetElementId gets a reference to the given string and assigns it to the ElementId field.
func (o *BTDocumentWithVersionAndElementId) SetElementId(v string) {
	o.ElementId = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetPartNumber() string {
	if o == nil || o.PartNumber == nil {
		var ret string
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetPartNumberOk() (*string, bool) {
	if o == nil || o.PartNumber == nil {
		return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasPartNumber() bool {
	if o != nil && o.PartNumber != nil {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given string and assigns it to the PartNumber field.
func (o *BTDocumentWithVersionAndElementId) SetPartNumber(v string) {
	o.PartNumber = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *BTDocumentWithVersionAndElementId) SetRevision(v string) {
	o.Revision = &v
}

// GetUniqueVersionId returns the UniqueVersionId field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetUniqueVersionId() string {
	if o == nil || o.UniqueVersionId == nil {
		var ret string
		return ret
	}
	return *o.UniqueVersionId
}

// GetUniqueVersionIdOk returns a tuple with the UniqueVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetUniqueVersionIdOk() (*string, bool) {
	if o == nil || o.UniqueVersionId == nil {
		return nil, false
	}
	return o.UniqueVersionId, true
}

// HasUniqueVersionId returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasUniqueVersionId() bool {
	if o != nil && o.UniqueVersionId != nil {
		return true
	}

	return false
}

// SetUniqueVersionId gets a reference to the given string and assigns it to the UniqueVersionId field.
func (o *BTDocumentWithVersionAndElementId) SetUniqueVersionId(v string) {
	o.UniqueVersionId = &v
}

// GetValidRevisionReference returns the ValidRevisionReference field value if set, zero value otherwise.
func (o *BTDocumentWithVersionAndElementId) GetValidRevisionReference() bool {
	if o == nil || o.ValidRevisionReference == nil {
		var ret bool
		return ret
	}
	return *o.ValidRevisionReference
}

// GetValidRevisionReferenceOk returns a tuple with the ValidRevisionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTDocumentWithVersionAndElementId) GetValidRevisionReferenceOk() (*bool, bool) {
	if o == nil || o.ValidRevisionReference == nil {
		return nil, false
	}
	return o.ValidRevisionReference, true
}

// HasValidRevisionReference returns a boolean if a field has been set.
func (o *BTDocumentWithVersionAndElementId) HasValidRevisionReference() bool {
	if o != nil && o.ValidRevisionReference != nil {
		return true
	}

	return false
}

// SetValidRevisionReference gets a reference to the given bool and assigns it to the ValidRevisionReference field.
func (o *BTDocumentWithVersionAndElementId) SetValidRevisionReference(v bool) {
	o.ValidRevisionReference = &v
}

func (o BTDocumentWithVersionAndElementId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.DocumentVersionId != nil {
		toSerialize["documentVersionId"] = o.DocumentVersionId
	}
	if o.ElementId != nil {
		toSerialize["elementId"] = o.ElementId
	}
	if o.PartNumber != nil {
		toSerialize["partNumber"] = o.PartNumber
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.UniqueVersionId != nil {
		toSerialize["uniqueVersionId"] = o.UniqueVersionId
	}
	if o.ValidRevisionReference != nil {
		toSerialize["validRevisionReference"] = o.ValidRevisionReference
	}
	return json.Marshal(toSerialize)
}

type NullableBTDocumentWithVersionAndElementId struct {
	value *BTDocumentWithVersionAndElementId
	isSet bool
}

func (v NullableBTDocumentWithVersionAndElementId) Get() *BTDocumentWithVersionAndElementId {
	return v.value
}

func (v *NullableBTDocumentWithVersionAndElementId) Set(val *BTDocumentWithVersionAndElementId) {
	v.value = val
	v.isSet = true
}

func (v NullableBTDocumentWithVersionAndElementId) IsSet() bool {
	return v.isSet
}

func (v *NullableBTDocumentWithVersionAndElementId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTDocumentWithVersionAndElementId(val *BTDocumentWithVersionAndElementId) *NullableBTDocumentWithVersionAndElementId {
	return &NullableBTDocumentWithVersionAndElementId{value: val, isSet: true}
}

func (v NullableBTDocumentWithVersionAndElementId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTDocumentWithVersionAndElementId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
