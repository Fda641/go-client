/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTTableTestCellString2112 struct for BTTableTestCellString2112
type BTTableTestCellString2112 struct {
	BTTableCell1114
	BtType *string `json:"btType,omitempty"`
	CellValue *string `json:"cellValue,omitempty"`
}

// NewBTTableTestCellString2112 instantiates a new BTTableTestCellString2112 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTTableTestCellString2112() *BTTableTestCellString2112 {
	this := BTTableTestCellString2112{}
	return &this
}

// NewBTTableTestCellString2112WithDefaults instantiates a new BTTableTestCellString2112 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTTableTestCellString2112WithDefaults() *BTTableTestCellString2112 {
	this := BTTableTestCellString2112{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTTableTestCellString2112) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableTestCellString2112) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTTableTestCellString2112) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTTableTestCellString2112) SetBtType(v string) {
	o.BtType = &v
}

// GetCellValue returns the CellValue field value if set, zero value otherwise.
func (o *BTTableTestCellString2112) GetCellValue() string {
	if o == nil || o.CellValue == nil {
		var ret string
		return ret
	}
	return *o.CellValue
}

// GetCellValueOk returns a tuple with the CellValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTTableTestCellString2112) GetCellValueOk() (*string, bool) {
	if o == nil || o.CellValue == nil {
		return nil, false
	}
	return o.CellValue, true
}

// HasCellValue returns a boolean if a field has been set.
func (o *BTTableTestCellString2112) HasCellValue() bool {
	if o != nil && o.CellValue != nil {
		return true
	}

	return false
}

// SetCellValue gets a reference to the given string and assigns it to the CellValue field.
func (o *BTTableTestCellString2112) SetCellValue(v string) {
	o.CellValue = &v
}

func (o BTTableTestCellString2112) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTTableCell1114, errBTTableCell1114 := json.Marshal(o.BTTableCell1114)
	if errBTTableCell1114 != nil {
		return []byte{}, errBTTableCell1114
	}
	errBTTableCell1114 = json.Unmarshal([]byte(serializedBTTableCell1114), &toSerialize)
	if errBTTableCell1114 != nil {
		return []byte{}, errBTTableCell1114
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CellValue != nil {
		toSerialize["cellValue"] = o.CellValue
	}
	return json.Marshal(toSerialize)
}

type NullableBTTableTestCellString2112 struct {
	value *BTTableTestCellString2112
	isSet bool
}

func (v NullableBTTableTestCellString2112) Get() *BTTableTestCellString2112 {
	return v.value
}

func (v *NullableBTTableTestCellString2112) Set(val *BTTableTestCellString2112) {
	v.value = val
	v.isSet = true
}

func (v NullableBTTableTestCellString2112) IsSet() bool {
	return v.isSet
}

func (v *NullableBTTableTestCellString2112) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTTableTestCellString2112(val *BTTableTestCellString2112) *NullableBTTableTestCellString2112 {
	return &NullableBTTableTestCellString2112{value: val, isSet: true}
}

func (v NullableBTTableTestCellString2112) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTTableTestCellString2112) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
