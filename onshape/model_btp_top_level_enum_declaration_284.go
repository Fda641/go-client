/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPTopLevelEnumDeclaration284 struct for BTPTopLevelEnumDeclaration284
type BTPTopLevelEnumDeclaration284 struct {
	BTPTopLevelTypeDeclaration287
	Annotations *[]BTPAnnotation231 `json:"annotations,omitempty"`
	BtType *string `json:"btType,omitempty"`
	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
	TrailingComma *bool `json:"trailingComma,omitempty"`
	Values *[]BTPIdentifier8 `json:"values,omitempty"`
}

// NewBTPTopLevelEnumDeclaration284 instantiates a new BTPTopLevelEnumDeclaration284 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPTopLevelEnumDeclaration284() *BTPTopLevelEnumDeclaration284 {
	this := BTPTopLevelEnumDeclaration284{}
	return &this
}

// NewBTPTopLevelEnumDeclaration284WithDefaults instantiates a new BTPTopLevelEnumDeclaration284 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPTopLevelEnumDeclaration284WithDefaults() *BTPTopLevelEnumDeclaration284 {
	this := BTPTopLevelEnumDeclaration284{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *BTPTopLevelEnumDeclaration284) GetAnnotations() []BTPAnnotation231 {
	if o == nil || o.Annotations == nil {
		var ret []BTPAnnotation231
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTopLevelEnumDeclaration284) GetAnnotationsOk() (*[]BTPAnnotation231, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *BTPTopLevelEnumDeclaration284) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []BTPAnnotation231 and assigns it to the Annotations field.
func (o *BTPTopLevelEnumDeclaration284) SetAnnotations(v []BTPAnnotation231) {
	o.Annotations = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPTopLevelEnumDeclaration284) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTopLevelEnumDeclaration284) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPTopLevelEnumDeclaration284) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPTopLevelEnumDeclaration284) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceInEmptyList returns the SpaceInEmptyList field value if set, zero value otherwise.
func (o *BTPTopLevelEnumDeclaration284) GetSpaceInEmptyList() BTPSpace10 {
	if o == nil || o.SpaceInEmptyList == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceInEmptyList
}

// GetSpaceInEmptyListOk returns a tuple with the SpaceInEmptyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTopLevelEnumDeclaration284) GetSpaceInEmptyListOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceInEmptyList == nil {
		return nil, false
	}
	return o.SpaceInEmptyList, true
}

// HasSpaceInEmptyList returns a boolean if a field has been set.
func (o *BTPTopLevelEnumDeclaration284) HasSpaceInEmptyList() bool {
	if o != nil && o.SpaceInEmptyList != nil {
		return true
	}

	return false
}

// SetSpaceInEmptyList gets a reference to the given BTPSpace10 and assigns it to the SpaceInEmptyList field.
func (o *BTPTopLevelEnumDeclaration284) SetSpaceInEmptyList(v BTPSpace10) {
	o.SpaceInEmptyList = &v
}

// GetTrailingComma returns the TrailingComma field value if set, zero value otherwise.
func (o *BTPTopLevelEnumDeclaration284) GetTrailingComma() bool {
	if o == nil || o.TrailingComma == nil {
		var ret bool
		return ret
	}
	return *o.TrailingComma
}

// GetTrailingCommaOk returns a tuple with the TrailingComma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTopLevelEnumDeclaration284) GetTrailingCommaOk() (*bool, bool) {
	if o == nil || o.TrailingComma == nil {
		return nil, false
	}
	return o.TrailingComma, true
}

// HasTrailingComma returns a boolean if a field has been set.
func (o *BTPTopLevelEnumDeclaration284) HasTrailingComma() bool {
	if o != nil && o.TrailingComma != nil {
		return true
	}

	return false
}

// SetTrailingComma gets a reference to the given bool and assigns it to the TrailingComma field.
func (o *BTPTopLevelEnumDeclaration284) SetTrailingComma(v bool) {
	o.TrailingComma = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *BTPTopLevelEnumDeclaration284) GetValues() []BTPIdentifier8 {
	if o == nil || o.Values == nil {
		var ret []BTPIdentifier8
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPTopLevelEnumDeclaration284) GetValuesOk() (*[]BTPIdentifier8, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *BTPTopLevelEnumDeclaration284) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []BTPIdentifier8 and assigns it to the Values field.
func (o *BTPTopLevelEnumDeclaration284) SetValues(v []BTPIdentifier8) {
	o.Values = &v
}

func (o BTPTopLevelEnumDeclaration284) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPTopLevelTypeDeclaration287, errBTPTopLevelTypeDeclaration287 := json.Marshal(o.BTPTopLevelTypeDeclaration287)
	if errBTPTopLevelTypeDeclaration287 != nil {
		return []byte{}, errBTPTopLevelTypeDeclaration287
	}
	errBTPTopLevelTypeDeclaration287 = json.Unmarshal([]byte(serializedBTPTopLevelTypeDeclaration287), &toSerialize)
	if errBTPTopLevelTypeDeclaration287 != nil {
		return []byte{}, errBTPTopLevelTypeDeclaration287
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceInEmptyList != nil {
		toSerialize["spaceInEmptyList"] = o.SpaceInEmptyList
	}
	if o.TrailingComma != nil {
		toSerialize["trailingComma"] = o.TrailingComma
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableBTPTopLevelEnumDeclaration284 struct {
	value *BTPTopLevelEnumDeclaration284
	isSet bool
}

func (v NullableBTPTopLevelEnumDeclaration284) Get() *BTPTopLevelEnumDeclaration284 {
	return v.value
}

func (v *NullableBTPTopLevelEnumDeclaration284) Set(val *BTPTopLevelEnumDeclaration284) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPTopLevelEnumDeclaration284) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPTopLevelEnumDeclaration284) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPTopLevelEnumDeclaration284(val *BTPTopLevelEnumDeclaration284) *NullableBTPTopLevelEnumDeclaration284 {
	return &NullableBTPTopLevelEnumDeclaration284{value: val, isSet: true}
}

func (v NullableBTPTopLevelEnumDeclaration284) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPTopLevelEnumDeclaration284) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
