/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTFSValueArray1499 struct for BTFSValueArray1499
type BTFSValueArray1499 struct {
	BTFSValue1888
	BtType *string `json:"btType,omitempty"`
	Value *[]BTFSValue1888 `json:"value,omitempty"`
	ValueObject *[]map[string]interface{} `json:"valueObject,omitempty"`
}

// NewBTFSValueArray1499 instantiates a new BTFSValueArray1499 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFSValueArray1499() *BTFSValueArray1499 {
	this := BTFSValueArray1499{}
	return &this
}

// NewBTFSValueArray1499WithDefaults instantiates a new BTFSValueArray1499 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFSValueArray1499WithDefaults() *BTFSValueArray1499 {
	this := BTFSValueArray1499{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFSValueArray1499) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueArray1499) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFSValueArray1499) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFSValueArray1499) SetBtType(v string) {
	o.BtType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTFSValueArray1499) GetValue() []BTFSValue1888 {
	if o == nil || o.Value == nil {
		var ret []BTFSValue1888
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueArray1499) GetValueOk() (*[]BTFSValue1888, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTFSValueArray1499) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []BTFSValue1888 and assigns it to the Value field.
func (o *BTFSValueArray1499) SetValue(v []BTFSValue1888) {
	o.Value = &v
}

// GetValueObject returns the ValueObject field value if set, zero value otherwise.
func (o *BTFSValueArray1499) GetValueObject() []map[string]interface{} {
	if o == nil || o.ValueObject == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.ValueObject
}

// GetValueObjectOk returns a tuple with the ValueObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSValueArray1499) GetValueObjectOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ValueObject == nil {
		return nil, false
	}
	return o.ValueObject, true
}

// HasValueObject returns a boolean if a field has been set.
func (o *BTFSValueArray1499) HasValueObject() bool {
	if o != nil && o.ValueObject != nil {
		return true
	}

	return false
}

// SetValueObject gets a reference to the given []map[string]interface{} and assigns it to the ValueObject field.
func (o *BTFSValueArray1499) SetValueObject(v []map[string]interface{}) {
	o.ValueObject = &v
}

func (o BTFSValueArray1499) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
	if errBTFSValue1888 != nil {
		return []byte{}, errBTFSValue1888
	}
	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
	if errBTFSValue1888 != nil {
		return []byte{}, errBTFSValue1888
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueObject != nil {
		toSerialize["valueObject"] = o.ValueObject
	}
	return json.Marshal(toSerialize)
}

type NullableBTFSValueArray1499 struct {
	value *BTFSValueArray1499
	isSet bool
}

func (v NullableBTFSValueArray1499) Get() *BTFSValueArray1499 {
	return v.value
}

func (v *NullableBTFSValueArray1499) Set(val *BTFSValueArray1499) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFSValueArray1499) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFSValueArray1499) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFSValueArray1499(val *BTFSValueArray1499) *NullableBTFSValueArray1499 {
	return &NullableBTFSValueArray1499{value: val, isSet: true}
}

func (v NullableBTFSValueArray1499) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFSValueArray1499) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
