/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPOperatorDeclaration264 struct for BTPOperatorDeclaration264
type BTPOperatorDeclaration264 struct {
	BTPProcedureDeclarationBase266
	BtType *string `json:"btType,omitempty"`
	Operator *string `json:"operator,omitempty"`
	SpaceAfterOperator *BTPSpace10 `json:"spaceAfterOperator,omitempty"`
	SpaceBeforeOperator *BTPSpace10 `json:"spaceBeforeOperator,omitempty"`
}

// NewBTPOperatorDeclaration264 instantiates a new BTPOperatorDeclaration264 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPOperatorDeclaration264() *BTPOperatorDeclaration264 {
	this := BTPOperatorDeclaration264{}
	return &this
}

// NewBTPOperatorDeclaration264WithDefaults instantiates a new BTPOperatorDeclaration264 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPOperatorDeclaration264WithDefaults() *BTPOperatorDeclaration264 {
	this := BTPOperatorDeclaration264{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPOperatorDeclaration264) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPOperatorDeclaration264) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPOperatorDeclaration264) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPOperatorDeclaration264) SetBtType(v string) {
	o.BtType = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *BTPOperatorDeclaration264) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPOperatorDeclaration264) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *BTPOperatorDeclaration264) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *BTPOperatorDeclaration264) SetOperator(v string) {
	o.Operator = &v
}

// GetSpaceAfterOperator returns the SpaceAfterOperator field value if set, zero value otherwise.
func (o *BTPOperatorDeclaration264) GetSpaceAfterOperator() BTPSpace10 {
	if o == nil || o.SpaceAfterOperator == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterOperator
}

// GetSpaceAfterOperatorOk returns a tuple with the SpaceAfterOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPOperatorDeclaration264) GetSpaceAfterOperatorOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterOperator == nil {
		return nil, false
	}
	return o.SpaceAfterOperator, true
}

// HasSpaceAfterOperator returns a boolean if a field has been set.
func (o *BTPOperatorDeclaration264) HasSpaceAfterOperator() bool {
	if o != nil && o.SpaceAfterOperator != nil {
		return true
	}

	return false
}

// SetSpaceAfterOperator gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterOperator field.
func (o *BTPOperatorDeclaration264) SetSpaceAfterOperator(v BTPSpace10) {
	o.SpaceAfterOperator = &v
}

// GetSpaceBeforeOperator returns the SpaceBeforeOperator field value if set, zero value otherwise.
func (o *BTPOperatorDeclaration264) GetSpaceBeforeOperator() BTPSpace10 {
	if o == nil || o.SpaceBeforeOperator == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBeforeOperator
}

// GetSpaceBeforeOperatorOk returns a tuple with the SpaceBeforeOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPOperatorDeclaration264) GetSpaceBeforeOperatorOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBeforeOperator == nil {
		return nil, false
	}
	return o.SpaceBeforeOperator, true
}

// HasSpaceBeforeOperator returns a boolean if a field has been set.
func (o *BTPOperatorDeclaration264) HasSpaceBeforeOperator() bool {
	if o != nil && o.SpaceBeforeOperator != nil {
		return true
	}

	return false
}

// SetSpaceBeforeOperator gets a reference to the given BTPSpace10 and assigns it to the SpaceBeforeOperator field.
func (o *BTPOperatorDeclaration264) SetSpaceBeforeOperator(v BTPSpace10) {
	o.SpaceBeforeOperator = &v
}

func (o BTPOperatorDeclaration264) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPProcedureDeclarationBase266, errBTPProcedureDeclarationBase266 := json.Marshal(o.BTPProcedureDeclarationBase266)
	if errBTPProcedureDeclarationBase266 != nil {
		return []byte{}, errBTPProcedureDeclarationBase266
	}
	errBTPProcedureDeclarationBase266 = json.Unmarshal([]byte(serializedBTPProcedureDeclarationBase266), &toSerialize)
	if errBTPProcedureDeclarationBase266 != nil {
		return []byte{}, errBTPProcedureDeclarationBase266
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.SpaceAfterOperator != nil {
		toSerialize["spaceAfterOperator"] = o.SpaceAfterOperator
	}
	if o.SpaceBeforeOperator != nil {
		toSerialize["spaceBeforeOperator"] = o.SpaceBeforeOperator
	}
	return json.Marshal(toSerialize)
}

type NullableBTPOperatorDeclaration264 struct {
	value *BTPOperatorDeclaration264
	isSet bool
}

func (v NullableBTPOperatorDeclaration264) Get() *BTPOperatorDeclaration264 {
	return v.value
}

func (v *NullableBTPOperatorDeclaration264) Set(val *BTPOperatorDeclaration264) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPOperatorDeclaration264) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPOperatorDeclaration264) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPOperatorDeclaration264(val *BTPOperatorDeclaration264) *NullableBTPOperatorDeclaration264 {
	return &NullableBTPOperatorDeclaration264{value: val, isSet: true}
}

func (v NullableBTPOperatorDeclaration264) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPOperatorDeclaration264) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
