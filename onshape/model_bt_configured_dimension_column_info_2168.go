/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTConfiguredDimensionColumnInfo2168 struct for BTConfiguredDimensionColumnInfo2168
type BTConfiguredDimensionColumnInfo2168 struct {
	BTConfiguredValuesColumnInfo1025
	BtType *string `json:"btType,omitempty"`
	DimensionId *string `json:"dimensionId,omitempty"`
	ParameterId *string `json:"parameterId,omitempty"`
}

// NewBTConfiguredDimensionColumnInfo2168 instantiates a new BTConfiguredDimensionColumnInfo2168 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTConfiguredDimensionColumnInfo2168() *BTConfiguredDimensionColumnInfo2168 {
	this := BTConfiguredDimensionColumnInfo2168{}
	return &this
}

// NewBTConfiguredDimensionColumnInfo2168WithDefaults instantiates a new BTConfiguredDimensionColumnInfo2168 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTConfiguredDimensionColumnInfo2168WithDefaults() *BTConfiguredDimensionColumnInfo2168 {
	this := BTConfiguredDimensionColumnInfo2168{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTConfiguredDimensionColumnInfo2168) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTConfiguredDimensionColumnInfo2168) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTConfiguredDimensionColumnInfo2168) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTConfiguredDimensionColumnInfo2168) SetBtType(v string) {
	o.BtType = &v
}

// GetDimensionId returns the DimensionId field value if set, zero value otherwise.
func (o *BTConfiguredDimensionColumnInfo2168) GetDimensionId() string {
	if o == nil || o.DimensionId == nil {
		var ret string
		return ret
	}
	return *o.DimensionId
}

// GetDimensionIdOk returns a tuple with the DimensionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTConfiguredDimensionColumnInfo2168) GetDimensionIdOk() (*string, bool) {
	if o == nil || o.DimensionId == nil {
		return nil, false
	}
	return o.DimensionId, true
}

// HasDimensionId returns a boolean if a field has been set.
func (o *BTConfiguredDimensionColumnInfo2168) HasDimensionId() bool {
	if o != nil && o.DimensionId != nil {
		return true
	}

	return false
}

// SetDimensionId gets a reference to the given string and assigns it to the DimensionId field.
func (o *BTConfiguredDimensionColumnInfo2168) SetDimensionId(v string) {
	o.DimensionId = &v
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *BTConfiguredDimensionColumnInfo2168) GetParameterId() string {
	if o == nil || o.ParameterId == nil {
		var ret string
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTConfiguredDimensionColumnInfo2168) GetParameterIdOk() (*string, bool) {
	if o == nil || o.ParameterId == nil {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *BTConfiguredDimensionColumnInfo2168) HasParameterId() bool {
	if o != nil && o.ParameterId != nil {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *BTConfiguredDimensionColumnInfo2168) SetParameterId(v string) {
	o.ParameterId = &v
}

func (o BTConfiguredDimensionColumnInfo2168) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTConfiguredValuesColumnInfo1025, errBTConfiguredValuesColumnInfo1025 := json.Marshal(o.BTConfiguredValuesColumnInfo1025)
	if errBTConfiguredValuesColumnInfo1025 != nil {
		return []byte{}, errBTConfiguredValuesColumnInfo1025
	}
	errBTConfiguredValuesColumnInfo1025 = json.Unmarshal([]byte(serializedBTConfiguredValuesColumnInfo1025), &toSerialize)
	if errBTConfiguredValuesColumnInfo1025 != nil {
		return []byte{}, errBTConfiguredValuesColumnInfo1025
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.DimensionId != nil {
		toSerialize["dimensionId"] = o.DimensionId
	}
	if o.ParameterId != nil {
		toSerialize["parameterId"] = o.ParameterId
	}
	return json.Marshal(toSerialize)
}

type NullableBTConfiguredDimensionColumnInfo2168 struct {
	value *BTConfiguredDimensionColumnInfo2168
	isSet bool
}

func (v NullableBTConfiguredDimensionColumnInfo2168) Get() *BTConfiguredDimensionColumnInfo2168 {
	return v.value
}

func (v *NullableBTConfiguredDimensionColumnInfo2168) Set(val *BTConfiguredDimensionColumnInfo2168) {
	v.value = val
	v.isSet = true
}

func (v NullableBTConfiguredDimensionColumnInfo2168) IsSet() bool {
	return v.isSet
}

func (v *NullableBTConfiguredDimensionColumnInfo2168) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTConfiguredDimensionColumnInfo2168(val *BTConfiguredDimensionColumnInfo2168) *NullableBTConfiguredDimensionColumnInfo2168 {
	return &NullableBTConfiguredDimensionColumnInfo2168{value: val, isSet: true}
}

func (v NullableBTConfiguredDimensionColumnInfo2168) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTConfiguredDimensionColumnInfo2168) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
