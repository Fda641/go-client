/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMParameterArray2025 struct for BTMParameterArray2025
type BTMParameterArray2025 struct {
	BTMParameter1
	BtType *string `json:"btType,omitempty"`
	Items *[]BTMArrayParameterItem1843 `json:"items,omitempty"`
}

// NewBTMParameterArray2025 instantiates a new BTMParameterArray2025 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMParameterArray2025() *BTMParameterArray2025 {
	this := BTMParameterArray2025{}
	return &this
}

// NewBTMParameterArray2025WithDefaults instantiates a new BTMParameterArray2025 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMParameterArray2025WithDefaults() *BTMParameterArray2025 {
	this := BTMParameterArray2025{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMParameterArray2025) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterArray2025) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMParameterArray2025) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMParameterArray2025) SetBtType(v string) {
	o.BtType = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *BTMParameterArray2025) GetItems() []BTMArrayParameterItem1843 {
	if o == nil || o.Items == nil {
		var ret []BTMArrayParameterItem1843
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterArray2025) GetItemsOk() (*[]BTMArrayParameterItem1843, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *BTMParameterArray2025) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []BTMArrayParameterItem1843 and assigns it to the Items field.
func (o *BTMParameterArray2025) SetItems(v []BTMArrayParameterItem1843) {
	o.Items = &v
}

func (o BTMParameterArray2025) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableBTMParameterArray2025 struct {
	value *BTMParameterArray2025
	isSet bool
}

func (v NullableBTMParameterArray2025) Get() *BTMParameterArray2025 {
	return v.value
}

func (v *NullableBTMParameterArray2025) Set(val *BTMParameterArray2025) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMParameterArray2025) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMParameterArray2025) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMParameterArray2025(val *BTMParameterArray2025) *NullableBTMParameterArray2025 {
	return &NullableBTMParameterArray2025{value: val, isSet: true}
}

func (v NullableBTMParameterArray2025) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMParameterArray2025) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
