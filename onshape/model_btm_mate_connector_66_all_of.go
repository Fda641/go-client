/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMMateConnector66AllOf struct for BTMMateConnector66AllOf
type BTMMateConnector66AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Implicit *bool `json:"implicit,omitempty"`
	IsHidden *bool `json:"isHidden,omitempty"`
	SavedFeatureType *string `json:"savedFeatureType,omitempty"`
}

// NewBTMMateConnector66AllOf instantiates a new BTMMateConnector66AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMMateConnector66AllOf() *BTMMateConnector66AllOf {
	this := BTMMateConnector66AllOf{}
	return &this
}

// NewBTMMateConnector66AllOfWithDefaults instantiates a new BTMMateConnector66AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMMateConnector66AllOfWithDefaults() *BTMMateConnector66AllOf {
	this := BTMMateConnector66AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMMateConnector66AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMateConnector66AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMMateConnector66AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMMateConnector66AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetImplicit returns the Implicit field value if set, zero value otherwise.
func (o *BTMMateConnector66AllOf) GetImplicit() bool {
	if o == nil || o.Implicit == nil {
		var ret bool
		return ret
	}
	return *o.Implicit
}

// GetImplicitOk returns a tuple with the Implicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMateConnector66AllOf) GetImplicitOk() (*bool, bool) {
	if o == nil || o.Implicit == nil {
		return nil, false
	}
	return o.Implicit, true
}

// HasImplicit returns a boolean if a field has been set.
func (o *BTMMateConnector66AllOf) HasImplicit() bool {
	if o != nil && o.Implicit != nil {
		return true
	}

	return false
}

// SetImplicit gets a reference to the given bool and assigns it to the Implicit field.
func (o *BTMMateConnector66AllOf) SetImplicit(v bool) {
	o.Implicit = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *BTMMateConnector66AllOf) GetIsHidden() bool {
	if o == nil || o.IsHidden == nil {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMateConnector66AllOf) GetIsHiddenOk() (*bool, bool) {
	if o == nil || o.IsHidden == nil {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *BTMMateConnector66AllOf) HasIsHidden() bool {
	if o != nil && o.IsHidden != nil {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *BTMMateConnector66AllOf) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetSavedFeatureType returns the SavedFeatureType field value if set, zero value otherwise.
func (o *BTMMateConnector66AllOf) GetSavedFeatureType() string {
	if o == nil || o.SavedFeatureType == nil {
		var ret string
		return ret
	}
	return *o.SavedFeatureType
}

// GetSavedFeatureTypeOk returns a tuple with the SavedFeatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMateConnector66AllOf) GetSavedFeatureTypeOk() (*string, bool) {
	if o == nil || o.SavedFeatureType == nil {
		return nil, false
	}
	return o.SavedFeatureType, true
}

// HasSavedFeatureType returns a boolean if a field has been set.
func (o *BTMMateConnector66AllOf) HasSavedFeatureType() bool {
	if o != nil && o.SavedFeatureType != nil {
		return true
	}

	return false
}

// SetSavedFeatureType gets a reference to the given string and assigns it to the SavedFeatureType field.
func (o *BTMMateConnector66AllOf) SetSavedFeatureType(v string) {
	o.SavedFeatureType = &v
}

func (o BTMMateConnector66AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Implicit != nil {
		toSerialize["implicit"] = o.Implicit
	}
	if o.IsHidden != nil {
		toSerialize["isHidden"] = o.IsHidden
	}
	if o.SavedFeatureType != nil {
		toSerialize["savedFeatureType"] = o.SavedFeatureType
	}
	return json.Marshal(toSerialize)
}

type NullableBTMMateConnector66AllOf struct {
	value *BTMMateConnector66AllOf
	isSet bool
}

func (v NullableBTMMateConnector66AllOf) Get() *BTMMateConnector66AllOf {
	return v.value
}

func (v *NullableBTMMateConnector66AllOf) Set(val *BTMMateConnector66AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMMateConnector66AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMMateConnector66AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMMateConnector66AllOf(val *BTMMateConnector66AllOf) *NullableBTMMateConnector66AllOf {
	return &NullableBTMMateConnector66AllOf{value: val, isSet: true}
}

func (v NullableBTMMateConnector66AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMMateConnector66AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
