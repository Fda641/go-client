/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTFSTable953 struct for BTFSTable953
type BTFSTable953 struct {
	BTTable1825
	BtType *string `json:"btType,omitempty"`
	CrossHighlightData *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
}

// NewBTFSTable953 instantiates a new BTFSTable953 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFSTable953() *BTFSTable953 {
	this := BTFSTable953{}
	return &this
}

// NewBTFSTable953WithDefaults instantiates a new BTFSTable953 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFSTable953WithDefaults() *BTFSTable953 {
	this := BTFSTable953{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFSTable953) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSTable953) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFSTable953) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFSTable953) SetBtType(v string) {
	o.BtType = &v
}

// GetCrossHighlightData returns the CrossHighlightData field value if set, zero value otherwise.
func (o *BTFSTable953) GetCrossHighlightData() BTTableBaseCrossHighlightData2609 {
	if o == nil || o.CrossHighlightData == nil {
		var ret BTTableBaseCrossHighlightData2609
		return ret
	}
	return *o.CrossHighlightData
}

// GetCrossHighlightDataOk returns a tuple with the CrossHighlightData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFSTable953) GetCrossHighlightDataOk() (*BTTableBaseCrossHighlightData2609, bool) {
	if o == nil || o.CrossHighlightData == nil {
		return nil, false
	}
	return o.CrossHighlightData, true
}

// HasCrossHighlightData returns a boolean if a field has been set.
func (o *BTFSTable953) HasCrossHighlightData() bool {
	if o != nil && o.CrossHighlightData != nil {
		return true
	}

	return false
}

// SetCrossHighlightData gets a reference to the given BTTableBaseCrossHighlightData2609 and assigns it to the CrossHighlightData field.
func (o *BTFSTable953) SetCrossHighlightData(v BTTableBaseCrossHighlightData2609) {
	o.CrossHighlightData = &v
}

func (o BTFSTable953) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
	if errBTTable1825 != nil {
		return []byte{}, errBTTable1825
	}
	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
	if errBTTable1825 != nil {
		return []byte{}, errBTTable1825
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CrossHighlightData != nil {
		toSerialize["crossHighlightData"] = o.CrossHighlightData
	}
	return json.Marshal(toSerialize)
}

type NullableBTFSTable953 struct {
	value *BTFSTable953
	isSet bool
}

func (v NullableBTFSTable953) Get() *BTFSTable953 {
	return v.value
}

func (v *NullableBTFSTable953) Set(val *BTFSTable953) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFSTable953) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFSTable953) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFSTable953(val *BTFSTable953) *NullableBTFSTable953 {
	return &NullableBTFSTable953{value: val, isSet: true}
}

func (v NullableBTFSTable953) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFSTable953) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
