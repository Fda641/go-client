/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPLiteralArray254 struct for BTPLiteralArray254
type BTPLiteralArray254 struct {
	BTPLiteral253
	BtType *string `json:"btType,omitempty"`
	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
	TrailingComma *bool `json:"trailingComma,omitempty"`
}

// NewBTPLiteralArray254 instantiates a new BTPLiteralArray254 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPLiteralArray254() *BTPLiteralArray254 {
	this := BTPLiteralArray254{}
	return &this
}

// NewBTPLiteralArray254WithDefaults instantiates a new BTPLiteralArray254 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPLiteralArray254WithDefaults() *BTPLiteralArray254 {
	this := BTPLiteralArray254{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPLiteralArray254) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLiteralArray254) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPLiteralArray254) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPLiteralArray254) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceInEmptyList returns the SpaceInEmptyList field value if set, zero value otherwise.
func (o *BTPLiteralArray254) GetSpaceInEmptyList() BTPSpace10 {
	if o == nil || o.SpaceInEmptyList == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceInEmptyList
}

// GetSpaceInEmptyListOk returns a tuple with the SpaceInEmptyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLiteralArray254) GetSpaceInEmptyListOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceInEmptyList == nil {
		return nil, false
	}
	return o.SpaceInEmptyList, true
}

// HasSpaceInEmptyList returns a boolean if a field has been set.
func (o *BTPLiteralArray254) HasSpaceInEmptyList() bool {
	if o != nil && o.SpaceInEmptyList != nil {
		return true
	}

	return false
}

// SetSpaceInEmptyList gets a reference to the given BTPSpace10 and assigns it to the SpaceInEmptyList field.
func (o *BTPLiteralArray254) SetSpaceInEmptyList(v BTPSpace10) {
	o.SpaceInEmptyList = &v
}

// GetTrailingComma returns the TrailingComma field value if set, zero value otherwise.
func (o *BTPLiteralArray254) GetTrailingComma() bool {
	if o == nil || o.TrailingComma == nil {
		var ret bool
		return ret
	}
	return *o.TrailingComma
}

// GetTrailingCommaOk returns a tuple with the TrailingComma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLiteralArray254) GetTrailingCommaOk() (*bool, bool) {
	if o == nil || o.TrailingComma == nil {
		return nil, false
	}
	return o.TrailingComma, true
}

// HasTrailingComma returns a boolean if a field has been set.
func (o *BTPLiteralArray254) HasTrailingComma() bool {
	if o != nil && o.TrailingComma != nil {
		return true
	}

	return false
}

// SetTrailingComma gets a reference to the given bool and assigns it to the TrailingComma field.
func (o *BTPLiteralArray254) SetTrailingComma(v bool) {
	o.TrailingComma = &v
}

func (o BTPLiteralArray254) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
	if errBTPLiteral253 != nil {
		return []byte{}, errBTPLiteral253
	}
	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
	if errBTPLiteral253 != nil {
		return []byte{}, errBTPLiteral253
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceInEmptyList != nil {
		toSerialize["spaceInEmptyList"] = o.SpaceInEmptyList
	}
	if o.TrailingComma != nil {
		toSerialize["trailingComma"] = o.TrailingComma
	}
	return json.Marshal(toSerialize)
}

type NullableBTPLiteralArray254 struct {
	value *BTPLiteralArray254
	isSet bool
}

func (v NullableBTPLiteralArray254) Get() *BTPLiteralArray254 {
	return v.value
}

func (v *NullableBTPLiteralArray254) Set(val *BTPLiteralArray254) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPLiteralArray254) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPLiteralArray254) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPLiteralArray254(val *BTPLiteralArray254) *NullableBTPLiteralArray254 {
	return &NullableBTPLiteralArray254{value: val, isSet: true}
}

func (v NullableBTPLiteralArray254) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPLiteralArray254) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
