/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTGlobalTreeMagicNodeInfo struct for BTGlobalTreeMagicNodeInfo
type BTGlobalTreeMagicNodeInfo struct {
	BTGlobalTreeNodeInfo
	SubType *int32 `json:"subType,omitempty"`
}

// NewBTGlobalTreeMagicNodeInfo instantiates a new BTGlobalTreeMagicNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTGlobalTreeMagicNodeInfo() *BTGlobalTreeMagicNodeInfo {
	this := BTGlobalTreeMagicNodeInfo{}
	return &this
}

// NewBTGlobalTreeMagicNodeInfoWithDefaults instantiates a new BTGlobalTreeMagicNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTGlobalTreeMagicNodeInfoWithDefaults() *BTGlobalTreeMagicNodeInfo {
	this := BTGlobalTreeMagicNodeInfo{}
	return &this
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *BTGlobalTreeMagicNodeInfo) GetSubType() int32 {
	if o == nil || o.SubType == nil {
		var ret int32
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTGlobalTreeMagicNodeInfo) GetSubTypeOk() (*int32, bool) {
	if o == nil || o.SubType == nil {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *BTGlobalTreeMagicNodeInfo) HasSubType() bool {
	if o != nil && o.SubType != nil {
		return true
	}

	return false
}

// SetSubType gets a reference to the given int32 and assigns it to the SubType field.
func (o *BTGlobalTreeMagicNodeInfo) SetSubType(v int32) {
	o.SubType = &v
}

func (o BTGlobalTreeMagicNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTGlobalTreeNodeInfo, errBTGlobalTreeNodeInfo := json.Marshal(o.BTGlobalTreeNodeInfo)
	if errBTGlobalTreeNodeInfo != nil {
		return []byte{}, errBTGlobalTreeNodeInfo
	}
	errBTGlobalTreeNodeInfo = json.Unmarshal([]byte(serializedBTGlobalTreeNodeInfo), &toSerialize)
	if errBTGlobalTreeNodeInfo != nil {
		return []byte{}, errBTGlobalTreeNodeInfo
	}
	if o.SubType != nil {
		toSerialize["subType"] = o.SubType
	}
	return json.Marshal(toSerialize)
}

type NullableBTGlobalTreeMagicNodeInfo struct {
	value *BTGlobalTreeMagicNodeInfo
	isSet bool
}

func (v NullableBTGlobalTreeMagicNodeInfo) Get() *BTGlobalTreeMagicNodeInfo {
	return v.value
}

func (v *NullableBTGlobalTreeMagicNodeInfo) Set(val *BTGlobalTreeMagicNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBTGlobalTreeMagicNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBTGlobalTreeMagicNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTGlobalTreeMagicNodeInfo(val *BTGlobalTreeMagicNodeInfo) *NullableBTGlobalTreeMagicNodeInfo {
	return &NullableBTGlobalTreeMagicNodeInfo{value: val, isSet: true}
}

func (v NullableBTGlobalTreeMagicNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTGlobalTreeMagicNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
