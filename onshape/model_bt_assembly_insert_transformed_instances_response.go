/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTAssemblyInsertTransformedInstancesResponse struct for BTAssemblyInsertTransformedInstancesResponse
type BTAssemblyInsertTransformedInstancesResponse struct {
	InsertResponses *[]BTAssemblyOccurrenceInfo `json:"insertResponses,omitempty"`
}

// NewBTAssemblyInsertTransformedInstancesResponse instantiates a new BTAssemblyInsertTransformedInstancesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTAssemblyInsertTransformedInstancesResponse() *BTAssemblyInsertTransformedInstancesResponse {
	this := BTAssemblyInsertTransformedInstancesResponse{}
	return &this
}

// NewBTAssemblyInsertTransformedInstancesResponseWithDefaults instantiates a new BTAssemblyInsertTransformedInstancesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTAssemblyInsertTransformedInstancesResponseWithDefaults() *BTAssemblyInsertTransformedInstancesResponse {
	this := BTAssemblyInsertTransformedInstancesResponse{}
	return &this
}

// GetInsertResponses returns the InsertResponses field value if set, zero value otherwise.
func (o *BTAssemblyInsertTransformedInstancesResponse) GetInsertResponses() []BTAssemblyOccurrenceInfo {
	if o == nil || o.InsertResponses == nil {
		var ret []BTAssemblyOccurrenceInfo
		return ret
	}
	return *o.InsertResponses
}

// GetInsertResponsesOk returns a tuple with the InsertResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTAssemblyInsertTransformedInstancesResponse) GetInsertResponsesOk() (*[]BTAssemblyOccurrenceInfo, bool) {
	if o == nil || o.InsertResponses == nil {
		return nil, false
	}
	return o.InsertResponses, true
}

// HasInsertResponses returns a boolean if a field has been set.
func (o *BTAssemblyInsertTransformedInstancesResponse) HasInsertResponses() bool {
	if o != nil && o.InsertResponses != nil {
		return true
	}

	return false
}

// SetInsertResponses gets a reference to the given []BTAssemblyOccurrenceInfo and assigns it to the InsertResponses field.
func (o *BTAssemblyInsertTransformedInstancesResponse) SetInsertResponses(v []BTAssemblyOccurrenceInfo) {
	o.InsertResponses = &v
}

func (o BTAssemblyInsertTransformedInstancesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InsertResponses != nil {
		toSerialize["insertResponses"] = o.InsertResponses
	}
	return json.Marshal(toSerialize)
}

type NullableBTAssemblyInsertTransformedInstancesResponse struct {
	value *BTAssemblyInsertTransformedInstancesResponse
	isSet bool
}

func (v NullableBTAssemblyInsertTransformedInstancesResponse) Get() *BTAssemblyInsertTransformedInstancesResponse {
	return v.value
}

func (v *NullableBTAssemblyInsertTransformedInstancesResponse) Set(val *BTAssemblyInsertTransformedInstancesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBTAssemblyInsertTransformedInstancesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBTAssemblyInsertTransformedInstancesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTAssemblyInsertTransformedInstancesResponse(val *BTAssemblyInsertTransformedInstancesResponse) *NullableBTAssemblyInsertTransformedInstancesResponse {
	return &NullableBTAssemblyInsertTransformedInstancesResponse{value: val, isSet: true}
}

func (v NullableBTAssemblyInsertTransformedInstancesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTAssemblyInsertTransformedInstancesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
