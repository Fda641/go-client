/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMMate64 struct for BTMMate64
type BTMMate64 struct {
	BTMAssemblyFeature887
	BtType *string `json:"btType,omitempty"`
	MateConnectorQueryList *BTMParameterQueryWithOccurrenceList67 `json:"mateConnectorQueryList,omitempty"`
	MateConnectors *[]BTMMateConnector66 `json:"mateConnectors,omitempty"`
	MateOffset *BTVector3d389 `json:"mateOffset,omitempty"`
	PrimaryAxisAlignment *bool `json:"primaryAxisAlignment,omitempty"`
	SecondaryAxisAlignment *string `json:"secondaryAxisAlignment,omitempty"`
}

// NewBTMMate64 instantiates a new BTMMate64 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMMate64() *BTMMate64 {
	this := BTMMate64{}
	return &this
}

// NewBTMMate64WithDefaults instantiates a new BTMMate64 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMMate64WithDefaults() *BTMMate64 {
	this := BTMMate64{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMMate64) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMMate64) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMMate64) SetBtType(v string) {
	o.BtType = &v
}

// GetMateConnectorQueryList returns the MateConnectorQueryList field value if set, zero value otherwise.
func (o *BTMMate64) GetMateConnectorQueryList() BTMParameterQueryWithOccurrenceList67 {
	if o == nil || o.MateConnectorQueryList == nil {
		var ret BTMParameterQueryWithOccurrenceList67
		return ret
	}
	return *o.MateConnectorQueryList
}

// GetMateConnectorQueryListOk returns a tuple with the MateConnectorQueryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetMateConnectorQueryListOk() (*BTMParameterQueryWithOccurrenceList67, bool) {
	if o == nil || o.MateConnectorQueryList == nil {
		return nil, false
	}
	return o.MateConnectorQueryList, true
}

// HasMateConnectorQueryList returns a boolean if a field has been set.
func (o *BTMMate64) HasMateConnectorQueryList() bool {
	if o != nil && o.MateConnectorQueryList != nil {
		return true
	}

	return false
}

// SetMateConnectorQueryList gets a reference to the given BTMParameterQueryWithOccurrenceList67 and assigns it to the MateConnectorQueryList field.
func (o *BTMMate64) SetMateConnectorQueryList(v BTMParameterQueryWithOccurrenceList67) {
	o.MateConnectorQueryList = &v
}

// GetMateConnectors returns the MateConnectors field value if set, zero value otherwise.
func (o *BTMMate64) GetMateConnectors() []BTMMateConnector66 {
	if o == nil || o.MateConnectors == nil {
		var ret []BTMMateConnector66
		return ret
	}
	return *o.MateConnectors
}

// GetMateConnectorsOk returns a tuple with the MateConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetMateConnectorsOk() (*[]BTMMateConnector66, bool) {
	if o == nil || o.MateConnectors == nil {
		return nil, false
	}
	return o.MateConnectors, true
}

// HasMateConnectors returns a boolean if a field has been set.
func (o *BTMMate64) HasMateConnectors() bool {
	if o != nil && o.MateConnectors != nil {
		return true
	}

	return false
}

// SetMateConnectors gets a reference to the given []BTMMateConnector66 and assigns it to the MateConnectors field.
func (o *BTMMate64) SetMateConnectors(v []BTMMateConnector66) {
	o.MateConnectors = &v
}

// GetMateOffset returns the MateOffset field value if set, zero value otherwise.
func (o *BTMMate64) GetMateOffset() BTVector3d389 {
	if o == nil || o.MateOffset == nil {
		var ret BTVector3d389
		return ret
	}
	return *o.MateOffset
}

// GetMateOffsetOk returns a tuple with the MateOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetMateOffsetOk() (*BTVector3d389, bool) {
	if o == nil || o.MateOffset == nil {
		return nil, false
	}
	return o.MateOffset, true
}

// HasMateOffset returns a boolean if a field has been set.
func (o *BTMMate64) HasMateOffset() bool {
	if o != nil && o.MateOffset != nil {
		return true
	}

	return false
}

// SetMateOffset gets a reference to the given BTVector3d389 and assigns it to the MateOffset field.
func (o *BTMMate64) SetMateOffset(v BTVector3d389) {
	o.MateOffset = &v
}

// GetPrimaryAxisAlignment returns the PrimaryAxisAlignment field value if set, zero value otherwise.
func (o *BTMMate64) GetPrimaryAxisAlignment() bool {
	if o == nil || o.PrimaryAxisAlignment == nil {
		var ret bool
		return ret
	}
	return *o.PrimaryAxisAlignment
}

// GetPrimaryAxisAlignmentOk returns a tuple with the PrimaryAxisAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetPrimaryAxisAlignmentOk() (*bool, bool) {
	if o == nil || o.PrimaryAxisAlignment == nil {
		return nil, false
	}
	return o.PrimaryAxisAlignment, true
}

// HasPrimaryAxisAlignment returns a boolean if a field has been set.
func (o *BTMMate64) HasPrimaryAxisAlignment() bool {
	if o != nil && o.PrimaryAxisAlignment != nil {
		return true
	}

	return false
}

// SetPrimaryAxisAlignment gets a reference to the given bool and assigns it to the PrimaryAxisAlignment field.
func (o *BTMMate64) SetPrimaryAxisAlignment(v bool) {
	o.PrimaryAxisAlignment = &v
}

// GetSecondaryAxisAlignment returns the SecondaryAxisAlignment field value if set, zero value otherwise.
func (o *BTMMate64) GetSecondaryAxisAlignment() string {
	if o == nil || o.SecondaryAxisAlignment == nil {
		var ret string
		return ret
	}
	return *o.SecondaryAxisAlignment
}

// GetSecondaryAxisAlignmentOk returns a tuple with the SecondaryAxisAlignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMMate64) GetSecondaryAxisAlignmentOk() (*string, bool) {
	if o == nil || o.SecondaryAxisAlignment == nil {
		return nil, false
	}
	return o.SecondaryAxisAlignment, true
}

// HasSecondaryAxisAlignment returns a boolean if a field has been set.
func (o *BTMMate64) HasSecondaryAxisAlignment() bool {
	if o != nil && o.SecondaryAxisAlignment != nil {
		return true
	}

	return false
}

// SetSecondaryAxisAlignment gets a reference to the given string and assigns it to the SecondaryAxisAlignment field.
func (o *BTMMate64) SetSecondaryAxisAlignment(v string) {
	o.SecondaryAxisAlignment = &v
}

func (o BTMMate64) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
	if errBTMAssemblyFeature887 != nil {
		return []byte{}, errBTMAssemblyFeature887
	}
	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
	if errBTMAssemblyFeature887 != nil {
		return []byte{}, errBTMAssemblyFeature887
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.MateConnectorQueryList != nil {
		toSerialize["mateConnectorQueryList"] = o.MateConnectorQueryList
	}
	if o.MateConnectors != nil {
		toSerialize["mateConnectors"] = o.MateConnectors
	}
	if o.MateOffset != nil {
		toSerialize["mateOffset"] = o.MateOffset
	}
	if o.PrimaryAxisAlignment != nil {
		toSerialize["primaryAxisAlignment"] = o.PrimaryAxisAlignment
	}
	if o.SecondaryAxisAlignment != nil {
		toSerialize["secondaryAxisAlignment"] = o.SecondaryAxisAlignment
	}
	return json.Marshal(toSerialize)
}

type NullableBTMMate64 struct {
	value *BTMMate64
	isSet bool
}

func (v NullableBTMMate64) Get() *BTMMate64 {
	return v.value
}

func (v *NullableBTMMate64) Set(val *BTMMate64) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMMate64) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMMate64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMMate64(val *BTMMate64) *NullableBTMMate64 {
	return &NullableBTMMate64{value: val, isSet: true}
}

func (v NullableBTMMate64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMMate64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
