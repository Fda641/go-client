/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPLValueAccess250AllOf struct for BTPLValueAccess250AllOf
type BTPLValueAccess250AllOf struct {
	Accessor *BTPPropertyAccessor23 `json:"accessor,omitempty"`
	Base *BTPLValue249 `json:"base,omitempty"`
	BtType *string `json:"btType,omitempty"`
}

// NewBTPLValueAccess250AllOf instantiates a new BTPLValueAccess250AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPLValueAccess250AllOf() *BTPLValueAccess250AllOf {
	this := BTPLValueAccess250AllOf{}
	return &this
}

// NewBTPLValueAccess250AllOfWithDefaults instantiates a new BTPLValueAccess250AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPLValueAccess250AllOfWithDefaults() *BTPLValueAccess250AllOf {
	this := BTPLValueAccess250AllOf{}
	return &this
}

// GetAccessor returns the Accessor field value if set, zero value otherwise.
func (o *BTPLValueAccess250AllOf) GetAccessor() BTPPropertyAccessor23 {
	if o == nil || o.Accessor == nil {
		var ret BTPPropertyAccessor23
		return ret
	}
	return *o.Accessor
}

// GetAccessorOk returns a tuple with the Accessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLValueAccess250AllOf) GetAccessorOk() (*BTPPropertyAccessor23, bool) {
	if o == nil || o.Accessor == nil {
		return nil, false
	}
	return o.Accessor, true
}

// HasAccessor returns a boolean if a field has been set.
func (o *BTPLValueAccess250AllOf) HasAccessor() bool {
	if o != nil && o.Accessor != nil {
		return true
	}

	return false
}

// SetAccessor gets a reference to the given BTPPropertyAccessor23 and assigns it to the Accessor field.
func (o *BTPLValueAccess250AllOf) SetAccessor(v BTPPropertyAccessor23) {
	o.Accessor = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *BTPLValueAccess250AllOf) GetBase() BTPLValue249 {
	if o == nil || o.Base == nil {
		var ret BTPLValue249
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLValueAccess250AllOf) GetBaseOk() (*BTPLValue249, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *BTPLValueAccess250AllOf) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given BTPLValue249 and assigns it to the Base field.
func (o *BTPLValueAccess250AllOf) SetBase(v BTPLValue249) {
	o.Base = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPLValueAccess250AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPLValueAccess250AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPLValueAccess250AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPLValueAccess250AllOf) SetBtType(v string) {
	o.BtType = &v
}

func (o BTPLValueAccess250AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accessor != nil {
		toSerialize["accessor"] = o.Accessor
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	return json.Marshal(toSerialize)
}

type NullableBTPLValueAccess250AllOf struct {
	value *BTPLValueAccess250AllOf
	isSet bool
}

func (v NullableBTPLValueAccess250AllOf) Get() *BTPLValueAccess250AllOf {
	return v.value
}

func (v *NullableBTPLValueAccess250AllOf) Set(val *BTPLValueAccess250AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPLValueAccess250AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPLValueAccess250AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPLValueAccess250AllOf(val *BTPLValueAccess250AllOf) *NullableBTPLValueAccess250AllOf {
	return &NullableBTPLValueAccess250AllOf{value: val, isSet: true}
}

func (v NullableBTPLValueAccess250AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPLValueAccess250AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
