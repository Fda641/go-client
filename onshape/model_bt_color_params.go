/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTColorParams struct for BTColorParams
type BTColorParams struct {
	Blue *int32 `json:"blue,omitempty"`
	Green *int32 `json:"green,omitempty"`
	Red *int32 `json:"red,omitempty"`
}

// NewBTColorParams instantiates a new BTColorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTColorParams() *BTColorParams {
	this := BTColorParams{}
	return &this
}

// NewBTColorParamsWithDefaults instantiates a new BTColorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTColorParamsWithDefaults() *BTColorParams {
	this := BTColorParams{}
	return &this
}

// GetBlue returns the Blue field value if set, zero value otherwise.
func (o *BTColorParams) GetBlue() int32 {
	if o == nil || o.Blue == nil {
		var ret int32
		return ret
	}
	return *o.Blue
}

// GetBlueOk returns a tuple with the Blue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTColorParams) GetBlueOk() (*int32, bool) {
	if o == nil || o.Blue == nil {
		return nil, false
	}
	return o.Blue, true
}

// HasBlue returns a boolean if a field has been set.
func (o *BTColorParams) HasBlue() bool {
	if o != nil && o.Blue != nil {
		return true
	}

	return false
}

// SetBlue gets a reference to the given int32 and assigns it to the Blue field.
func (o *BTColorParams) SetBlue(v int32) {
	o.Blue = &v
}

// GetGreen returns the Green field value if set, zero value otherwise.
func (o *BTColorParams) GetGreen() int32 {
	if o == nil || o.Green == nil {
		var ret int32
		return ret
	}
	return *o.Green
}

// GetGreenOk returns a tuple with the Green field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTColorParams) GetGreenOk() (*int32, bool) {
	if o == nil || o.Green == nil {
		return nil, false
	}
	return o.Green, true
}

// HasGreen returns a boolean if a field has been set.
func (o *BTColorParams) HasGreen() bool {
	if o != nil && o.Green != nil {
		return true
	}

	return false
}

// SetGreen gets a reference to the given int32 and assigns it to the Green field.
func (o *BTColorParams) SetGreen(v int32) {
	o.Green = &v
}

// GetRed returns the Red field value if set, zero value otherwise.
func (o *BTColorParams) GetRed() int32 {
	if o == nil || o.Red == nil {
		var ret int32
		return ret
	}
	return *o.Red
}

// GetRedOk returns a tuple with the Red field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTColorParams) GetRedOk() (*int32, bool) {
	if o == nil || o.Red == nil {
		return nil, false
	}
	return o.Red, true
}

// HasRed returns a boolean if a field has been set.
func (o *BTColorParams) HasRed() bool {
	if o != nil && o.Red != nil {
		return true
	}

	return false
}

// SetRed gets a reference to the given int32 and assigns it to the Red field.
func (o *BTColorParams) SetRed(v int32) {
	o.Red = &v
}

func (o BTColorParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Blue != nil {
		toSerialize["blue"] = o.Blue
	}
	if o.Green != nil {
		toSerialize["green"] = o.Green
	}
	if o.Red != nil {
		toSerialize["red"] = o.Red
	}
	return json.Marshal(toSerialize)
}

type NullableBTColorParams struct {
	value *BTColorParams
	isSet bool
}

func (v NullableBTColorParams) Get() *BTColorParams {
	return v.value
}

func (v *NullableBTColorParams) Set(val *BTColorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBTColorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBTColorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTColorParams(val *BTColorParams) *NullableBTColorParams {
	return &NullableBTColorParams{value: val, isSet: true}
}

func (v NullableBTColorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTColorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
