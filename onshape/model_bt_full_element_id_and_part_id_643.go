/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTFullElementIdAndPartId643 struct for BTFullElementIdAndPartId643
type BTFullElementIdAndPartId643 struct {
	BTFullElementIdWithDocument1729
	BtType *string `json:"btType,omitempty"`
	PartId *string `json:"partId,omitempty"`
}

// NewBTFullElementIdAndPartId643 instantiates a new BTFullElementIdAndPartId643 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTFullElementIdAndPartId643() *BTFullElementIdAndPartId643 {
	this := BTFullElementIdAndPartId643{}
	return &this
}

// NewBTFullElementIdAndPartId643WithDefaults instantiates a new BTFullElementIdAndPartId643 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTFullElementIdAndPartId643WithDefaults() *BTFullElementIdAndPartId643 {
	this := BTFullElementIdAndPartId643{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTFullElementIdAndPartId643) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFullElementIdAndPartId643) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTFullElementIdAndPartId643) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTFullElementIdAndPartId643) SetBtType(v string) {
	o.BtType = &v
}

// GetPartId returns the PartId field value if set, zero value otherwise.
func (o *BTFullElementIdAndPartId643) GetPartId() string {
	if o == nil || o.PartId == nil {
		var ret string
		return ret
	}
	return *o.PartId
}

// GetPartIdOk returns a tuple with the PartId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTFullElementIdAndPartId643) GetPartIdOk() (*string, bool) {
	if o == nil || o.PartId == nil {
		return nil, false
	}
	return o.PartId, true
}

// HasPartId returns a boolean if a field has been set.
func (o *BTFullElementIdAndPartId643) HasPartId() bool {
	if o != nil && o.PartId != nil {
		return true
	}

	return false
}

// SetPartId gets a reference to the given string and assigns it to the PartId field.
func (o *BTFullElementIdAndPartId643) SetPartId(v string) {
	o.PartId = &v
}

func (o BTFullElementIdAndPartId643) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTFullElementIdWithDocument1729, errBTFullElementIdWithDocument1729 := json.Marshal(o.BTFullElementIdWithDocument1729)
	if errBTFullElementIdWithDocument1729 != nil {
		return []byte{}, errBTFullElementIdWithDocument1729
	}
	errBTFullElementIdWithDocument1729 = json.Unmarshal([]byte(serializedBTFullElementIdWithDocument1729), &toSerialize)
	if errBTFullElementIdWithDocument1729 != nil {
		return []byte{}, errBTFullElementIdWithDocument1729
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.PartId != nil {
		toSerialize["partId"] = o.PartId
	}
	return json.Marshal(toSerialize)
}

type NullableBTFullElementIdAndPartId643 struct {
	value *BTFullElementIdAndPartId643
	isSet bool
}

func (v NullableBTFullElementIdAndPartId643) Get() *BTFullElementIdAndPartId643 {
	return v.value
}

func (v *NullableBTFullElementIdAndPartId643) Set(val *BTFullElementIdAndPartId643) {
	v.value = val
	v.isSet = true
}

func (v NullableBTFullElementIdAndPartId643) IsSet() bool {
	return v.isSet
}

func (v *NullableBTFullElementIdAndPartId643) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTFullElementIdAndPartId643(val *BTFullElementIdAndPartId643) *NullableBTFullElementIdAndPartId643 {
	return &NullableBTFullElementIdAndPartId643{value: val, isSet: true}
}

func (v NullableBTFullElementIdAndPartId643) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTFullElementIdAndPartId643) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
