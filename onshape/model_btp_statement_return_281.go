/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementReturn281 struct for BTPStatementReturn281
type BTPStatementReturn281 struct {
	BTPStatement269
	BtType *string `json:"btType,omitempty"`
	SpaceAfterReturn *BTPSpace10 `json:"spaceAfterReturn,omitempty"`
	Value *BTPExpression9 `json:"value,omitempty"`
}

// NewBTPStatementReturn281 instantiates a new BTPStatementReturn281 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementReturn281() *BTPStatementReturn281 {
	this := BTPStatementReturn281{}
	return &this
}

// NewBTPStatementReturn281WithDefaults instantiates a new BTPStatementReturn281 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementReturn281WithDefaults() *BTPStatementReturn281 {
	this := BTPStatementReturn281{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementReturn281) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementReturn281) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementReturn281) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementReturn281) SetBtType(v string) {
	o.BtType = &v
}

// GetSpaceAfterReturn returns the SpaceAfterReturn field value if set, zero value otherwise.
func (o *BTPStatementReturn281) GetSpaceAfterReturn() BTPSpace10 {
	if o == nil || o.SpaceAfterReturn == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterReturn
}

// GetSpaceAfterReturnOk returns a tuple with the SpaceAfterReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementReturn281) GetSpaceAfterReturnOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterReturn == nil {
		return nil, false
	}
	return o.SpaceAfterReturn, true
}

// HasSpaceAfterReturn returns a boolean if a field has been set.
func (o *BTPStatementReturn281) HasSpaceAfterReturn() bool {
	if o != nil && o.SpaceAfterReturn != nil {
		return true
	}

	return false
}

// SetSpaceAfterReturn gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterReturn field.
func (o *BTPStatementReturn281) SetSpaceAfterReturn(v BTPSpace10) {
	o.SpaceAfterReturn = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTPStatementReturn281) GetValue() BTPExpression9 {
	if o == nil || o.Value == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementReturn281) GetValueOk() (*BTPExpression9, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTPStatementReturn281) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given BTPExpression9 and assigns it to the Value field.
func (o *BTPStatementReturn281) SetValue(v BTPExpression9) {
	o.Value = &v
}

func (o BTPStatementReturn281) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.SpaceAfterReturn != nil {
		toSerialize["spaceAfterReturn"] = o.SpaceAfterReturn
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementReturn281 struct {
	value *BTPStatementReturn281
	isSet bool
}

func (v NullableBTPStatementReturn281) Get() *BTPStatementReturn281 {
	return v.value
}

func (v *NullableBTPStatementReturn281) Set(val *BTPStatementReturn281) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementReturn281) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementReturn281) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementReturn281(val *BTPStatementReturn281) *NullableBTPStatementReturn281 {
	return &NullableBTPStatementReturn281{value: val, isSet: true}
}

func (v NullableBTPStatementReturn281) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementReturn281) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
