/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMSketch151 struct for BTMSketch151
type BTMSketch151 struct {
	BTMFeature134
	BtType *string `json:"btType,omitempty"`
	Constraints *[]BTMSketchConstraint2 `json:"constraints,omitempty"`
	Entities *[]BTMSketchGeomEntity5 `json:"entities,omitempty"`
}

// NewBTMSketch151 instantiates a new BTMSketch151 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMSketch151() *BTMSketch151 {
	this := BTMSketch151{}
	return &this
}

// NewBTMSketch151WithDefaults instantiates a new BTMSketch151 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMSketch151WithDefaults() *BTMSketch151 {
	this := BTMSketch151{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMSketch151) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketch151) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMSketch151) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMSketch151) SetBtType(v string) {
	o.BtType = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *BTMSketch151) GetConstraints() []BTMSketchConstraint2 {
	if o == nil || o.Constraints == nil {
		var ret []BTMSketchConstraint2
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketch151) GetConstraintsOk() (*[]BTMSketchConstraint2, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *BTMSketch151) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []BTMSketchConstraint2 and assigns it to the Constraints field.
func (o *BTMSketch151) SetConstraints(v []BTMSketchConstraint2) {
	o.Constraints = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *BTMSketch151) GetEntities() []BTMSketchGeomEntity5 {
	if o == nil || o.Entities == nil {
		var ret []BTMSketchGeomEntity5
		return ret
	}
	return *o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMSketch151) GetEntitiesOk() (*[]BTMSketchGeomEntity5, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *BTMSketch151) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []BTMSketchGeomEntity5 and assigns it to the Entities field.
func (o *BTMSketch151) SetEntities(v []BTMSketchGeomEntity5) {
	o.Entities = &v
}

func (o BTMSketch151) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMFeature134, errBTMFeature134 := json.Marshal(o.BTMFeature134)
	if errBTMFeature134 != nil {
		return []byte{}, errBTMFeature134
	}
	errBTMFeature134 = json.Unmarshal([]byte(serializedBTMFeature134), &toSerialize)
	if errBTMFeature134 != nil {
		return []byte{}, errBTMFeature134
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	return json.Marshal(toSerialize)
}

type NullableBTMSketch151 struct {
	value *BTMSketch151
	isSet bool
}

func (v NullableBTMSketch151) Get() *BTMSketch151 {
	return v.value
}

func (v *NullableBTMSketch151) Set(val *BTMSketch151) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMSketch151) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMSketch151) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMSketch151(val *BTMSketch151) *NullableBTMSketch151 {
	return &NullableBTMSketch151{value: val, isSet: true}
}

func (v NullableBTMSketch151) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMSketch151) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
