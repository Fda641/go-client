/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPIdentifier8AllOf struct for BTPIdentifier8AllOf
type BTPIdentifier8AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	InvalidIdentifierForTest *string `json:"invalidIdentifierForTest,omitempty"`
}

// NewBTPIdentifier8AllOf instantiates a new BTPIdentifier8AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPIdentifier8AllOf() *BTPIdentifier8AllOf {
	this := BTPIdentifier8AllOf{}
	return &this
}

// NewBTPIdentifier8AllOfWithDefaults instantiates a new BTPIdentifier8AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPIdentifier8AllOfWithDefaults() *BTPIdentifier8AllOf {
	this := BTPIdentifier8AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPIdentifier8AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPIdentifier8AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPIdentifier8AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *BTPIdentifier8AllOf) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8AllOf) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *BTPIdentifier8AllOf) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *BTPIdentifier8AllOf) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetInvalidIdentifierForTest returns the InvalidIdentifierForTest field value if set, zero value otherwise.
func (o *BTPIdentifier8AllOf) GetInvalidIdentifierForTest() string {
	if o == nil || o.InvalidIdentifierForTest == nil {
		var ret string
		return ret
	}
	return *o.InvalidIdentifierForTest
}

// GetInvalidIdentifierForTestOk returns a tuple with the InvalidIdentifierForTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPIdentifier8AllOf) GetInvalidIdentifierForTestOk() (*string, bool) {
	if o == nil || o.InvalidIdentifierForTest == nil {
		return nil, false
	}
	return o.InvalidIdentifierForTest, true
}

// HasInvalidIdentifierForTest returns a boolean if a field has been set.
func (o *BTPIdentifier8AllOf) HasInvalidIdentifierForTest() bool {
	if o != nil && o.InvalidIdentifierForTest != nil {
		return true
	}

	return false
}

// SetInvalidIdentifierForTest gets a reference to the given string and assigns it to the InvalidIdentifierForTest field.
func (o *BTPIdentifier8AllOf) SetInvalidIdentifierForTest(v string) {
	o.InvalidIdentifierForTest = &v
}

func (o BTPIdentifier8AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.InvalidIdentifierForTest != nil {
		toSerialize["invalidIdentifierForTest"] = o.InvalidIdentifierForTest
	}
	return json.Marshal(toSerialize)
}

type NullableBTPIdentifier8AllOf struct {
	value *BTPIdentifier8AllOf
	isSet bool
}

func (v NullableBTPIdentifier8AllOf) Get() *BTPIdentifier8AllOf {
	return v.value
}

func (v *NullableBTPIdentifier8AllOf) Set(val *BTPIdentifier8AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPIdentifier8AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPIdentifier8AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPIdentifier8AllOf(val *BTPIdentifier8AllOf) *NullableBTPIdentifier8AllOf {
	return &NullableBTPIdentifier8AllOf{value: val, isSet: true}
}

func (v NullableBTPIdentifier8AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPIdentifier8AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
