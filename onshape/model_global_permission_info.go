/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// GlobalPermissionInfo struct for GlobalPermissionInfo
type GlobalPermissionInfo struct {
	AccessReports *bool `json:"accessReports,omitempty"`
	AdminEnterprise *bool `json:"adminEnterprise,omitempty"`
	AllowAppStoreAccess *bool `json:"allowAppStoreAccess,omitempty"`
	ApproveReleases *bool `json:"approveReleases,omitempty"`
	CreateProject *bool `json:"createProject,omitempty"`
	CreateReleases *bool `json:"createReleases,omitempty"`
	DeletePermanently *bool `json:"deletePermanently,omitempty"`
	ManageGuestUsers *bool `json:"manageGuestUsers,omitempty"`
	ManageRbac *bool `json:"manageRbac,omitempty"`
	ManageUsers *bool `json:"manageUsers,omitempty"`
	ShareForAnonymousAccess *bool `json:"shareForAnonymousAccess,omitempty"`
}

// NewGlobalPermissionInfo instantiates a new GlobalPermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalPermissionInfo() *GlobalPermissionInfo {
	this := GlobalPermissionInfo{}
	return &this
}

// NewGlobalPermissionInfoWithDefaults instantiates a new GlobalPermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalPermissionInfoWithDefaults() *GlobalPermissionInfo {
	this := GlobalPermissionInfo{}
	return &this
}

// GetAccessReports returns the AccessReports field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetAccessReports() bool {
	if o == nil || o.AccessReports == nil {
		var ret bool
		return ret
	}
	return *o.AccessReports
}

// GetAccessReportsOk returns a tuple with the AccessReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetAccessReportsOk() (*bool, bool) {
	if o == nil || o.AccessReports == nil {
		return nil, false
	}
	return o.AccessReports, true
}

// HasAccessReports returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasAccessReports() bool {
	if o != nil && o.AccessReports != nil {
		return true
	}

	return false
}

// SetAccessReports gets a reference to the given bool and assigns it to the AccessReports field.
func (o *GlobalPermissionInfo) SetAccessReports(v bool) {
	o.AccessReports = &v
}

// GetAdminEnterprise returns the AdminEnterprise field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetAdminEnterprise() bool {
	if o == nil || o.AdminEnterprise == nil {
		var ret bool
		return ret
	}
	return *o.AdminEnterprise
}

// GetAdminEnterpriseOk returns a tuple with the AdminEnterprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetAdminEnterpriseOk() (*bool, bool) {
	if o == nil || o.AdminEnterprise == nil {
		return nil, false
	}
	return o.AdminEnterprise, true
}

// HasAdminEnterprise returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasAdminEnterprise() bool {
	if o != nil && o.AdminEnterprise != nil {
		return true
	}

	return false
}

// SetAdminEnterprise gets a reference to the given bool and assigns it to the AdminEnterprise field.
func (o *GlobalPermissionInfo) SetAdminEnterprise(v bool) {
	o.AdminEnterprise = &v
}

// GetAllowAppStoreAccess returns the AllowAppStoreAccess field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetAllowAppStoreAccess() bool {
	if o == nil || o.AllowAppStoreAccess == nil {
		var ret bool
		return ret
	}
	return *o.AllowAppStoreAccess
}

// GetAllowAppStoreAccessOk returns a tuple with the AllowAppStoreAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetAllowAppStoreAccessOk() (*bool, bool) {
	if o == nil || o.AllowAppStoreAccess == nil {
		return nil, false
	}
	return o.AllowAppStoreAccess, true
}

// HasAllowAppStoreAccess returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasAllowAppStoreAccess() bool {
	if o != nil && o.AllowAppStoreAccess != nil {
		return true
	}

	return false
}

// SetAllowAppStoreAccess gets a reference to the given bool and assigns it to the AllowAppStoreAccess field.
func (o *GlobalPermissionInfo) SetAllowAppStoreAccess(v bool) {
	o.AllowAppStoreAccess = &v
}

// GetApproveReleases returns the ApproveReleases field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetApproveReleases() bool {
	if o == nil || o.ApproveReleases == nil {
		var ret bool
		return ret
	}
	return *o.ApproveReleases
}

// GetApproveReleasesOk returns a tuple with the ApproveReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetApproveReleasesOk() (*bool, bool) {
	if o == nil || o.ApproveReleases == nil {
		return nil, false
	}
	return o.ApproveReleases, true
}

// HasApproveReleases returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasApproveReleases() bool {
	if o != nil && o.ApproveReleases != nil {
		return true
	}

	return false
}

// SetApproveReleases gets a reference to the given bool and assigns it to the ApproveReleases field.
func (o *GlobalPermissionInfo) SetApproveReleases(v bool) {
	o.ApproveReleases = &v
}

// GetCreateProject returns the CreateProject field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetCreateProject() bool {
	if o == nil || o.CreateProject == nil {
		var ret bool
		return ret
	}
	return *o.CreateProject
}

// GetCreateProjectOk returns a tuple with the CreateProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetCreateProjectOk() (*bool, bool) {
	if o == nil || o.CreateProject == nil {
		return nil, false
	}
	return o.CreateProject, true
}

// HasCreateProject returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasCreateProject() bool {
	if o != nil && o.CreateProject != nil {
		return true
	}

	return false
}

// SetCreateProject gets a reference to the given bool and assigns it to the CreateProject field.
func (o *GlobalPermissionInfo) SetCreateProject(v bool) {
	o.CreateProject = &v
}

// GetCreateReleases returns the CreateReleases field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetCreateReleases() bool {
	if o == nil || o.CreateReleases == nil {
		var ret bool
		return ret
	}
	return *o.CreateReleases
}

// GetCreateReleasesOk returns a tuple with the CreateReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetCreateReleasesOk() (*bool, bool) {
	if o == nil || o.CreateReleases == nil {
		return nil, false
	}
	return o.CreateReleases, true
}

// HasCreateReleases returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasCreateReleases() bool {
	if o != nil && o.CreateReleases != nil {
		return true
	}

	return false
}

// SetCreateReleases gets a reference to the given bool and assigns it to the CreateReleases field.
func (o *GlobalPermissionInfo) SetCreateReleases(v bool) {
	o.CreateReleases = &v
}

// GetDeletePermanently returns the DeletePermanently field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetDeletePermanently() bool {
	if o == nil || o.DeletePermanently == nil {
		var ret bool
		return ret
	}
	return *o.DeletePermanently
}

// GetDeletePermanentlyOk returns a tuple with the DeletePermanently field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetDeletePermanentlyOk() (*bool, bool) {
	if o == nil || o.DeletePermanently == nil {
		return nil, false
	}
	return o.DeletePermanently, true
}

// HasDeletePermanently returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasDeletePermanently() bool {
	if o != nil && o.DeletePermanently != nil {
		return true
	}

	return false
}

// SetDeletePermanently gets a reference to the given bool and assigns it to the DeletePermanently field.
func (o *GlobalPermissionInfo) SetDeletePermanently(v bool) {
	o.DeletePermanently = &v
}

// GetManageGuestUsers returns the ManageGuestUsers field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetManageGuestUsers() bool {
	if o == nil || o.ManageGuestUsers == nil {
		var ret bool
		return ret
	}
	return *o.ManageGuestUsers
}

// GetManageGuestUsersOk returns a tuple with the ManageGuestUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetManageGuestUsersOk() (*bool, bool) {
	if o == nil || o.ManageGuestUsers == nil {
		return nil, false
	}
	return o.ManageGuestUsers, true
}

// HasManageGuestUsers returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasManageGuestUsers() bool {
	if o != nil && o.ManageGuestUsers != nil {
		return true
	}

	return false
}

// SetManageGuestUsers gets a reference to the given bool and assigns it to the ManageGuestUsers field.
func (o *GlobalPermissionInfo) SetManageGuestUsers(v bool) {
	o.ManageGuestUsers = &v
}

// GetManageRbac returns the ManageRbac field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetManageRbac() bool {
	if o == nil || o.ManageRbac == nil {
		var ret bool
		return ret
	}
	return *o.ManageRbac
}

// GetManageRbacOk returns a tuple with the ManageRbac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetManageRbacOk() (*bool, bool) {
	if o == nil || o.ManageRbac == nil {
		return nil, false
	}
	return o.ManageRbac, true
}

// HasManageRbac returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasManageRbac() bool {
	if o != nil && o.ManageRbac != nil {
		return true
	}

	return false
}

// SetManageRbac gets a reference to the given bool and assigns it to the ManageRbac field.
func (o *GlobalPermissionInfo) SetManageRbac(v bool) {
	o.ManageRbac = &v
}

// GetManageUsers returns the ManageUsers field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetManageUsers() bool {
	if o == nil || o.ManageUsers == nil {
		var ret bool
		return ret
	}
	return *o.ManageUsers
}

// GetManageUsersOk returns a tuple with the ManageUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetManageUsersOk() (*bool, bool) {
	if o == nil || o.ManageUsers == nil {
		return nil, false
	}
	return o.ManageUsers, true
}

// HasManageUsers returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasManageUsers() bool {
	if o != nil && o.ManageUsers != nil {
		return true
	}

	return false
}

// SetManageUsers gets a reference to the given bool and assigns it to the ManageUsers field.
func (o *GlobalPermissionInfo) SetManageUsers(v bool) {
	o.ManageUsers = &v
}

// GetShareForAnonymousAccess returns the ShareForAnonymousAccess field value if set, zero value otherwise.
func (o *GlobalPermissionInfo) GetShareForAnonymousAccess() bool {
	if o == nil || o.ShareForAnonymousAccess == nil {
		var ret bool
		return ret
	}
	return *o.ShareForAnonymousAccess
}

// GetShareForAnonymousAccessOk returns a tuple with the ShareForAnonymousAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalPermissionInfo) GetShareForAnonymousAccessOk() (*bool, bool) {
	if o == nil || o.ShareForAnonymousAccess == nil {
		return nil, false
	}
	return o.ShareForAnonymousAccess, true
}

// HasShareForAnonymousAccess returns a boolean if a field has been set.
func (o *GlobalPermissionInfo) HasShareForAnonymousAccess() bool {
	if o != nil && o.ShareForAnonymousAccess != nil {
		return true
	}

	return false
}

// SetShareForAnonymousAccess gets a reference to the given bool and assigns it to the ShareForAnonymousAccess field.
func (o *GlobalPermissionInfo) SetShareForAnonymousAccess(v bool) {
	o.ShareForAnonymousAccess = &v
}

func (o GlobalPermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessReports != nil {
		toSerialize["accessReports"] = o.AccessReports
	}
	if o.AdminEnterprise != nil {
		toSerialize["adminEnterprise"] = o.AdminEnterprise
	}
	if o.AllowAppStoreAccess != nil {
		toSerialize["allowAppStoreAccess"] = o.AllowAppStoreAccess
	}
	if o.ApproveReleases != nil {
		toSerialize["approveReleases"] = o.ApproveReleases
	}
	if o.CreateProject != nil {
		toSerialize["createProject"] = o.CreateProject
	}
	if o.CreateReleases != nil {
		toSerialize["createReleases"] = o.CreateReleases
	}
	if o.DeletePermanently != nil {
		toSerialize["deletePermanently"] = o.DeletePermanently
	}
	if o.ManageGuestUsers != nil {
		toSerialize["manageGuestUsers"] = o.ManageGuestUsers
	}
	if o.ManageRbac != nil {
		toSerialize["manageRbac"] = o.ManageRbac
	}
	if o.ManageUsers != nil {
		toSerialize["manageUsers"] = o.ManageUsers
	}
	if o.ShareForAnonymousAccess != nil {
		toSerialize["shareForAnonymousAccess"] = o.ShareForAnonymousAccess
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalPermissionInfo struct {
	value *GlobalPermissionInfo
	isSet bool
}

func (v NullableGlobalPermissionInfo) Get() *GlobalPermissionInfo {
	return v.value
}

func (v *NullableGlobalPermissionInfo) Set(val *GlobalPermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalPermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalPermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalPermissionInfo(val *GlobalPermissionInfo) *NullableGlobalPermissionInfo {
	return &NullableGlobalPermissionInfo{value: val, isSet: true}
}

func (v NullableGlobalPermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalPermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
