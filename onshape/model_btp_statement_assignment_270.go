/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementAssignment270 struct for BTPStatementAssignment270
type BTPStatementAssignment270 struct {
	BTPStatement269
	BtType *string `json:"btType,omitempty"`
	Lvalue *BTPLValue249 `json:"lvalue,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Rvalue *BTPExpression9 `json:"rvalue,omitempty"`
}

// NewBTPStatementAssignment270 instantiates a new BTPStatementAssignment270 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementAssignment270() *BTPStatementAssignment270 {
	this := BTPStatementAssignment270{}
	return &this
}

// NewBTPStatementAssignment270WithDefaults instantiates a new BTPStatementAssignment270 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementAssignment270WithDefaults() *BTPStatementAssignment270 {
	this := BTPStatementAssignment270{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementAssignment270) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementAssignment270) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementAssignment270) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementAssignment270) SetBtType(v string) {
	o.BtType = &v
}

// GetLvalue returns the Lvalue field value if set, zero value otherwise.
func (o *BTPStatementAssignment270) GetLvalue() BTPLValue249 {
	if o == nil || o.Lvalue == nil {
		var ret BTPLValue249
		return ret
	}
	return *o.Lvalue
}

// GetLvalueOk returns a tuple with the Lvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementAssignment270) GetLvalueOk() (*BTPLValue249, bool) {
	if o == nil || o.Lvalue == nil {
		return nil, false
	}
	return o.Lvalue, true
}

// HasLvalue returns a boolean if a field has been set.
func (o *BTPStatementAssignment270) HasLvalue() bool {
	if o != nil && o.Lvalue != nil {
		return true
	}

	return false
}

// SetLvalue gets a reference to the given BTPLValue249 and assigns it to the Lvalue field.
func (o *BTPStatementAssignment270) SetLvalue(v BTPLValue249) {
	o.Lvalue = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *BTPStatementAssignment270) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementAssignment270) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *BTPStatementAssignment270) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *BTPStatementAssignment270) SetOperator(v string) {
	o.Operator = &v
}

// GetRvalue returns the Rvalue field value if set, zero value otherwise.
func (o *BTPStatementAssignment270) GetRvalue() BTPExpression9 {
	if o == nil || o.Rvalue == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Rvalue
}

// GetRvalueOk returns a tuple with the Rvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementAssignment270) GetRvalueOk() (*BTPExpression9, bool) {
	if o == nil || o.Rvalue == nil {
		return nil, false
	}
	return o.Rvalue, true
}

// HasRvalue returns a boolean if a field has been set.
func (o *BTPStatementAssignment270) HasRvalue() bool {
	if o != nil && o.Rvalue != nil {
		return true
	}

	return false
}

// SetRvalue gets a reference to the given BTPExpression9 and assigns it to the Rvalue field.
func (o *BTPStatementAssignment270) SetRvalue(v BTPExpression9) {
	o.Rvalue = &v
}

func (o BTPStatementAssignment270) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Lvalue != nil {
		toSerialize["lvalue"] = o.Lvalue
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Rvalue != nil {
		toSerialize["rvalue"] = o.Rvalue
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementAssignment270 struct {
	value *BTPStatementAssignment270
	isSet bool
}

func (v NullableBTPStatementAssignment270) Get() *BTPStatementAssignment270 {
	return v.value
}

func (v *NullableBTPStatementAssignment270) Set(val *BTPStatementAssignment270) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementAssignment270) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementAssignment270) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementAssignment270(val *BTPStatementAssignment270) *NullableBTPStatementAssignment270 {
	return &NullableBTPStatementAssignment270{value: val, isSet: true}
}

func (v NullableBTPStatementAssignment270) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementAssignment270) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
