/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementTry1523 struct for BTPStatementTry1523
type BTPStatementTry1523 struct {
	BTPStatement269
	Body *BTPStatementBlock271 `json:"body,omitempty"`
	BtType *string `json:"btType,omitempty"`
	CatchBlock *BTPStatementBlock271 `json:"catchBlock,omitempty"`
	CatchVariable *BTPIdentifier8 `json:"catchVariable,omitempty"`
	Name *BTPIdentifier8 `json:"name,omitempty"`
	Silent *bool `json:"silent,omitempty"`
	SpaceAfterCatch *BTPSpace10 `json:"spaceAfterCatch,omitempty"`
	SpaceBeforeSilent *BTPSpace10 `json:"spaceBeforeSilent,omitempty"`
	StandardType *string `json:"standardType,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
}

// NewBTPStatementTry1523 instantiates a new BTPStatementTry1523 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementTry1523() *BTPStatementTry1523 {
	this := BTPStatementTry1523{}
	return &this
}

// NewBTPStatementTry1523WithDefaults instantiates a new BTPStatementTry1523 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementTry1523WithDefaults() *BTPStatementTry1523 {
	this := BTPStatementTry1523{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetBody() BTPStatementBlock271 {
	if o == nil || o.Body == nil {
		var ret BTPStatementBlock271
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetBodyOk() (*BTPStatementBlock271, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given BTPStatementBlock271 and assigns it to the Body field.
func (o *BTPStatementTry1523) SetBody(v BTPStatementBlock271) {
	o.Body = &v
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementTry1523) SetBtType(v string) {
	o.BtType = &v
}

// GetCatchBlock returns the CatchBlock field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetCatchBlock() BTPStatementBlock271 {
	if o == nil || o.CatchBlock == nil {
		var ret BTPStatementBlock271
		return ret
	}
	return *o.CatchBlock
}

// GetCatchBlockOk returns a tuple with the CatchBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetCatchBlockOk() (*BTPStatementBlock271, bool) {
	if o == nil || o.CatchBlock == nil {
		return nil, false
	}
	return o.CatchBlock, true
}

// HasCatchBlock returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasCatchBlock() bool {
	if o != nil && o.CatchBlock != nil {
		return true
	}

	return false
}

// SetCatchBlock gets a reference to the given BTPStatementBlock271 and assigns it to the CatchBlock field.
func (o *BTPStatementTry1523) SetCatchBlock(v BTPStatementBlock271) {
	o.CatchBlock = &v
}

// GetCatchVariable returns the CatchVariable field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetCatchVariable() BTPIdentifier8 {
	if o == nil || o.CatchVariable == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.CatchVariable
}

// GetCatchVariableOk returns a tuple with the CatchVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetCatchVariableOk() (*BTPIdentifier8, bool) {
	if o == nil || o.CatchVariable == nil {
		return nil, false
	}
	return o.CatchVariable, true
}

// HasCatchVariable returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasCatchVariable() bool {
	if o != nil && o.CatchVariable != nil {
		return true
	}

	return false
}

// SetCatchVariable gets a reference to the given BTPIdentifier8 and assigns it to the CatchVariable field.
func (o *BTPStatementTry1523) SetCatchVariable(v BTPIdentifier8) {
	o.CatchVariable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetName() BTPIdentifier8 {
	if o == nil || o.Name == nil {
		var ret BTPIdentifier8
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetNameOk() (*BTPIdentifier8, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given BTPIdentifier8 and assigns it to the Name field.
func (o *BTPStatementTry1523) SetName(v BTPIdentifier8) {
	o.Name = &v
}

// GetSilent returns the Silent field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetSilent() bool {
	if o == nil || o.Silent == nil {
		var ret bool
		return ret
	}
	return *o.Silent
}

// GetSilentOk returns a tuple with the Silent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetSilentOk() (*bool, bool) {
	if o == nil || o.Silent == nil {
		return nil, false
	}
	return o.Silent, true
}

// HasSilent returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasSilent() bool {
	if o != nil && o.Silent != nil {
		return true
	}

	return false
}

// SetSilent gets a reference to the given bool and assigns it to the Silent field.
func (o *BTPStatementTry1523) SetSilent(v bool) {
	o.Silent = &v
}

// GetSpaceAfterCatch returns the SpaceAfterCatch field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetSpaceAfterCatch() BTPSpace10 {
	if o == nil || o.SpaceAfterCatch == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceAfterCatch
}

// GetSpaceAfterCatchOk returns a tuple with the SpaceAfterCatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetSpaceAfterCatchOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceAfterCatch == nil {
		return nil, false
	}
	return o.SpaceAfterCatch, true
}

// HasSpaceAfterCatch returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasSpaceAfterCatch() bool {
	if o != nil && o.SpaceAfterCatch != nil {
		return true
	}

	return false
}

// SetSpaceAfterCatch gets a reference to the given BTPSpace10 and assigns it to the SpaceAfterCatch field.
func (o *BTPStatementTry1523) SetSpaceAfterCatch(v BTPSpace10) {
	o.SpaceAfterCatch = &v
}

// GetSpaceBeforeSilent returns the SpaceBeforeSilent field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetSpaceBeforeSilent() BTPSpace10 {
	if o == nil || o.SpaceBeforeSilent == nil {
		var ret BTPSpace10
		return ret
	}
	return *o.SpaceBeforeSilent
}

// GetSpaceBeforeSilentOk returns a tuple with the SpaceBeforeSilent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetSpaceBeforeSilentOk() (*BTPSpace10, bool) {
	if o == nil || o.SpaceBeforeSilent == nil {
		return nil, false
	}
	return o.SpaceBeforeSilent, true
}

// HasSpaceBeforeSilent returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasSpaceBeforeSilent() bool {
	if o != nil && o.SpaceBeforeSilent != nil {
		return true
	}

	return false
}

// SetSpaceBeforeSilent gets a reference to the given BTPSpace10 and assigns it to the SpaceBeforeSilent field.
func (o *BTPStatementTry1523) SetSpaceBeforeSilent(v BTPSpace10) {
	o.SpaceBeforeSilent = &v
}

// GetStandardType returns the StandardType field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetStandardType() string {
	if o == nil || o.StandardType == nil {
		var ret string
		return ret
	}
	return *o.StandardType
}

// GetStandardTypeOk returns a tuple with the StandardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetStandardTypeOk() (*string, bool) {
	if o == nil || o.StandardType == nil {
		return nil, false
	}
	return o.StandardType, true
}

// HasStandardType returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasStandardType() bool {
	if o != nil && o.StandardType != nil {
		return true
	}

	return false
}

// SetStandardType gets a reference to the given string and assigns it to the StandardType field.
func (o *BTPStatementTry1523) SetStandardType(v string) {
	o.StandardType = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *BTPStatementTry1523) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementTry1523) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *BTPStatementTry1523) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *BTPStatementTry1523) SetTypeName(v string) {
	o.TypeName = &v
}

func (o BTPStatementTry1523) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
	if errBTPStatement269 != nil {
		return []byte{}, errBTPStatement269
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.CatchBlock != nil {
		toSerialize["catchBlock"] = o.CatchBlock
	}
	if o.CatchVariable != nil {
		toSerialize["catchVariable"] = o.CatchVariable
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Silent != nil {
		toSerialize["silent"] = o.Silent
	}
	if o.SpaceAfterCatch != nil {
		toSerialize["spaceAfterCatch"] = o.SpaceAfterCatch
	}
	if o.SpaceBeforeSilent != nil {
		toSerialize["spaceBeforeSilent"] = o.SpaceBeforeSilent
	}
	if o.StandardType != nil {
		toSerialize["standardType"] = o.StandardType
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementTry1523 struct {
	value *BTPStatementTry1523
	isSet bool
}

func (v NullableBTPStatementTry1523) Get() *BTPStatementTry1523 {
	return v.value
}

func (v *NullableBTPStatementTry1523) Set(val *BTPStatementTry1523) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementTry1523) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementTry1523) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementTry1523(val *BTPStatementTry1523) *NullableBTPStatementTry1523 {
	return &NullableBTPStatementTry1523{value: val, isSet: true}
}

func (v NullableBTPStatementTry1523) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementTry1523) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
