/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMParameterQueryWithOccurrenceList67AllOf struct for BTMParameterQueryWithOccurrenceList67AllOf
type BTMParameterQueryWithOccurrenceList67AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Occurrences *[]BTOccurrence74 `json:"occurrences,omitempty"`
	Queries *[]BTMIndividualQueryWithOccurrenceBase904 `json:"queries,omitempty"`
}

// NewBTMParameterQueryWithOccurrenceList67AllOf instantiates a new BTMParameterQueryWithOccurrenceList67AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMParameterQueryWithOccurrenceList67AllOf() *BTMParameterQueryWithOccurrenceList67AllOf {
	this := BTMParameterQueryWithOccurrenceList67AllOf{}
	return &this
}

// NewBTMParameterQueryWithOccurrenceList67AllOfWithDefaults instantiates a new BTMParameterQueryWithOccurrenceList67AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMParameterQueryWithOccurrenceList67AllOfWithDefaults() *BTMParameterQueryWithOccurrenceList67AllOf {
	this := BTMParameterQueryWithOccurrenceList67AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetOccurrences returns the Occurrences field value if set, zero value otherwise.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetOccurrences() []BTOccurrence74 {
	if o == nil || o.Occurrences == nil {
		var ret []BTOccurrence74
		return ret
	}
	return *o.Occurrences
}

// GetOccurrencesOk returns a tuple with the Occurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetOccurrencesOk() (*[]BTOccurrence74, bool) {
	if o == nil || o.Occurrences == nil {
		return nil, false
	}
	return o.Occurrences, true
}

// HasOccurrences returns a boolean if a field has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) HasOccurrences() bool {
	if o != nil && o.Occurrences != nil {
		return true
	}

	return false
}

// SetOccurrences gets a reference to the given []BTOccurrence74 and assigns it to the Occurrences field.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) SetOccurrences(v []BTOccurrence74) {
	o.Occurrences = &v
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetQueries() []BTMIndividualQueryWithOccurrenceBase904 {
	if o == nil || o.Queries == nil {
		var ret []BTMIndividualQueryWithOccurrenceBase904
		return ret
	}
	return *o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) GetQueriesOk() (*[]BTMIndividualQueryWithOccurrenceBase904, bool) {
	if o == nil || o.Queries == nil {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) HasQueries() bool {
	if o != nil && o.Queries != nil {
		return true
	}

	return false
}

// SetQueries gets a reference to the given []BTMIndividualQueryWithOccurrenceBase904 and assigns it to the Queries field.
func (o *BTMParameterQueryWithOccurrenceList67AllOf) SetQueries(v []BTMIndividualQueryWithOccurrenceBase904) {
	o.Queries = &v
}

func (o BTMParameterQueryWithOccurrenceList67AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Occurrences != nil {
		toSerialize["occurrences"] = o.Occurrences
	}
	if o.Queries != nil {
		toSerialize["queries"] = o.Queries
	}
	return json.Marshal(toSerialize)
}

type NullableBTMParameterQueryWithOccurrenceList67AllOf struct {
	value *BTMParameterQueryWithOccurrenceList67AllOf
	isSet bool
}

func (v NullableBTMParameterQueryWithOccurrenceList67AllOf) Get() *BTMParameterQueryWithOccurrenceList67AllOf {
	return v.value
}

func (v *NullableBTMParameterQueryWithOccurrenceList67AllOf) Set(val *BTMParameterQueryWithOccurrenceList67AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMParameterQueryWithOccurrenceList67AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMParameterQueryWithOccurrenceList67AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMParameterQueryWithOccurrenceList67AllOf(val *BTMParameterQueryWithOccurrenceList67AllOf) *NullableBTMParameterQueryWithOccurrenceList67AllOf {
	return &NullableBTMParameterQueryWithOccurrenceList67AllOf{value: val, isSet: true}
}

func (v NullableBTMParameterQueryWithOccurrenceList67AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMParameterQueryWithOccurrenceList67AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
