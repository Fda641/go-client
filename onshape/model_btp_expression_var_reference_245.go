/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionVarReference245 struct for BTPExpressionVarReference245
type BTPExpressionVarReference245 struct {
	BTPExpression9
	BtType *string `json:"btType,omitempty"`
	Name *BTPName261 `json:"name,omitempty"`
}

// NewBTPExpressionVarReference245 instantiates a new BTPExpressionVarReference245 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionVarReference245() *BTPExpressionVarReference245 {
	this := BTPExpressionVarReference245{}
	return &this
}

// NewBTPExpressionVarReference245WithDefaults instantiates a new BTPExpressionVarReference245 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionVarReference245WithDefaults() *BTPExpressionVarReference245 {
	this := BTPExpressionVarReference245{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionVarReference245) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionVarReference245) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionVarReference245) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionVarReference245) SetBtType(v string) {
	o.BtType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BTPExpressionVarReference245) GetName() BTPName261 {
	if o == nil || o.Name == nil {
		var ret BTPName261
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionVarReference245) GetNameOk() (*BTPName261, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BTPExpressionVarReference245) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given BTPName261 and assigns it to the Name field.
func (o *BTPExpressionVarReference245) SetName(v BTPName261) {
	o.Name = &v
}

func (o BTPExpressionVarReference245) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionVarReference245 struct {
	value *BTPExpressionVarReference245
	isSet bool
}

func (v NullableBTPExpressionVarReference245) Get() *BTPExpressionVarReference245 {
	return v.value
}

func (v *NullableBTPExpressionVarReference245) Set(val *BTPExpressionVarReference245) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionVarReference245) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionVarReference245) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionVarReference245(val *BTPExpressionVarReference245) *NullableBTPExpressionVarReference245 {
	return &NullableBTPExpressionVarReference245{value: val, isSet: true}
}

func (v NullableBTPExpressionVarReference245) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionVarReference245) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
