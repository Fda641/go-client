/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTParameterSpecEnum171AllOf struct for BTParameterSpecEnum171AllOf
type BTParameterSpecEnum171AllOf struct {
	BtType *string `json:"btType,omitempty"`
	EnumName *string `json:"enumName,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	OptionNames *[]string `json:"optionNames,omitempty"`
	Options *[]string `json:"options,omitempty"`
}

// NewBTParameterSpecEnum171AllOf instantiates a new BTParameterSpecEnum171AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTParameterSpecEnum171AllOf() *BTParameterSpecEnum171AllOf {
	this := BTParameterSpecEnum171AllOf{}
	return &this
}

// NewBTParameterSpecEnum171AllOfWithDefaults instantiates a new BTParameterSpecEnum171AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTParameterSpecEnum171AllOfWithDefaults() *BTParameterSpecEnum171AllOf {
	this := BTParameterSpecEnum171AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTParameterSpecEnum171AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpecEnum171AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTParameterSpecEnum171AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTParameterSpecEnum171AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetEnumName returns the EnumName field value if set, zero value otherwise.
func (o *BTParameterSpecEnum171AllOf) GetEnumName() string {
	if o == nil || o.EnumName == nil {
		var ret string
		return ret
	}
	return *o.EnumName
}

// GetEnumNameOk returns a tuple with the EnumName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpecEnum171AllOf) GetEnumNameOk() (*string, bool) {
	if o == nil || o.EnumName == nil {
		return nil, false
	}
	return o.EnumName, true
}

// HasEnumName returns a boolean if a field has been set.
func (o *BTParameterSpecEnum171AllOf) HasEnumName() bool {
	if o != nil && o.EnumName != nil {
		return true
	}

	return false
}

// SetEnumName gets a reference to the given string and assigns it to the EnumName field.
func (o *BTParameterSpecEnum171AllOf) SetEnumName(v string) {
	o.EnumName = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BTParameterSpecEnum171AllOf) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpecEnum171AllOf) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *BTParameterSpecEnum171AllOf) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BTParameterSpecEnum171AllOf) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOptionNames returns the OptionNames field value if set, zero value otherwise.
func (o *BTParameterSpecEnum171AllOf) GetOptionNames() []string {
	if o == nil || o.OptionNames == nil {
		var ret []string
		return ret
	}
	return *o.OptionNames
}

// GetOptionNamesOk returns a tuple with the OptionNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpecEnum171AllOf) GetOptionNamesOk() (*[]string, bool) {
	if o == nil || o.OptionNames == nil {
		return nil, false
	}
	return o.OptionNames, true
}

// HasOptionNames returns a boolean if a field has been set.
func (o *BTParameterSpecEnum171AllOf) HasOptionNames() bool {
	if o != nil && o.OptionNames != nil {
		return true
	}

	return false
}

// SetOptionNames gets a reference to the given []string and assigns it to the OptionNames field.
func (o *BTParameterSpecEnum171AllOf) SetOptionNames(v []string) {
	o.OptionNames = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *BTParameterSpecEnum171AllOf) GetOptions() []string {
	if o == nil || o.Options == nil {
		var ret []string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTParameterSpecEnum171AllOf) GetOptionsOk() (*[]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *BTParameterSpecEnum171AllOf) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *BTParameterSpecEnum171AllOf) SetOptions(v []string) {
	o.Options = &v
}

func (o BTParameterSpecEnum171AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.EnumName != nil {
		toSerialize["enumName"] = o.EnumName
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.OptionNames != nil {
		toSerialize["optionNames"] = o.OptionNames
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableBTParameterSpecEnum171AllOf struct {
	value *BTParameterSpecEnum171AllOf
	isSet bool
}

func (v NullableBTParameterSpecEnum171AllOf) Get() *BTParameterSpecEnum171AllOf {
	return v.value
}

func (v *NullableBTParameterSpecEnum171AllOf) Set(val *BTParameterSpecEnum171AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTParameterSpecEnum171AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTParameterSpecEnum171AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTParameterSpecEnum171AllOf(val *BTParameterSpecEnum171AllOf) *NullableBTParameterSpecEnum171AllOf {
	return &NullableBTParameterSpecEnum171AllOf{value: val, isSet: true}
}

func (v NullableBTParameterSpecEnum171AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTParameterSpecEnum171AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
