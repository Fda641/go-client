/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPStatementExpression275AllOf struct for BTPStatementExpression275AllOf
type BTPStatementExpression275AllOf struct {
	BtType *string `json:"btType,omitempty"`
	Expression *BTPExpression9 `json:"expression,omitempty"`
}

// NewBTPStatementExpression275AllOf instantiates a new BTPStatementExpression275AllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPStatementExpression275AllOf() *BTPStatementExpression275AllOf {
	this := BTPStatementExpression275AllOf{}
	return &this
}

// NewBTPStatementExpression275AllOfWithDefaults instantiates a new BTPStatementExpression275AllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPStatementExpression275AllOfWithDefaults() *BTPStatementExpression275AllOf {
	this := BTPStatementExpression275AllOf{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPStatementExpression275AllOf) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementExpression275AllOf) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPStatementExpression275AllOf) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPStatementExpression275AllOf) SetBtType(v string) {
	o.BtType = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *BTPStatementExpression275AllOf) GetExpression() BTPExpression9 {
	if o == nil || o.Expression == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPStatementExpression275AllOf) GetExpressionOk() (*BTPExpression9, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *BTPStatementExpression275AllOf) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given BTPExpression9 and assigns it to the Expression field.
func (o *BTPStatementExpression275AllOf) SetExpression(v BTPExpression9) {
	o.Expression = &v
}

func (o BTPStatementExpression275AllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	return json.Marshal(toSerialize)
}

type NullableBTPStatementExpression275AllOf struct {
	value *BTPStatementExpression275AllOf
	isSet bool
}

func (v NullableBTPStatementExpression275AllOf) Get() *BTPStatementExpression275AllOf {
	return v.value
}

func (v *NullableBTPStatementExpression275AllOf) Set(val *BTPStatementExpression275AllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPStatementExpression275AllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPStatementExpression275AllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPStatementExpression275AllOf(val *BTPStatementExpression275AllOf) *NullableBTPStatementExpression275AllOf {
	return &NullableBTPStatementExpression275AllOf{value: val, isSet: true}
}

func (v NullableBTPStatementExpression275AllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPStatementExpression275AllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
