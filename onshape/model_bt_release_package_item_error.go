/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTReleasePackageItemError struct for BTReleasePackageItemError
type BTReleasePackageItemError struct {
	Message *string `json:"message,omitempty"`
	Severity *int32 `json:"severity,omitempty"`
}

// NewBTReleasePackageItemError instantiates a new BTReleasePackageItemError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTReleasePackageItemError() *BTReleasePackageItemError {
	this := BTReleasePackageItemError{}
	return &this
}

// NewBTReleasePackageItemErrorWithDefaults instantiates a new BTReleasePackageItemError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTReleasePackageItemErrorWithDefaults() *BTReleasePackageItemError {
	this := BTReleasePackageItemError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BTReleasePackageItemError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTReleasePackageItemError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BTReleasePackageItemError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BTReleasePackageItemError) SetMessage(v string) {
	o.Message = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *BTReleasePackageItemError) GetSeverity() int32 {
	if o == nil || o.Severity == nil {
		var ret int32
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTReleasePackageItemError) GetSeverityOk() (*int32, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *BTReleasePackageItemError) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given int32 and assigns it to the Severity field.
func (o *BTReleasePackageItemError) SetSeverity(v int32) {
	o.Severity = &v
}

func (o BTReleasePackageItemError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	return json.Marshal(toSerialize)
}

type NullableBTReleasePackageItemError struct {
	value *BTReleasePackageItemError
	isSet bool
}

func (v NullableBTReleasePackageItemError) Get() *BTReleasePackageItemError {
	return v.value
}

func (v *NullableBTReleasePackageItemError) Set(val *BTReleasePackageItemError) {
	v.value = val
	v.isSet = true
}

func (v NullableBTReleasePackageItemError) IsSet() bool {
	return v.isSet
}

func (v *NullableBTReleasePackageItemError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTReleasePackageItemError(val *BTReleasePackageItemError) *NullableBTReleasePackageItemError {
	return &NullableBTReleasePackageItemError{value: val, isSet: true}
}

func (v NullableBTReleasePackageItemError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTReleasePackageItemError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
