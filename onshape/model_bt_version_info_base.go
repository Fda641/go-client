/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTVersionInfoBase struct for BTVersionInfoBase
type BTVersionInfoBase struct {
	BTBaseInfo
	Type *string `json:"type,omitempty"`
	CreatedAt *JSONTime `json:"createdAt,omitempty"`
	Creator *BTUserBasicSummaryInfo `json:"creator,omitempty"`
	Description *string `json:"description,omitempty"`
	DocumentId *string `json:"documentId,omitempty"`
	LastModifier *BTUserBasicSummaryInfo `json:"lastModifier,omitempty"`
	Microversion *string `json:"microversion,omitempty"`
	ModifiedAt *JSONTime `json:"modifiedAt,omitempty"`
	OverrideDate *JSONTime `json:"overrideDate,omitempty"`
	Parent *string `json:"parent,omitempty"`
	Parents *[]BTVersionInfo `json:"parents,omitempty"`
	Thumbnail *BTThumbnailInfo `json:"thumbnail,omitempty"`
}

// NewBTVersionInfoBase instantiates a new BTVersionInfoBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTVersionInfoBase() *BTVersionInfoBase {
	this := BTVersionInfoBase{}
	return &this
}

// NewBTVersionInfoBaseWithDefaults instantiates a new BTVersionInfoBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTVersionInfoBaseWithDefaults() *BTVersionInfoBase {
	this := BTVersionInfoBase{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BTVersionInfoBase) SetType(v string) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetCreatedAt() JSONTime {
	if o == nil || o.CreatedAt == nil {
		var ret JSONTime
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetCreatedAtOk() (*JSONTime, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given JSONTime and assigns it to the CreatedAt field.
func (o *BTVersionInfoBase) SetCreatedAt(v JSONTime) {
	o.CreatedAt = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetCreator() BTUserBasicSummaryInfo {
	if o == nil || o.Creator == nil {
		var ret BTUserBasicSummaryInfo
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetCreatorOk() (*BTUserBasicSummaryInfo, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given BTUserBasicSummaryInfo and assigns it to the Creator field.
func (o *BTVersionInfoBase) SetCreator(v BTUserBasicSummaryInfo) {
	o.Creator = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BTVersionInfoBase) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *BTVersionInfoBase) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetLastModifier returns the LastModifier field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetLastModifier() BTUserBasicSummaryInfo {
	if o == nil || o.LastModifier == nil {
		var ret BTUserBasicSummaryInfo
		return ret
	}
	return *o.LastModifier
}

// GetLastModifierOk returns a tuple with the LastModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetLastModifierOk() (*BTUserBasicSummaryInfo, bool) {
	if o == nil || o.LastModifier == nil {
		return nil, false
	}
	return o.LastModifier, true
}

// HasLastModifier returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasLastModifier() bool {
	if o != nil && o.LastModifier != nil {
		return true
	}

	return false
}

// SetLastModifier gets a reference to the given BTUserBasicSummaryInfo and assigns it to the LastModifier field.
func (o *BTVersionInfoBase) SetLastModifier(v BTUserBasicSummaryInfo) {
	o.LastModifier = &v
}

// GetMicroversion returns the Microversion field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetMicroversion() string {
	if o == nil || o.Microversion == nil {
		var ret string
		return ret
	}
	return *o.Microversion
}

// GetMicroversionOk returns a tuple with the Microversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetMicroversionOk() (*string, bool) {
	if o == nil || o.Microversion == nil {
		return nil, false
	}
	return o.Microversion, true
}

// HasMicroversion returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasMicroversion() bool {
	if o != nil && o.Microversion != nil {
		return true
	}

	return false
}

// SetMicroversion gets a reference to the given string and assigns it to the Microversion field.
func (o *BTVersionInfoBase) SetMicroversion(v string) {
	o.Microversion = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetModifiedAt() JSONTime {
	if o == nil || o.ModifiedAt == nil {
		var ret JSONTime
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetModifiedAtOk() (*JSONTime, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given JSONTime and assigns it to the ModifiedAt field.
func (o *BTVersionInfoBase) SetModifiedAt(v JSONTime) {
	o.ModifiedAt = &v
}

// GetOverrideDate returns the OverrideDate field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetOverrideDate() JSONTime {
	if o == nil || o.OverrideDate == nil {
		var ret JSONTime
		return ret
	}
	return *o.OverrideDate
}

// GetOverrideDateOk returns a tuple with the OverrideDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetOverrideDateOk() (*JSONTime, bool) {
	if o == nil || o.OverrideDate == nil {
		return nil, false
	}
	return o.OverrideDate, true
}

// HasOverrideDate returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasOverrideDate() bool {
	if o != nil && o.OverrideDate != nil {
		return true
	}

	return false
}

// SetOverrideDate gets a reference to the given JSONTime and assigns it to the OverrideDate field.
func (o *BTVersionInfoBase) SetOverrideDate(v JSONTime) {
	o.OverrideDate = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetParent() string {
	if o == nil || o.Parent == nil {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetParentOk() (*string, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *BTVersionInfoBase) SetParent(v string) {
	o.Parent = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetParents() []BTVersionInfo {
	if o == nil || o.Parents == nil {
		var ret []BTVersionInfo
		return ret
	}
	return *o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetParentsOk() (*[]BTVersionInfo, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []BTVersionInfo and assigns it to the Parents field.
func (o *BTVersionInfoBase) SetParents(v []BTVersionInfo) {
	o.Parents = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *BTVersionInfoBase) GetThumbnail() BTThumbnailInfo {
	if o == nil || o.Thumbnail == nil {
		var ret BTThumbnailInfo
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTVersionInfoBase) GetThumbnailOk() (*BTThumbnailInfo, bool) {
	if o == nil || o.Thumbnail == nil {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *BTVersionInfoBase) HasThumbnail() bool {
	if o != nil && o.Thumbnail != nil {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given BTThumbnailInfo and assigns it to the Thumbnail field.
func (o *BTVersionInfoBase) SetThumbnail(v BTThumbnailInfo) {
	o.Thumbnail = &v
}

func (o BTVersionInfoBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTBaseInfo, errBTBaseInfo := json.Marshal(o.BTBaseInfo)
	if errBTBaseInfo != nil {
		return []byte{}, errBTBaseInfo
	}
	errBTBaseInfo = json.Unmarshal([]byte(serializedBTBaseInfo), &toSerialize)
	if errBTBaseInfo != nil {
		return []byte{}, errBTBaseInfo
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.LastModifier != nil {
		toSerialize["lastModifier"] = o.LastModifier
	}
	if o.Microversion != nil {
		toSerialize["microversion"] = o.Microversion
	}
	if o.ModifiedAt != nil {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if o.OverrideDate != nil {
		toSerialize["overrideDate"] = o.OverrideDate
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Thumbnail != nil {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	return json.Marshal(toSerialize)
}

type NullableBTVersionInfoBase struct {
	value *BTVersionInfoBase
	isSet bool
}

func (v NullableBTVersionInfoBase) Get() *BTVersionInfoBase {
	return v.value
}

func (v *NullableBTVersionInfoBase) Set(val *BTVersionInfoBase) {
	v.value = val
	v.isSet = true
}

func (v NullableBTVersionInfoBase) IsSet() bool {
	return v.isSet
}

func (v *NullableBTVersionInfoBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTVersionInfoBase(val *BTVersionInfoBase) *NullableBTVersionInfoBase {
	return &NullableBTVersionInfoBase{value: val, isSet: true}
}

func (v NullableBTVersionInfoBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTVersionInfoBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
