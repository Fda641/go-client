/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTMParameterQuantity147 struct for BTMParameterQuantity147
type BTMParameterQuantity147 struct {
	BTMParameter1
	BtType *string `json:"btType,omitempty"`
	Expression *string `json:"expression,omitempty"`
	IsInteger *bool `json:"isInteger,omitempty"`
	Units *string `json:"units,omitempty"`
	Value *float64 `json:"value,omitempty"`
}

// NewBTMParameterQuantity147 instantiates a new BTMParameterQuantity147 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTMParameterQuantity147() *BTMParameterQuantity147 {
	this := BTMParameterQuantity147{}
	return &this
}

// NewBTMParameterQuantity147WithDefaults instantiates a new BTMParameterQuantity147 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTMParameterQuantity147WithDefaults() *BTMParameterQuantity147 {
	this := BTMParameterQuantity147{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTMParameterQuantity147) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQuantity147) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTMParameterQuantity147) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTMParameterQuantity147) SetBtType(v string) {
	o.BtType = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *BTMParameterQuantity147) GetExpression() string {
	if o == nil || o.Expression == nil {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQuantity147) GetExpressionOk() (*string, bool) {
	if o == nil || o.Expression == nil {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *BTMParameterQuantity147) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *BTMParameterQuantity147) SetExpression(v string) {
	o.Expression = &v
}

// GetIsInteger returns the IsInteger field value if set, zero value otherwise.
func (o *BTMParameterQuantity147) GetIsInteger() bool {
	if o == nil || o.IsInteger == nil {
		var ret bool
		return ret
	}
	return *o.IsInteger
}

// GetIsIntegerOk returns a tuple with the IsInteger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQuantity147) GetIsIntegerOk() (*bool, bool) {
	if o == nil || o.IsInteger == nil {
		return nil, false
	}
	return o.IsInteger, true
}

// HasIsInteger returns a boolean if a field has been set.
func (o *BTMParameterQuantity147) HasIsInteger() bool {
	if o != nil && o.IsInteger != nil {
		return true
	}

	return false
}

// SetIsInteger gets a reference to the given bool and assigns it to the IsInteger field.
func (o *BTMParameterQuantity147) SetIsInteger(v bool) {
	o.IsInteger = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *BTMParameterQuantity147) GetUnits() string {
	if o == nil || o.Units == nil {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQuantity147) GetUnitsOk() (*string, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *BTMParameterQuantity147) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *BTMParameterQuantity147) SetUnits(v string) {
	o.Units = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BTMParameterQuantity147) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTMParameterQuantity147) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BTMParameterQuantity147) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *BTMParameterQuantity147) SetValue(v float64) {
	o.Value = &v
}

func (o BTMParameterQuantity147) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
	if errBTMParameter1 != nil {
		return []byte{}, errBTMParameter1
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.IsInteger != nil {
		toSerialize["isInteger"] = o.IsInteger
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableBTMParameterQuantity147 struct {
	value *BTMParameterQuantity147
	isSet bool
}

func (v NullableBTMParameterQuantity147) Get() *BTMParameterQuantity147 {
	return v.value
}

func (v *NullableBTMParameterQuantity147) Set(val *BTMParameterQuantity147) {
	v.value = val
	v.isSet = true
}

func (v NullableBTMParameterQuantity147) IsSet() bool {
	return v.isSet
}

func (v *NullableBTMParameterQuantity147) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTMParameterQuantity147(val *BTMParameterQuantity147) *NullableBTMParameterQuantity147 {
	return &NullableBTMParameterQuantity147{value: val, isSet: true}
}

func (v NullableBTMParameterQuantity147) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTMParameterQuantity147) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
