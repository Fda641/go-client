/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// ConfigurationEntry struct for ConfigurationEntry
type ConfigurationEntry struct {
	ParameterId *string `json:"parameterId,omitempty"`
	ParameterValue *string `json:"parameterValue,omitempty"`
}

// NewConfigurationEntry instantiates a new ConfigurationEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationEntry() *ConfigurationEntry {
	this := ConfigurationEntry{}
	return &this
}

// NewConfigurationEntryWithDefaults instantiates a new ConfigurationEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationEntryWithDefaults() *ConfigurationEntry {
	this := ConfigurationEntry{}
	return &this
}

// GetParameterId returns the ParameterId field value if set, zero value otherwise.
func (o *ConfigurationEntry) GetParameterId() string {
	if o == nil || o.ParameterId == nil {
		var ret string
		return ret
	}
	return *o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationEntry) GetParameterIdOk() (*string, bool) {
	if o == nil || o.ParameterId == nil {
		return nil, false
	}
	return o.ParameterId, true
}

// HasParameterId returns a boolean if a field has been set.
func (o *ConfigurationEntry) HasParameterId() bool {
	if o != nil && o.ParameterId != nil {
		return true
	}

	return false
}

// SetParameterId gets a reference to the given string and assigns it to the ParameterId field.
func (o *ConfigurationEntry) SetParameterId(v string) {
	o.ParameterId = &v
}

// GetParameterValue returns the ParameterValue field value if set, zero value otherwise.
func (o *ConfigurationEntry) GetParameterValue() string {
	if o == nil || o.ParameterValue == nil {
		var ret string
		return ret
	}
	return *o.ParameterValue
}

// GetParameterValueOk returns a tuple with the ParameterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationEntry) GetParameterValueOk() (*string, bool) {
	if o == nil || o.ParameterValue == nil {
		return nil, false
	}
	return o.ParameterValue, true
}

// HasParameterValue returns a boolean if a field has been set.
func (o *ConfigurationEntry) HasParameterValue() bool {
	if o != nil && o.ParameterValue != nil {
		return true
	}

	return false
}

// SetParameterValue gets a reference to the given string and assigns it to the ParameterValue field.
func (o *ConfigurationEntry) SetParameterValue(v string) {
	o.ParameterValue = &v
}

func (o ConfigurationEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ParameterId != nil {
		toSerialize["parameterId"] = o.ParameterId
	}
	if o.ParameterValue != nil {
		toSerialize["parameterValue"] = o.ParameterValue
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationEntry struct {
	value *ConfigurationEntry
	isSet bool
}

func (v NullableConfigurationEntry) Get() *ConfigurationEntry {
	return v.value
}

func (v *NullableConfigurationEntry) Set(val *ConfigurationEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationEntry(val *ConfigurationEntry) *NullableConfigurationEntry {
	return &NullableConfigurationEntry{value: val, isSet: true}
}

func (v NullableConfigurationEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
