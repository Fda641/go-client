/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// BTPExpressionIs242 struct for BTPExpressionIs242
type BTPExpressionIs242 struct {
	BTPExpression9
	BtType *string `json:"btType,omitempty"`
	Operand *BTPExpression9 `json:"operand,omitempty"`
	TypeName *BTPTypeName290 `json:"typeName,omitempty"`
}

// NewBTPExpressionIs242 instantiates a new BTPExpressionIs242 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBTPExpressionIs242() *BTPExpressionIs242 {
	this := BTPExpressionIs242{}
	return &this
}

// NewBTPExpressionIs242WithDefaults instantiates a new BTPExpressionIs242 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBTPExpressionIs242WithDefaults() *BTPExpressionIs242 {
	this := BTPExpressionIs242{}
	return &this
}

// GetBtType returns the BtType field value if set, zero value otherwise.
func (o *BTPExpressionIs242) GetBtType() string {
	if o == nil || o.BtType == nil {
		var ret string
		return ret
	}
	return *o.BtType
}

// GetBtTypeOk returns a tuple with the BtType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionIs242) GetBtTypeOk() (*string, bool) {
	if o == nil || o.BtType == nil {
		return nil, false
	}
	return o.BtType, true
}

// HasBtType returns a boolean if a field has been set.
func (o *BTPExpressionIs242) HasBtType() bool {
	if o != nil && o.BtType != nil {
		return true
	}

	return false
}

// SetBtType gets a reference to the given string and assigns it to the BtType field.
func (o *BTPExpressionIs242) SetBtType(v string) {
	o.BtType = &v
}

// GetOperand returns the Operand field value if set, zero value otherwise.
func (o *BTPExpressionIs242) GetOperand() BTPExpression9 {
	if o == nil || o.Operand == nil {
		var ret BTPExpression9
		return ret
	}
	return *o.Operand
}

// GetOperandOk returns a tuple with the Operand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionIs242) GetOperandOk() (*BTPExpression9, bool) {
	if o == nil || o.Operand == nil {
		return nil, false
	}
	return o.Operand, true
}

// HasOperand returns a boolean if a field has been set.
func (o *BTPExpressionIs242) HasOperand() bool {
	if o != nil && o.Operand != nil {
		return true
	}

	return false
}

// SetOperand gets a reference to the given BTPExpression9 and assigns it to the Operand field.
func (o *BTPExpressionIs242) SetOperand(v BTPExpression9) {
	o.Operand = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *BTPExpressionIs242) GetTypeName() BTPTypeName290 {
	if o == nil || o.TypeName == nil {
		var ret BTPTypeName290
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BTPExpressionIs242) GetTypeNameOk() (*BTPTypeName290, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *BTPExpressionIs242) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given BTPTypeName290 and assigns it to the TypeName field.
func (o *BTPExpressionIs242) SetTypeName(v BTPTypeName290) {
	o.TypeName = &v
}

func (o BTPExpressionIs242) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
	if errBTPExpression9 != nil {
		return []byte{}, errBTPExpression9
	}
	if o.BtType != nil {
		toSerialize["btType"] = o.BtType
	}
	if o.Operand != nil {
		toSerialize["operand"] = o.Operand
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	return json.Marshal(toSerialize)
}

type NullableBTPExpressionIs242 struct {
	value *BTPExpressionIs242
	isSet bool
}

func (v NullableBTPExpressionIs242) Get() *BTPExpressionIs242 {
	return v.value
}

func (v *NullableBTPExpressionIs242) Set(val *BTPExpressionIs242) {
	v.value = val
	v.isSet = true
}

func (v NullableBTPExpressionIs242) IsSet() bool {
	return v.isSet
}

func (v *NullableBTPExpressionIs242) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBTPExpressionIs242(val *BTPExpressionIs242) *NullableBTPExpressionIs242 {
	return &NullableBTPExpressionIs242{value: val, isSet: true}
}

func (v NullableBTPExpressionIs242) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBTPExpressionIs242) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
