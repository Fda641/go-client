/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.113
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package onshape

import (
	"encoding/json"
)

// FormDataContentDisposition struct for FormDataContentDisposition
type FormDataContentDisposition struct {
	CreationDate *JSONTime `json:"creationDate,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	ModificationDate *JSONTime `json:"modificationDate,omitempty"`
	Name *string `json:"name,omitempty"`
	Parameters *map[string]string `json:"parameters,omitempty"`
	ReadDate *JSONTime `json:"readDate,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewFormDataContentDisposition instantiates a new FormDataContentDisposition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormDataContentDisposition() *FormDataContentDisposition {
	this := FormDataContentDisposition{}
	return &this
}

// NewFormDataContentDispositionWithDefaults instantiates a new FormDataContentDisposition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormDataContentDispositionWithDefaults() *FormDataContentDisposition {
	this := FormDataContentDisposition{}
	return &this
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetCreationDate() JSONTime {
	if o == nil || o.CreationDate == nil {
		var ret JSONTime
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetCreationDateOk() (*JSONTime, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given JSONTime and assigns it to the CreationDate field.
func (o *FormDataContentDisposition) SetCreationDate(v JSONTime) {
	o.CreationDate = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetFileName() string {
	if o == nil || o.FileName == nil {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetFileNameOk() (*string, bool) {
	if o == nil || o.FileName == nil {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasFileName() bool {
	if o != nil && o.FileName != nil {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *FormDataContentDisposition) SetFileName(v string) {
	o.FileName = &v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetModificationDate() JSONTime {
	if o == nil || o.ModificationDate == nil {
		var ret JSONTime
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetModificationDateOk() (*JSONTime, bool) {
	if o == nil || o.ModificationDate == nil {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasModificationDate() bool {
	if o != nil && o.ModificationDate != nil {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given JSONTime and assigns it to the ModificationDate field.
func (o *FormDataContentDisposition) SetModificationDate(v JSONTime) {
	o.ModificationDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormDataContentDisposition) SetName(v string) {
	o.Name = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetParameters() map[string]string {
	if o == nil || o.Parameters == nil {
		var ret map[string]string
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetParametersOk() (*map[string]string, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *FormDataContentDisposition) SetParameters(v map[string]string) {
	o.Parameters = &v
}

// GetReadDate returns the ReadDate field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetReadDate() JSONTime {
	if o == nil || o.ReadDate == nil {
		var ret JSONTime
		return ret
	}
	return *o.ReadDate
}

// GetReadDateOk returns a tuple with the ReadDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetReadDateOk() (*JSONTime, bool) {
	if o == nil || o.ReadDate == nil {
		return nil, false
	}
	return o.ReadDate, true
}

// HasReadDate returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasReadDate() bool {
	if o != nil && o.ReadDate != nil {
		return true
	}

	return false
}

// SetReadDate gets a reference to the given JSONTime and assigns it to the ReadDate field.
func (o *FormDataContentDisposition) SetReadDate(v JSONTime) {
	o.ReadDate = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *FormDataContentDisposition) SetSize(v int64) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormDataContentDisposition) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormDataContentDisposition) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormDataContentDisposition) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormDataContentDisposition) SetType(v string) {
	o.Type = &v
}

func (o FormDataContentDisposition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.FileName != nil {
		toSerialize["fileName"] = o.FileName
	}
	if o.ModificationDate != nil {
		toSerialize["modificationDate"] = o.ModificationDate
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.ReadDate != nil {
		toSerialize["readDate"] = o.ReadDate
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFormDataContentDisposition struct {
	value *FormDataContentDisposition
	isSet bool
}

func (v NullableFormDataContentDisposition) Get() *FormDataContentDisposition {
	return v.value
}

func (v *NullableFormDataContentDisposition) Set(val *FormDataContentDisposition) {
	v.value = val
	v.isSet = true
}

func (v NullableFormDataContentDisposition) IsSet() bool {
	return v.isSet
}

func (v *NullableFormDataContentDisposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormDataContentDisposition(val *FormDataContentDisposition) *NullableFormDataContentDisposition {
	return &NullableFormDataContentDisposition{value: val, isSet: true}
}

func (v NullableFormDataContentDisposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormDataContentDisposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
