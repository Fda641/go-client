/*
 * Onshape REST API
 *
 * The Onshape REST API consumed by all clients.
 *
 * API version: 1.111
 * Contact: api-support@onshape.zendesk.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// RevisionsApiService RevisionsApi service
type RevisionsApiService service

// EnumerateRevisionsOpts Optional parameters for the method 'EnumerateRevisions'
type EnumerateRevisionsOpts struct {
    ElementType optional.Int32
    Limit optional.Int32
    Offset optional.Int32
    LatestOnly optional.Bool
    After optional.Int64
}

/*
EnumerateRevisions Method for EnumerateRevisions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cid
 * @param optional nil or *EnumerateRevisionsOpts - Optional Parameters:
 * @param "ElementType" (optional.Int32) - 
 * @param "Limit" (optional.Int32) - 
 * @param "Offset" (optional.Int32) - 
 * @param "LatestOnly" (optional.Bool) - 
 * @param "After" (optional.Int64) - 
@return BtListResponseBtRevisionInfo
*/
func (a *RevisionsApiService) EnumerateRevisions(ctx _context.Context, cid string, localVarOptionals *EnumerateRevisionsOpts) (BtListResponseBtRevisionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BtListResponseBtRevisionInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/revisions/companies/{cid}"
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", _neturl.QueryEscape(parameterToString(cid, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.ElementType.IsSet() {
		localVarQueryParams.Add("elementType", parameterToString(localVarOptionals.ElementType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LatestOnly.IsSet() {
		localVarQueryParams.Add("latestOnly", parameterToString(localVarOptionals.LatestOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.After.IsSet() {
		localVarQueryParams.Add("after", parameterToString(localVarOptionals.After.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1", "application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BtListResponseBtRevisionInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetLatestInDocumentOrCompanyOpts Optional parameters for the method 'GetLatestInDocumentOrCompany'
type GetLatestInDocumentOrCompanyOpts struct {
    Et optional.String
}

/*
GetLatestInDocumentOrCompany Method for GetLatestInDocumentOrCompany
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cd
 * @param cdid
 * @param pnum
 * @param optional nil or *GetLatestInDocumentOrCompanyOpts - Optional Parameters:
 * @param "Et" (optional.String) - 
@return BtRevisionInfo
*/
func (a *RevisionsApiService) GetLatestInDocumentOrCompany(ctx _context.Context, cd string, cdid string, pnum string, localVarOptionals *GetLatestInDocumentOrCompanyOpts) (BtRevisionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BtRevisionInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/revisions/{cd}/{cdid}/p/{pnum}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"cd"+"}", _neturl.QueryEscape(parameterToString(cd, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"cdid"+"}", _neturl.QueryEscape(parameterToString(cdid, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"pnum"+"}", _neturl.QueryEscape(parameterToString(pnum, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Et.IsSet() {
		localVarQueryParams.Add("et", parameterToString(localVarOptionals.Et.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1", "application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BtRevisionInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// GetRevisionHistoryInCompanyOpts Optional parameters for the method 'GetRevisionHistoryInCompany'
type GetRevisionHistoryInCompanyOpts struct {
    ElementType optional.String
    FillApprovers optional.Bool
    FillExportPermission optional.Bool
}

/*
GetRevisionHistoryInCompany Method for GetRevisionHistoryInCompany
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param cid
 * @param pnum
 * @param optional nil or *GetRevisionHistoryInCompanyOpts - Optional Parameters:
 * @param "ElementType" (optional.String) - 
 * @param "FillApprovers" (optional.Bool) - 
 * @param "FillExportPermission" (optional.Bool) - 
@return BtListResponseBtRevisionInfo
*/
func (a *RevisionsApiService) GetRevisionHistoryInCompany(ctx _context.Context, cid string, pnum string, localVarOptionals *GetRevisionHistoryInCompanyOpts) (BtListResponseBtRevisionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BtListResponseBtRevisionInfo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/revisions/companies/{cid}/partnumber/{pnum}"
	localVarPath = strings.Replace(localVarPath, "{"+"cid"+"}", _neturl.QueryEscape(parameterToString(cid, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"pnum"+"}", _neturl.QueryEscape(parameterToString(pnum, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.ElementType.IsSet() {
		localVarQueryParams.Add("elementType", parameterToString(localVarOptionals.ElementType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FillApprovers.IsSet() {
		localVarQueryParams.Add("fillApprovers", parameterToString(localVarOptionals.FillApprovers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FillExportPermission.IsSet() {
		localVarQueryParams.Add("fillExportPermission", parameterToString(localVarOptionals.FillExportPermission.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.onshape.v1+json;charset=UTF-8;qs=0.1", "application/json;charset=UTF-8; qs=0.09"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v BtListResponseBtRevisionInfo
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
